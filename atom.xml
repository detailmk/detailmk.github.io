<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coder--编写代码,制造魔法</title>
  
  <subtitle>Talk is cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://detailmk.github.io/"/>
  <updated>2019-08-13T13:10:37.889Z</updated>
  <id>https://detailmk.github.io/</id>
  
  <author>
    <name>Meng Kai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jdbc+servlet案例</title>
    <link href="https://detailmk.github.io/2019/08/13/jdbc-servlet%E6%A1%88%E4%BE%8B/"/>
    <id>https://detailmk.github.io/2019/08/13/jdbc-servlet案例/</id>
    <published>2019-08-13T13:04:49.000Z</published>
    <updated>2019-08-13T13:10:37.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jdbc-servlet案例"><a href="#jdbc-servlet案例" class="headerlink" title="jdbc+servlet案例"></a>jdbc+servlet案例</h2><p>后端:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class loginServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 统一编码</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">// 获取登录页面传过来的用户名和密码参数</span></span><br><span class="line">String name = request.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line"><span class="comment">// 对用户名和密码进行非空判断,若为空,向客户端返回原因</span></span><br><span class="line"><span class="keyword">if</span> (name == <span class="string">""</span> &amp;&amp; name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;h2 style=\"color: indianred;\"&gt;用户名为空,重新输入 wait5s&lt;/h1&gt;"</span>);</span><br><span class="line">response.setHeader(<span class="string">"refresh"</span>, <span class="string">"5;URL=index.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pwd == <span class="string">""</span> &amp;&amp; pwd.length() == <span class="number">0</span>) &#123;</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;h2 style=\"color: indianred;\"&gt;密码为空,重新输入 wait5s&lt;/h1&gt;"</span>);</span><br><span class="line">response.setHeader(<span class="string">"refresh"</span>, <span class="string">"5;URL=index.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(pwd);</span><br><span class="line"><span class="comment">// 连接数据库,将前台传的用户名和密码和数据库里查询的比对(</span></span><br><span class="line"><span class="comment">// 将用户名和密码存在map里 containsKey(Object</span></span><br><span class="line"><span class="comment">// key)判断用户名是否存在,如果存在接着判断密码是都等于get(key);</span></span><br><span class="line"><span class="comment">// 如果正确输出欢迎用户登录,失败返回原因</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>, <span class="string">"SCOTT"</span>, <span class="string">"TIGER"</span>);</span><br><span class="line">String sql = <span class="string">"select name,pwd from lo_user"</span>;</span><br><span class="line">Statement stat = conn.createStatement();</span><br><span class="line">ResultSet rs = stat.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">String oname = rs.getString(<span class="number">1</span>);</span><br><span class="line">String opwd = rs.getString(<span class="number">2</span>);</span><br><span class="line">map.put(oname, opwd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(name)) &#123;</span><br><span class="line"><span class="keyword">if</span> (pwd.equals(map.get(name))) &#123;</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;h2 style=\"color: chocolate;\"&gt;欢迎用户:"</span> + name + <span class="string">"登录成功&lt;/h1&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;h2 style=\"color: red;\"&gt;密码错误,重新输入 wait5s&lt;/h1&gt;"</span>);</span><br><span class="line">response.setHeader(<span class="string">"refresh"</span>, <span class="string">"5;URL=index.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;h2 style=\"color: red;\"&gt;用户名错误,重新输入 wait5s&lt;/h1&gt;"</span>);</span><br><span class="line">response.setHeader(<span class="string">"refresh"</span>, <span class="string">"5;URL=index.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>name:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"un"</span> <span class="attr">name</span>=<span class="string">"uname"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>passward:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pw"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"confm()"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"warn"</span> <span class="attr">style</span>=<span class="string">"color: orangered;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!-- 提示框 --&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">function confm() &#123;</span><br><span class="line">var name = $("#un").val();</span><br><span class="line">var pwd = $("#pw").val();</span><br><span class="line">//用户名不能为空</span><br><span class="line">if(isEmpty(name)) &#123;</span><br><span class="line">alert("用户名为空,重新输入");</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">//密码不能为空</span><br><span class="line">if(isEmpty(pwd)) &#123;</span><br><span class="line">alert("密码为空,重新输入");</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isEmpty(str) &#123;</span><br><span class="line">if(str == null || str.trim() == "") &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="//detailmk.github.io/2019/08/13/jdbc-servlet案例/F:%5Cmyblog%5Cdetailmk%5Csource_posts%5Cjdbc-servlet%E6%A1%88%E4%BE%8B%5Clogin.gif" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jdbc-servlet案例&quot;&gt;&lt;a href=&quot;#jdbc-servlet案例&quot; class=&quot;headerlink&quot; title=&quot;jdbc+servlet案例&quot;&gt;&lt;/a&gt;jdbc+servlet案例&lt;/h2&gt;&lt;p&gt;后端:&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>session</title>
    <link href="https://detailmk.github.io/2019/08/13/session/"/>
    <id>https://detailmk.github.io/2019/08/13/session/</id>
    <published>2019-08-13T02:59:13.000Z</published>
    <updated>2019-08-13T13:26:44.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h4 id="Session的作用"><a href="#Session的作用" class="headerlink" title="Session的作用"></a>Session的作用</h4><p>Session 的作用就是为了标识一次会话，或者说确认一个用户；并且在一次会话（一个用户的多次请求）期间共享数据。</p><h4 id="Session的获取"><a href="#Session的获取" class="headerlink" title="Session的获取"></a>Session的获取</h4><p>通过 request.getSession()方法，来获取当前会话的 session 对象。</p><h4 id="Session的方法"><a href="#Session的方法" class="headerlink" title="Session的方法"></a>Session的方法</h4><p>获取会话标识符、获取创建时间、获取最后一次访问时间、判断是否是新的会话</p><h4 id="作用域对象"><a href="#作用域对象" class="headerlink" title="作用域对象***"></a>作用域对象***</h4><p>Session 用来表示一次会话，在一次会话中数据是可以共享的。<br>通过 setAttribute(name,value);方法向域对象中添加数据<br>通过getAttribute(name) 从域对象中获取数据<br>通过 removeAttribute(name)从域对象中移除数据。</p><h4 id="session销毁"><a href="#session销毁" class="headerlink" title="session销毁"></a>session销毁</h4><p>1、默认到期时间<br>Tomcat 中 session 默认的存活时间为 30min，即你不操作界面的时间，一旦有操作，session 会重新计时。<br>可以在Tomcat中的web.xml文件中进行修改。<br><session-config><br><session-timeout>30</session-timeout><br></session-config><br>2、自己设定到期时间<br>设定 session 的生命周期，通过session.setMaxInactiveInterval(int);来设定 session 的最大不活动时间，单位为秒。<br>通过 getMaxInactiveInterval();方法来查看当前 Session 对象的最大不活动时间。<br>3、销毁session<br>session.invalidate();<br>4、关闭浏览器<br>session的底层是依赖cookie，默认关闭浏览器即失效<br>5、关闭服务器<br>非正常关闭服务器<br>注：如果是正常通过stop关闭服务器，session对象会被钝化到本地磁盘中，等下次访问时会从本地磁盘中活化<br>当非正常关闭服务器时，session 销毁；当正常关闭服务器时，Session 将被序列化到磁盘上，在工作空间 work 目录下的 SESSION.ser 文件中，下次启动服务时，自动加载到内存。</p><h3 id="获取ServletContext对象"><a href="#获取ServletContext对象" class="headerlink" title="获取ServletContext对象"></a>获取ServletContext对象</h3><p>1、通过request获取<br>2、通过session获取<br>3、通过getServletConfig方法<br>4、直接获取<br>常用方法<br>    获取服务器版本信息   getServerInfo()**<br>    获取项目在服务器中的路径   getRealPath(“/“)**<br>作为域对象<br>通过向 ServletContext 中存取数据，可以使得整个应用程序共享某些数据</p><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><h3 id="案例–-gt-文件下载"><a href="#案例–-gt-文件下载" class="headerlink" title="案例–&gt;文件下载***"></a>案例–&gt;文件下载***</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Uploadf</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//设置编码格式</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//得到下载的文件名</span></span><br><span class="line">String fname=req.getParameter(<span class="string">"fname"</span>);</span><br><span class="line"><span class="comment">//得到存放路径</span></span><br><span class="line">String realPath = req.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</span><br><span class="line"><span class="comment">// 文件路径</span></span><br><span class="line">String filePath = realPath + fname;</span><br><span class="line">System.out.println(filePath);</span><br><span class="line"><span class="comment">// 通过路径得到file对象</span></span><br><span class="line">File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line"><span class="comment">//查看文件是否存在</span></span><br><span class="line"><span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line"><span class="comment">// 为浏览器无法使用某种方式或激活某个程序来处理的 MIME 类型</span></span><br><span class="line">resp.setContentType(<span class="string">"application/x-msdownload"</span>);</span><br><span class="line"><span class="comment">//设置 Content-Disposition头</span></span><br><span class="line">resp.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + fname);</span><br><span class="line"><span class="comment">//得到文件输入流</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="comment">//得到输出流</span></span><br><span class="line">ServletOutputStream sos = resp.getOutputStream();</span><br><span class="line"><span class="comment">//读出请求,响应写出</span></span><br><span class="line"><span class="keyword">byte</span>[] car=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=is.read(car))!=-<span class="number">1</span>)&#123;</span><br><span class="line">sos.write(car, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">sos.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="//detailmk.github.io/2019/08/13/session/F:%5Cmyblog%5Cdetailmk%5Csource_posts%5Csession%5Cload.PNG" alt></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>实现流程：<br>1、创建普通java类<br>2、实现javax.servlet.Filter的接口，并实现对应的方法<br>3、配置web.xml</p><p>doFilter()<br>    处理请求<br>        chain.doFilter()才能放行资源；<br>        写在前面的是处理请求数据，写在后面是处理响应数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;session&quot;&gt;&lt;a href=&quot;#session&quot; class=&quot;headerlink&quot; title=&quot;session&quot;&gt;&lt;/a&gt;session&lt;/h2&gt;&lt;h4 id=&quot;Session的作用&quot;&gt;&lt;a href=&quot;#Session的作用&quot; class=&quot;head
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>web常用对象</title>
    <link href="https://detailmk.github.io/2019/08/12/web%E5%B8%B8%E7%94%A8%E5%AF%B9%E8%B1%A1/"/>
    <id>https://detailmk.github.io/2019/08/12/web常用对象/</id>
    <published>2019-08-12T02:47:19.000Z</published>
    <updated>2019-08-12T14:32:39.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a>HttpServletRequest对象</h2><p>作用:用来接收客户端的请求信息</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>获取请求的完整路径  （从http开始，到?前面）***</p><p>​        String url = request.getRequestURL() + “”;</p><p>​        System.out.println(“获取请求的完整路径： “ + url);</p><p>获取请求的部分路径  （从项目站点名开始，到?前面）***</p><p>​        String uri = request.getRequestURI();</p><p>​        System.out.println(“获取请求的部分路径： “ + uri);</p><p>获取请求的参数    （从?开始，到最后的字符串）</p><p>​        String query = request.getQueryString();</p><p>​        System.out.println(“获取请求的参数： “ + query);</p><p> 获取请求类型    （GET/POST）***</p><p>​        String method = request.getMethod();</p><p>​        System.out.println(“获取请求类型： “ + method);</p><p> 获取协议版本    （HTTP/1.1）</p><p>​        String p = request.getProtocol();</p><p>​        System.out.println(“获取协议版本： “ + p);</p><p>​        // 获取站点名</p><p>​        String web = request.getContextPath();</p><p>​        System.out.println(“获取站点名： “ + web);</p><p>获取指定请求头的值</p><p>​        String host = request.getHeader(“host”);</p><p>​        String agent = request.getHeader(“User-Agent”);</p><p>​        System.out.println(host);</p><p>​        System.out.println(agent);</p><p> 获取所有请求头的名称集合</p><p>​        Enumeration<string> enumeration = request.getHeaderNames();</string></p><p>遍历</p><p>​        while(enumeration.hasMoreElements()) {</p><p>​            System.out.println(enumeration.nextElement());</p><p>​        }</p><p>获取指定名称的参数值***</p><p>​        String uname = request.getParameter(“uname”);</p><p>​        String upwd = request.getParameter(“upwd”);</p><p>​        System.out.println(“姓名：” + uname + “，密码：” +upwd);</p><p>​        </p><p>获取指定名称的所有参数值***</p><p>​        String[] hobbys = request.getParameterValues(“hobbys”);</p><p>​        if (hobbys != null &amp;&amp; hobbys.length &gt;0) {</p><p>​             for (String hobby : hobbys) {</p><p>​                System.out.println(“爱好：” + hobby);</p><p>​            }</p><p>​        }</p><p>​        </p><p>获取所有的参数名</p><p>​        Enumeration<string> enumeration = request.getParameterNames();</string></p><p>​        while (enumeration.hasMoreElements()) {</p><p>​            String string = (String) enumeration.nextElement();</p><p>​            System.out.println(“参数名：” + string);</p><p>​        }    </p><p>获取所有参数名与参数值的map的对象</p><p>​        Map&lt;String, String[]&gt; map = request.getParameterMap();</p><p>​        System.out.println(map.get(“uname”)[0]);</p><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><ul><li>原因</li></ul><p>由于现在的 request 属于接收客户端的参数，所以必然有其默认的语言编码。<br>主要是由于在解析过程中默认使用的编码方式为 ISO-8859-1(此编码不支持中文)，所以解析时一定会出现乱码。</p><ul><li>情景及解决方案</li></ul><table><thead><tr><th></th><th>POST请求</th><th>GET请求</th></tr></thead><tbody><tr><td>Tomcat8及以上版本</td><td>乱码，要处理<br>(request.setCharacterEncoding(“UTF-8”);)</td><td>不乱码，不处理</td></tr><tr><td>Tomcat7及以下版本</td><td>乱码，要处理<br>request.setCharacterEncoding(“UTF-8”);</td><td>乱码，要处理<br>new String(request.getParameter(“uname”).getBytes(“IS0-8859-1”),”UTF-8”)</td></tr></tbody></table><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><ul><li>请求转发，是一种服务器的行为。<br>当客户端请求到达后，服务器进行转发，此时会将请求对象进行保存，<br>地址栏中的 URL 地址不会改变，得到响应后，服务器端再将响应发送给客户端，从始至终只有一个请求发出。<br>实现方式如下，达到多个资源协同响应的效果</li><li>格式：<br>request.getRequestDispatcher(“跳转的路径”).forward(request, response);</li><li>特点：<ol><li>服务端行为，服务端跳转</li><li>地址栏不会发生改变</li><li>request对象共享</li></ol></li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>通过该对象可以在一个请求中传递数据，作用范围：在一次请求中有效，即 服务器跳转有效。 </li><li>request.setAttribute()：设置域对象内容；request.getAttribute(String name): 获取域对象内容；request.removeAttribute(String name): 删除域对象内容. </li><li>request 域对象中的数据在一次请求中有效，则经过请求转发，request 域 中的数据依然 存在，则在请求转发的过程中可以通过 request 来传输/共享数据.</li></ul><h2 id="HttpServletResponse-对象"><a href="#HttpServletResponse-对象" class="headerlink" title="HttpServletResponse 对象"></a>HttpServletResponse 对象</h2><p>Web 服务器收到客户端的 http 请求，会针对每一次请求，分别创建一个用 于代表请求的 request 对象和代表响应的 response 对象。<br>request 和 response 对象代表请求和响应：获取客户端数据，需要通过 request 对象；向客户端输出数据，需要通过 response 对象。 </p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><h3 id="刷新和自动跳转"><a href="#刷新和自动跳转" class="headerlink" title="刷新和自动跳转"></a>刷新和自动跳转</h3><p>resp.setHeader(“refresh”,”2”);<br>response.setHeader(“refresh”,”3;URL=ok.html”); </p><h3 id="数据响应–-gt-乱码解决–-gt-案例-响应图片"><a href="#数据响应–-gt-乱码解决–-gt-案例-响应图片" class="headerlink" title="数据响应–&gt;乱码解决–&gt;案例:响应图片"></a>数据响应–&gt;乱码解决–&gt;案例:响应图片</h3><ul><li><p>数据响应</p><p>getWriter()获取字符流(只能响应回字符)；<br>getOutputStream()获取字节流(能响应一切数据)。<br>响应回的数据到客户端被浏览器解析。<br>注意：两者不能同时使用。<br>java.lang.IllegalStateException: getWriter() has already been called for this response</p></li><li><p>乱码原因：</p><p>服务器响应的数据也会经过网络传输，服务器端有一种编码方式，在客户端也存在一种编码方式，当两端使用的编码方式不同时则出现乱码。</p><p>getWriter()的字符乱码</p><p>响应中文必定出乱码，由于服务器端在进行编码时默认会使用 ISO-8859-1 格式的编码，该编码方式并不支持中文。</p></li><li><p>解决方案：</p></li></ul><ol><li>设置服务端编码为UTF-8    <pre><code>response.setCharacterEncoding(&quot;UTF-8&quot;);</code></pre></li><li>设置客户端的编码<br> ​        response.setHeader(“content-type”, “text/html;charset=utf-8”);<br>总结：设置服务端与客户端的编码一致，且都支持中文 （这一句可代替上面两句设置）<br> ​        response.setContentType(“text/html;charset=utf-8”);</li></ol><h4 id="案例–-gt-响应图片"><a href="#案例–-gt-响应图片" class="headerlink" title="案例–&gt;响应图片"></a>案例–&gt;响应图片</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.ir.RuntimeNode.Request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ser05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1、获取项目存放在服务器中的真实路径 request.getServletContext().getRealPath("/");</span></span><br><span class="line"><span class="comment"> * 2、获取图片的路径 </span></span><br><span class="line"><span class="comment"> 3、通过路径得到file对象 </span></span><br><span class="line"><span class="comment"> 4、判断file对象是否存在，且是一个标准文件 </span></span><br><span class="line"><span class="comment"> 5、得到文件的输入流 </span></span><br><span class="line"><span class="comment"> 6、得到字节输出流</span></span><br><span class="line"><span class="comment"> * 7、输出文件 </span></span><br><span class="line"><span class="comment"> 8、关闭资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String rp = req.getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">System.out.println(rp);</span><br><span class="line">String fp = rp + <span class="string">"WEB-INF/image/kobe.png"</span>;</span><br><span class="line">System.out.println(fp);</span><br><span class="line">File fi = <span class="keyword">new</span> File(fp);</span><br><span class="line"><span class="keyword">if</span> (fi.exists() &amp;&amp; fi.isFile()) &#123;</span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(fi);</span><br><span class="line">resp.setContentType(<span class="string">"image/png"</span>);</span><br><span class="line">ServletOutputStream sos = resp.getOutputStream();</span><br><span class="line"><span class="keyword">byte</span>[] car=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=is.read(car))!=-<span class="number">1</span>)&#123;</span><br><span class="line">sos.write(car, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">sos.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resp.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">"&lt;h2&gt;文件不存在！&lt;/h2&gt;"</span>);</span><br><span class="line">resp.getWriter().close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="https://i.loli.net/2019/08/12/EG36AuPny8KVBad.jpg" alt="po.jpg"></p><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向***"></a>重定向***</h4><ul><li><p>重定向是一种服务器指导，客户端的行为。</p></li><li><p>客户端发出第一个请求，被服务器接收，经过处理服务器进行响应，与此同时，服务器给客户端一个地址（下次请求的地址 resp.sendRedirect(“url”);），当客户端接收到响应后，立刻、马上、自动根据服务器 给的地址进行请求的发送第二个请求，服务器接收请求并作出响应，重定向完成。</p></li><li><p>特点：</p><ol><li>客户端跳转</li><li>地址栏会发生改变</li><li>request对象不共享</li></ol></li></ul><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ser06</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#service(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"s6-----"</span>);</span><br><span class="line">System.out.println(<span class="string">"name: "</span>+request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">request.setAttribute(<span class="string">"username"</span>, <span class="string">"superadmin"</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"s7"</span>).forward(request, response);;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ser07</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#service(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"s7----"</span>);</span><br><span class="line">System.out.println(<span class="string">"name: "</span>+request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">System.out.println(request.getAttribute(<span class="string">"username"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s6-----</span><br><span class="line">name: mk</span><br><span class="line">s7----</span><br><span class="line">name: mk</span><br><span class="line">superadmin</span><br></pre></td></tr></table></figure><h3 id="请求转发和重定向区别"><a href="#请求转发和重定向区别" class="headerlink" title="请求转发和重定向区别***"></a>请求转发和重定向区别***</h3><ol><li>请求转发是服务端跳转，重定向是客户端跳转</li><li>请求转发时地址栏不发生改变，重定向时地址栏发生改变</li><li>请求转发时request对象共享，重定向时request对象不共享 </li><li>请求转发的地址只能在当前站点下，重定向的地址可以是任意路径</li><li>请求转发时request作用域有效，重定向时request域对象无效</li></ol><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="创建和发送"><a href="#创建和发送" class="headerlink" title="创建和发送"></a>创建和发送</h3><p>new Cookie(name, value)创建Cookie</p><p>addCookie(cookie):将cookie对象添加到响应对象进行发送</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>getCookies()的方法用来获取客户端回传的所有 cookie 组成的一个数组，</p><p>如果需要获取单个 cookie 则需要通过遍历，</p><p>getName()获取 Cookie 的名称，getValue()获取 Cookie 的值。</p><p>案例–测试cookie创建发送获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ser08</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#service(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">Cookie co=<span class="keyword">new</span> Cookie(<span class="string">"future"</span>, <span class="string">"a"</span>);</span><br><span class="line">Cookie co1=<span class="keyword">new</span> Cookie(<span class="string">"future2"</span>, <span class="string">"b"</span>);</span><br><span class="line">Cookie co2=<span class="keyword">new</span> Cookie(<span class="string">"future3"</span>, <span class="string">"c"</span>);</span><br><span class="line">response.addCookie(co);</span><br><span class="line">response.addCookie(co1);</span><br><span class="line">response.addCookie(co2);</span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line">Cookie[] coo=request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(coo!=<span class="keyword">null</span>&amp;&amp;coo.length!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(Cookie cook:coo)&#123;</span><br><span class="line">System.out.println(cook.getName());</span><br><span class="line">System.out.println(cook.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">PrintWriter pw=response.getWriter();</span><br><span class="line">pw.write(<span class="string">"&lt;h1&gt;幸运曲奇&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">future</span><br><span class="line">a</span><br><span class="line">future2</span><br><span class="line">b</span><br><span class="line">future3</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/12/gJdZoOLmDUrKksv.jpg" alt="cookie.JPG"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HttpServletRequest对象&quot;&gt;&lt;a href=&quot;#HttpServletRequest对象&quot; class=&quot;headerlink&quot; title=&quot;HttpServletRequest对象&quot;&gt;&lt;/a&gt;HttpServletRequest对象&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>xml和servlet</title>
    <link href="https://detailmk.github.io/2019/08/11/xml%E5%92%8Cservlet/"/>
    <id>https://detailmk.github.io/2019/08/11/xml和servlet/</id>
    <published>2019-08-11T07:38:57.000Z</published>
    <updated>2019-08-12T00:34:19.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>可扩展的标记语言 XML<br>            (1)写法格式：同 html 样式<br>            (2)仅关注数据本身<br>            (3)标记可扩展，可自定义</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>描述数据、存储数据、传输（交换）数据。配置文件</li><li>平台无关性,语言无关性,系统无关性</li></ol><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h4><p>1)、必须要有文档声明<br><?xml version="1.0" encoding="UTF-8" standalone="yes" ?><br><?            表示文档的声明开始xml            表示是一个xml文件    version        xml的版本，目前是1.0encoding    xml文件的编码standalone    文件是否独立存在  如果是"yes"，表示文档独立存在，不能引入外部的dtd文件；如果是"no"，表示可以。默认为"yes"?>            表示文档的声明结束<br>注意文本文件保存时候默认的编码格式是ANSI，需用记事本把它手动改为UTF-8保存。<br>2)、必须有且仅有一个根元素<br>3)、严格区分大小写<br>4)、属性值用引号(双引号或单引号) :等号分开的名称-值对；在一个元素上，相同的属性只能出现一次<br>5)、标记成对；<br>6)、空标记关闭；<br>7)、元素正确嵌套。</p><h4 id="元素命名规则"><a href="#元素命名规则" class="headerlink" title="元素命名规则"></a>元素命名规则</h4><p>1)、名称中可以包含字母、数字或者其他可见字符；<br>2)、名称不能以数字开头；<br>3)、不能以 XML/xml/Xml…开头；<br>4)、名称中不能含空格；<br>5)、名称中不能含冒号（注：冒号留给命名空间使用）</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>实体叫 ENTITY，实体的作用是避免重复输入。作用相当于宏或者变量。</p><p>1)内置的 5 种实体<br>$$<br>实体 符号<br>&lt; &lt;<br>&gt; &gt;<br>&amp; &amp;<br>&quot; “<br>&apos; ‘<br>$$<br>2)自定义实体</p><!DOCTYPE 根元素[ <!ENTITY 实体名 "实体内容"><p>  // 实体声明<br>]&gt;<br>使用已定义的实体：&amp;实体名;</p><h4 id="文档类型声明"><a href="#文档类型声明" class="headerlink" title="文档类型声明"></a>文档类型声明</h4><p>文档类型定义——DOCTYPE，文档类型声明，紧跟 XML 声明之后，包含所有实体声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素标记名[</span></span><br><span class="line"><span class="meta">// 实体声明</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>1、元素、属性、实体、PCDATA、CDATA<br>2、CDATA<br>                用于把整段文本解释为纯字符数据而不是标记的情况。<br>                如包含大量的&lt;、&gt;、&amp;、或者” 字符。CDATA 节中的所有字符都会被当做元素字符数据的常量部分，而不是 XML 标记，可以输入除]]&gt;外任意字符，不能嵌套。<br>                <!--[CDATA[ ...... ]]--><br>3、PCDATA<br>                PCDATA 的意思是被解析的字符数据（parsed character data）。<br>                可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。</p><h3 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h3><p>基本的解析方式有两种:一种叫 SAX，另一种叫 DOM。<br>        SAX(Simple API for XML)是基于事件流的解析,DOM(Document Object Model)是基于 XML 文档树结构的解析。<br>        SAX:效率高，数据量小，仅一次获取<br>        DOM:整颗树加载到内存中，耗内存，可多次获取。</p><h2 id="案例–XML解析-dom4j"><a href="#案例–XML解析-dom4j" class="headerlink" title="案例–XML解析(dom4j)***"></a>案例–XML解析(dom4j)***</h2><p>实现步骤:</p><ul><li>1、获取要解析的文件对象 File</li><li>2、获取解析器</li><li>3、通过解析器将文件对象转换成Document对象</li><li>4、得到Document对象的根元素</li><li>5、得到根元素的子元素</li><li>6、遍历，得到子元素的名和文本值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4jReader</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">File f1=<span class="keyword">new</span> File(<span class="string">"src/user.xml"</span>);</span><br><span class="line">SAXReader re=<span class="keyword">new</span> SAXReader();</span><br><span class="line">Document docu = re.read(f1);</span><br><span class="line">Element conte=docu.getRootElement();</span><br><span class="line">Iterator&lt;Element&gt; it=conte.elementIterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Element ele=it.next();</span><br><span class="line">System.out.println(ele.getName()+<span class="string">"--&gt;"</span>+ele.getStringValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Team--&gt;</span><br><span class="line">bull</span><br><span class="line">chi</span><br><span class="line"></span><br><span class="line">Team--&gt;</span><br><span class="line">jazz</span><br><span class="line">uath</span><br><span class="line"></span><br><span class="line">Team--&gt;</span><br><span class="line">lakers</span><br><span class="line">La</span><br></pre></td></tr></table></figure><p>案例2:写出数据到xml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.OutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4jWriter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//使用DocumentHelper来创建Document对象</span></span><br><span class="line">Document docu=DocumentHelper.createDocument();</span><br><span class="line"><span class="comment">//创建元素并设置关系</span></span><br><span class="line">Element team=docu.addElement(<span class="string">"Team"</span>);</span><br><span class="line">Element name=team.addElement(<span class="string">"name"</span>);</span><br><span class="line">Element tcity=team.addElement(<span class="string">"city"</span>);</span><br><span class="line"><span class="comment">//设置文本</span></span><br><span class="line">name.setText(<span class="string">"bull"</span>);</span><br><span class="line">tcity.setText(<span class="string">"chi"</span>);</span><br><span class="line"><span class="comment">//创建格式化输出器</span></span><br><span class="line">OutputFormat of=OutputFormat.createPrettyPrint();</span><br><span class="line">of.setEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//输出到文件</span></span><br><span class="line">File f1=<span class="keyword">new</span> File(<span class="string">"src/outTeam.xml"</span>);</span><br><span class="line">XMLWriter xw = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(f1.getAbsolutePath())),of);</span><br><span class="line">xw.write(docu);</span><br><span class="line">xw.flush();</span><br><span class="line">xw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="https://i.loli.net/2019/08/11/wreAkEKXGNFH68T.jpg" alt="xml2.JPG"></p><h1 id="javaweb体系结构"><a href="#javaweb体系结构" class="headerlink" title="javaweb体系结构"></a>javaweb体系结构</h1><ul><li><p>C/S结构</p><p>C/S 是 Client/Server 的缩写，即客户端/服务器结构。在这种结构中，服务 器通常采用高 性能的 PC 机或工作站，并采用大型数据库系统（如 Oracle 或 SQL Server）,客户端则需要安装专用的客户端软件。这种结构可以充分利用两端 硬件环境的优势，将任务合理分配到客户端和服务器，从而降低了系统的通信开销。</p></li><li><p>B/S结构</p><p>B/S 是 Browser/Server 的缩写，即浏览器/服务器结构。在这种结构中，客户端不需要开发任何用户界面，而统一采用如 IE、Firefox、Chrome 等浏览器， 通过 Web 浏览器向 Web 服务器发送请求，由 Web 服务器进行处理，并将处 理结果逐级传回客户端。这种结构利用不断成熟和普及的浏览器技术实现原来需 要复杂专用软件才能实现的强大功能，从而节约了开发成本，是一种全新的软件 体系结构。</p></li></ul><h1 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h1><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义:"></a>定义:</h3><p>​            超文本传输协议，应用层协议</p><h3 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式:"></a>协议格式:</h3><p>​            <a href="http://ip或域名:端口/项目路径/资源路径?参数名=参数值" target="_blank" rel="noopener">http://ip或域名:端口/项目路径/资源路径?参数名=参数值</a></p><h3 id="协议特点"><a href="#协议特点" class="headerlink" title="协议特点:"></a>协议特点:</h3><p>​            1、支持客户端/服务端模式<br>​            2、简单快速<br>​            3、灵活<br>​            4、http/1.1后支持持续连接<br>​            5、无状态</p><h3 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议:"></a>请求协议:</h3><p>​        请求行<br>​            请求方式（GET/POST）  请求路径   协议版本<br>​        请求头<br>​            每一个报头域都是由名字+“：”+空格+值组成，消息报头域的名字是大小写无关的。<br>​        请求正文<br>​            GET请求没有请求正文，POST请求有    </p><h3 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议:"></a>响应协议:</h3><p>​        响应行/状态行<br>​            协议版本    响应状态码        状态码说明<br>​        响应头/消息报头<br>​            每一个报头域都是由名字+“：”+空格+值组成，消息报头域的名字是大小写无关的。<br>​        响应正文<br>​            浏览器中能看到内容</p><h3 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h3><p>​        请求头<br>​                referer<br>​                    该请求头指明请求从哪里来（上一个页面是谁）<br>​                    如果是直接从地址栏输入的地址，是没有referer请求头<br>​                    常用场景：百度竞价、统计工作和防盗链等<br>​        响应头<br>​                Refresh：<br>​                    自动跳转（单位是秒），可以在页面通过 meta 标签实现，也可在后台实现。</p><pre><code>&lt;meta http-equiv=”refresh” content=”3;url=http://www.baidu.com”&gt;</code></pre><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义:"></a>定义:</h3><p>Servlet 是 Server 与 Applet 的缩写，是服务端小程序的意思。使用 Java 语 言编写的服务 器端程序，可以像生成动态的 WEB 页，Servlet 主要运行在服务 器端，并由服务器调用执行， 是一种按照 Servlet 标准来开发的类</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>创建web项目</p></li><li><p>创建类</p></li><li><p>实现Servlet规范(1. 继承HttpServlet类 2.继承GenericServlet 3.实现Servlet接口)</p></li><li><p>重写service()方法</p></li><li><p>配置web.xml</p><p>1、<servlet>中的<servlet-name>标签的值要唯一<br>2、<servlet-mapping>中的<url-pattern>的值要唯一</url-pattern></servlet-mapping></servlet-name></servlet></p><pre><code>java.lang.IllegalArgumentException: The servlets named [servlet04] and [servlet05] are both mapped to the url-pattern [/ser04] which is not permitted</code></pre><p>3、<servlet>中的<servlet-name>与<servlet-mapping>的<servlet-name>标签保持一致<br>4、<url-pattern>的值前面要加”/“    </url-pattern></servlet-name></servlet-mapping></servlet-name></servlet></p><pre><code>java.lang.IllegalArgumentException: Invalid &lt;url-pattern&gt; ser05 in servlet mapping</code></pre><p> 5、修改了配置文件必须要重启服务器才会生效<br> 6、一个Servlet可以配置多个访问路径</p><pre><code>通配符&quot;*&quot;    只能放在最前面或最后面    不能放中间且不能单独存在（以/分割的，不能和单词组成整体）。    越精确越优先。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  <span class="comment">&lt;!-- servlet的名称，给服务器看的；要与&lt;servlet-mapping&gt;标签中的&lt;servlet-name&gt;保持一致  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.shsxt.servlet.Servlet01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  <span class="comment">&lt;!-- Servlet类的类名路径；按住ctrl键，能点进去表示路径正确  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!-- servlet的名称，给服务器看的；要与&lt;servlet&gt;标签中的&lt;servlet-name&gt;保持一致  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ser01<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> <span class="comment">&lt;!-- servlet的对外访问路径，给浏览器看的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="https://i.loli.net/2019/08/11/W25gFzd4Dlah6I1.jpg" alt="servlet1.JPG"></p><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>客户端发出请求 根据 web.xml 文件的配置，找到对应的 读取中的值 找到 对应的 找到该 class 并加载执行该 class，返回结果 由 Web 服务器将结果响 应给客户端 </p><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p><img src="https://i.loli.net/2019/08/11/lLXwTsRBIuy2Zvq.png" alt="ser4.png"></p><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>实例和初始化时机<br>        当请求到达容器时，容器查找该 servlet 对象是否存在，如果不存在，则会创建实例并 进行初始化。<br>就绪/调用/服务阶段<br>        有请求到达容器，容器调用 servlet 对象的 service()方法,处理请求的方法在整个声明周 期中可以被多次调用；<br>        HttpServlet 的 service()方法，会依据请求方式来调用 doGet()或者 doPost()方法。但是， 这两个 do 方法默认情况下，会抛出异常，需要子类去 override。<br>销毁时机<br>        当容器关闭时（应用程序停止时），会将程序中的 Servlet 实例进行销毁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;xml&quot;&gt;&lt;a href=&quot;#xml&quot; class=&quot;headerlink&quot; title=&quot;xml&quot;&gt;&lt;/a&gt;xml&lt;/h1&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>json</title>
    <link href="https://detailmk.github.io/2019/08/09/json/"/>
    <id>https://detailmk.github.io/2019/08/09/json/</id>
    <published>2019-08-09T03:32:39.000Z</published>
    <updated>2019-08-09T03:54:42.560Z</updated>
    
    <content type="html"><![CDATA[<p>json</p><p>使用Junit(单元测试)方式</p><p>采用gson解析java对象通过Gson.toJson(Object obj)方法转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Player p1 = <span class="keyword">new</span> Player(<span class="number">24</span>, <span class="string">"kobe"</span>, <span class="string">"sg"</span>);</span><br><span class="line">String pjson=<span class="keyword">new</span> Gson().toJson(p1);</span><br><span class="line">System.out.println(pjson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;pid&quot;:24,&quot;pname&quot;:&quot;kobe&quot;,&quot;pside&quot;:&quot;sg&quot;&#125;</span><br></pre></td></tr></table></figure><p>通过gson的fromJson(json字符串,类名.class)将json转成Java对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String json=<span class="string">"&#123;\"pid\":24,\"pname\":\"kobe\",\"pside\":\"sg\"&#125;"</span>;</span><br><span class="line">Gson gs = <span class="keyword">new</span> Gson();</span><br><span class="line">Player p1 = gs.fromJson(json, Player.class);</span><br><span class="line">System.out.println(p1.getPname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kobe</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;json&lt;/p&gt;
&lt;p&gt;使用Junit(单元测试)方式&lt;/p&gt;
&lt;p&gt;采用gson解析java对象通过Gson.toJson(Object obj)方法转&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>基于bootstrap的球员管理系统</title>
    <link href="https://detailmk.github.io/2019/08/08/%E5%9F%BA%E4%BA%8Ebootstrap%E7%9A%84%E7%90%83%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://detailmk.github.io/2019/08/08/基于bootstrap的球员管理系统/</id>
    <published>2019-08-08T10:37:09.000Z</published>
    <updated>2019-08-09T02:27:22.499Z</updated>
    
    <content type="html"><![CDATA[<p>大概从小的湖人情结,想做个湖人球员管理系统</p><p>案例需求:</p><p>完成表格中用户信息的删除,修改和添加</p><ul><li><p>获取功能</p><p>通过ajax get方式解析json文件里的对象,将jq对象遍历并获取值添加到每一个单元格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">loadp();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//添加json里对象信息到表格中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: <span class="string">"get"</span>,</span><br><span class="line">url: <span class="string">"date/player.json"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> pl = $(<span class="string">"#ptab"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> res) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res[i]);</span><br><span class="line"><span class="keyword">var</span> tr = <span class="string">"&lt;tr id='tr_"</span> + res[i].pid + <span class="string">"'&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td style='font-size: 25px;'&gt;"</span> + res[i].pid + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td&gt;"</span> + <span class="string">"&lt;img src='"</span> + res[i].ss + <span class="string">"'&gt;"</span> + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td style='font-size: 25px;'&gt;"</span> + res[i].pname + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td style='font-size: 25px;'&gt;"</span> + res[i].pside + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td&gt;&lt;button class='btn btn-warning btn-lg'&gt;&lt;span class='glyphicon glyphicon-pencil'&gt;&lt;/span&gt; 修改&lt;/button&gt;&amp;nbsp;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;button onclick='deletep(this,"</span> + res[i].pid + <span class="string">")' class='btn btn-danger btn-lg'&gt;&lt;span class='glyphicon glyphicon-trash'&gt;&lt;/span&gt; 删除&lt;/button&gt; &amp;nbsp;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">pl.append(tr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面效果</p><p><img src="https://i.loli.net/2019/08/09/WcHI8Ct7A6ox1iB.jpg" alt="la.JPG"></p></li><li><p>删除功能 </p><p>方式一:</p><p>获取当前删除按钮对象的父元素来把整行信息删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr += <span class="string">"&lt;button onclick='deletep(this)' class='btn btn-danger btn-lg'&gt;&lt;span class='glyphicon glyphicon-trash'&gt;&lt;/span&gt; 删除&lt;/button&gt; &amp;nbsp;"</span>;</span><br></pre></td></tr></table></figure><p>方式二:</p><p>通过获取dom对象信息时通过赋id值给<tr>操作,删除通过获取按钮所在行的id值操作</tr></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr = <span class="string">"&lt;tr id='tr_"</span> + res[i].pid + <span class="string">"'&gt;"</span>;</span><br><span class="line">...............................</span><br><span class="line">tr += <span class="string">"&lt;button onclick='deletep(this,"</span> + res[i].pid + <span class="string">")' class='btn btn-danger btn-lg'&gt;&lt;span class='glyphicon glyphicon-trash'&gt;&lt;/span&gt; 删除&lt;/button&gt; &amp;nbsp;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;/td&gt;"</span>;</span><br></pre></td></tr></table></figure><p>主方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式:删除球员1取当前按钮的到他的父元素删除</span></span><br><span class="line"><span class="comment">//第二种方式:通过给每一行赋id的值,获取到id进行删除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deletep</span>(<span class="params">th, pid</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(th);</span><br><span class="line"><span class="comment">//方式一$(th).parent().parent().remove();</span></span><br><span class="line">$(<span class="string">"#tr_"</span> + pid).remove();<span class="comment">//方式2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能效果</p><p><img src="https://i.loli.net/2019/08/08/9VNZb1uzkBIsWOU.gif" alt="pre.gif"></p></li><li><p>优化</p><p>两种方法都可以实现,但对于用户不够友好,应该添加提示框功能</p><p>思路:创建一个模态框,给按钮点击事件(弹出模态框时)</p><p>​        在模态框中创建一个隐藏域用来接收”删除”按钮的对象的id,得到id后拼接成<tr>的id转成jq对象进行删除.(实现两个毫不相关的元素的联系操作)</tr></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deletep</span>(<span class="params">th, pid</span>) </span>&#123;</span><br><span class="line"><span class="comment">//手动打开模态框</span></span><br><span class="line">$(<span class="string">'#rfm'</span>).modal(<span class="string">'show'</span>);</span><br><span class="line"><span class="comment">//给模态框的隐藏域赋值</span></span><br><span class="line">$(<span class="string">"#removepid"</span>).val(pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeM</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取模态框中获得的球员号码</span></span><br><span class="line"><span class="keyword">var</span> pid=$(<span class="string">"#removepid"</span>).val();</span><br><span class="line"><span class="keyword">var</span> tr=$(<span class="string">"#tr_"</span> + pid);</span><br><span class="line">tr.remove();</span><br><span class="line">$(<span class="string">"#rfm"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果</p><p><img src="https://i.loli.net/2019/08/09/QMhcxGBwnEs39mg.gif" alt="p2.gif"></p></li><li><p>修改功能</p><ol><li><p>创建模态框,点击修改按钮弹出模态框—-&gt;给模态框里的表单元素赋值—-&gt;根据球员号码取得表格元素tr由此遍历td获取到的值赋给模态框里.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updatep</span>(<span class="params">pid</span>)</span>&#123;</span><br><span class="line"><span class="comment">//打开模态框</span></span><br><span class="line">$(<span class="string">'#upm'</span>).modal(<span class="string">'show'</span>);</span><br><span class="line"><span class="comment">//得到要修改的tr对象</span></span><br><span class="line"><span class="keyword">var</span> tr=$(<span class="string">"#tr_"</span>+pid);</span><br><span class="line"><span class="comment">//得到tr子元素td</span></span><br><span class="line"><span class="keyword">var</span> tds=tr.children();</span><br><span class="line"><span class="comment">//得到具体单元格的文本</span></span><br><span class="line"><span class="keyword">var</span> pid=tds.eq(<span class="number">0</span>).text();</span><br><span class="line"><span class="keyword">var</span> pname=tds.eq(<span class="number">2</span>).text();</span><br><span class="line"><span class="keyword">var</span> psd=tds.eq(<span class="number">3</span>).text();</span><br><span class="line"><span class="comment">//获取的值赋给模态框的文本框</span></span><br><span class="line">$(<span class="string">"#pn"</span>).val(pname);</span><br><span class="line">$(<span class="string">"#pi"</span>).val(pid);</span><br><span class="line">$(<span class="string">"#psd"</span>).val(psd);</span><br><span class="line">$(<span class="string">"#upid"</span>).val(pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>获取模态框里的元素的值(如果空值提醒用户return模态框界面)—&gt;得到模态框修改的值—&gt;在对应的单元格修改信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateM</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取文本框和隐藏域的值</span></span><br><span class="line"><span class="keyword">var</span> pid=$(<span class="string">"#upid"</span>).val();</span><br><span class="line"><span class="keyword">var</span> pname=$(<span class="string">"#pn"</span>).val();</span><br><span class="line"><span class="keyword">var</span> psd=$(<span class="string">"#psd"</span>).val();</span><br><span class="line"></span><br><span class="line"><span class="comment">//做非空判断</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty(pname))&#123;</span><br><span class="line">$(<span class="string">"#upmsg"</span>).html(<span class="string">"name error!!! input again"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isEmpty(pid))&#123;</span><br><span class="line">$(<span class="string">"#upmsg"</span>).html(<span class="string">"number error!!! input again"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isEmpty(psd))&#123;</span><br><span class="line">$(<span class="string">"#upmsg"</span>).html(<span class="string">"side error!!! input again"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到修改的tr对象</span></span><br><span class="line"><span class="keyword">var</span> tr=$(<span class="string">"#tr_"</span>+pid);</span><br><span class="line"><span class="comment">//得到tr的子元素td</span></span><br><span class="line"><span class="keyword">var</span> tds=tr.children();</span><br><span class="line"><span class="comment">//给每个单元格赋值</span></span><br><span class="line">tds.eq(<span class="number">0</span>).text(pid);</span><br><span class="line">tds.eq(<span class="number">2</span>).text(pname);</span><br><span class="line">tds.eq(<span class="number">3</span>).text(psd);</span><br><span class="line"><span class="comment">//关闭模态框</span></span><br><span class="line">$(<span class="string">"#upm"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(str==<span class="literal">null</span>||str.trim()==<span class="string">""</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>------修改功能效果</code></pre><p><img src="https://i.loli.net/2019/08/09/KNuXJosFtkfG5Rj.gif" alt="up.gif"></p><ul><li><p>添加功能</p><p>思路:先创建模态框,打开模态框绑定添加球员按钮的事件,给模态框里的表单里的各个元素赋值,给模态框的确认按钮赋值,创建tr对象,取出信息给每个单元格,追加到table中的子元素tr</p><p>实现代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加球员信息</span></span><br><span class="line"><span class="comment">/*需求分析: 点击"添加球员"按钮,弹出添加的模态框,输入模态框的信息,将模态框的信息添加给页面*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#ism"</span>).modal(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将这些值赋值到页面上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertM</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取模态框里的表单的值</span></span><br><span class="line"><span class="keyword">var</span> pi = $(<span class="string">"#pi1"</span>).val();</span><br><span class="line"><span class="keyword">var</span> pname = $(<span class="string">"#pn1"</span>).val();</span><br><span class="line"><span class="keyword">var</span> psd = $(<span class="string">"#psd1"</span>).val();</span><br><span class="line"><span class="keyword">var</span> pim = $(<span class="string">"#pim"</span>).val();</span><br><span class="line"></span><br><span class="line"><span class="comment">//做非空判断</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty(pname)) &#123;</span><br><span class="line">$(<span class="string">"#upmsg2"</span>).html(<span class="string">"name error!!! input again"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isEmpty(pi)) &#123;</span><br><span class="line">$(<span class="string">"#upmsg2"</span>).html(<span class="string">"number error!!! input again"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isEmpty(pim)) &#123;</span><br><span class="line">$(<span class="string">"#upmsg2"</span>).html(<span class="string">"img error!!! input again"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isEmpty(psd)) &#123;</span><br><span class="line">$(<span class="string">"#upmsg2"</span>).html(<span class="string">"side error!!! input again"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备添加球员的头像地址(http://img0.imgtn.bdimg.com/it/u=1769402076,306714444&amp;fm=15&amp;gp=0.jpg)</span></span><br><span class="line"><span class="comment">//创建tr对象,接收模态框的信息</span></span><br><span class="line"><span class="keyword">var</span> tr = <span class="string">"&lt;tr id='tr_"</span> + pi + <span class="string">"'&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td style='font-size: 25px;'&gt;"</span> + pi + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td&gt;"</span> + <span class="string">"&lt;img src='"</span> + pim + <span class="string">"'&gt;"</span> + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td style='font-size: 25px;'&gt;"</span> + pname + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td style='font-size: 25px;'&gt;"</span> + psd + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;td&gt;&lt;button onclick='updatep("</span> + pi + <span class="string">")' class='btn btn-warning btn-lg'&gt;&lt;span class='glyphicon glyphicon-pencil'&gt;&lt;/span&gt; 修改&lt;/button&gt;&amp;nbsp;"</span>;</span><br><span class="line">tr += <span class="string">"&lt;button onclick='deletep(this,"</span> + pi + <span class="string">")' class='btn btn-danger btn-lg'&gt;&lt;span class='glyphicon glyphicon-trash'&gt;&lt;/span&gt; 删除&lt;/button&gt; &amp;nbsp;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将tr对象追加到table里面</span></span><br><span class="line">$(<span class="string">"#ptab"</span>).children().append(tr);</span><br><span class="line"><span class="comment">//关闭模态框</span></span><br><span class="line">$(<span class="string">"#ism"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加效果</p><p><img src="https://i.loli.net/2019/08/09/L6RtXJONcfpYFxg.gif" alt="in.gif"></p><p>最后湖人四少添加完成,虽然阵中只剩下kuz,但希望他们变得越来越好</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大概从小的湖人情结,想做个湖人球员管理系统&lt;/p&gt;
&lt;p&gt;案例需求:&lt;/p&gt;
&lt;p&gt;完成表格中用户信息的删除,修改和添加&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取功能&lt;/p&gt;
&lt;p&gt;通过ajax get方式解析json文件里的对象,将jq对象遍历并获取值添加到每一个单元格&lt;/p
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap</title>
    <link href="https://detailmk.github.io/2019/08/07/bootstrap/"/>
    <id>https://detailmk.github.io/2019/08/07/bootstrap/</id>
    <published>2019-08-07T11:58:28.000Z</published>
    <updated>2019-08-08T10:35:44.867Z</updated>
    
    <content type="html"><![CDATA[<p>hello bootstrap</p><p>下载bootstrap框架</p><p>引入css和js文件(注意:jq在引入bootstrap的js后引入)</p><p>布局容器(固定宽度和默认100%宽度)</p><p>栅格网络系统(列偏移,列排序)</p><p>表格</p><p>表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>bootstrap01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello bootstrap<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"background-color: darkviolet "</span>&gt;</span>mknb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span> <span class="attr">style</span>=<span class="string">"background-color: darkmagenta"</span>&gt;</span>mkcool<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span> <span class="attr">style</span>=<span class="string">"background-color: blueviolet"</span>&gt;</span>mknb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span> <span class="attr">style</span>=<span class="string">"background-color: darkorange"</span>&gt;</span>mkcool<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span> <span class="attr">style</span>=<span class="string">"background-color: blueviolet"</span>&gt;</span>mknb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span> <span class="attr">style</span>=<span class="string">"background-color: darkorange"</span>&gt;</span>mkcool<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span> <span class="attr">style</span>=<span class="string">"background-color: navajowhite"</span>&gt;</span>mknb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span> <span class="attr">style</span>=<span class="string">"background-color:whitesmoke"</span>&gt;</span>mkcool</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span> <span class="attr">style</span>=<span class="string">"background-color: #e4b9c0"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span> <span class="attr">style</span>=<span class="string">"background-color: #46b8da"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span> <span class="attr">style</span>=<span class="string">"background-color: tomato"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面效果</p><p><img src="https://i.loli.net/2019/08/07/jza2KmAkWRnwrQ1.jpg" alt="1.JPG"></p><p>页面(了解即可)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello bootstrap&lt;/p&gt;
&lt;p&gt;下载bootstrap框架&lt;/p&gt;
&lt;p&gt;引入css和js文件(注意:jq在引入bootstrap的js后引入)&lt;/p&gt;
&lt;p&gt;布局容器(固定宽度和默认100%宽度)&lt;/p&gt;
&lt;p&gt;栅格网络系统(列偏移,列排序)&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>jquery</title>
    <link href="https://detailmk.github.io/2019/08/06/jquery/"/>
    <id>https://detailmk.github.io/2019/08/06/jquery/</id>
    <published>2019-08-06T00:36:00.000Z</published>
    <updated>2019-08-09T02:03:28.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://i.loli.net/2019/08/07/wRoe2vyMsuGcxEK.png" alt="jquery.png"></p><h3 id="Dom对象与Jquery对象互相转换"><a href="#Dom对象与Jquery对象互相转换" class="headerlink" title="Dom对象与Jquery对象互相转换***"></a>Dom对象与Jquery对象互相转换***</h3><p>通过Jquery对象获取jquery包装集对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divJquery = $(<span class="string">"#div1"</span>);</span><br><span class="line">console.log(divJquery);</span><br></pre></td></tr></table></figure><p>将Jquery包装集对象转换为Dom对象：获取jquery包装集的指定下标 */</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domDiv = divJquery[<span class="number">0</span>];</span><br><span class="line">console.log(domDiv);</span><br></pre></td></tr></table></figure><p> Jquery的each()函数：遍历 jQuery 对象数组得到的对象是 Dom 对象，可以通过$()转为 jQuery 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).each(function(index,element)&#123;</span><br><span class="line">console.log(index);</span><br><span class="line">console.log(element); <span class="comment">// dom对象</span></span><br><span class="line"><span class="comment">// &#123;//通过 id 选择器选择了 id 为 div1 的所有元素然后进行遍历，那么遍历出的每个元素就是 id 为 mydiv 的标签元素，而 this 就代表了当前的这个元素</span></span><br><span class="line">console.log(<span class="keyword">this</span>); <span class="comment">// dom对象</span></span><br><span class="line">console.log($(<span class="keyword">this</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Jquery选择器"><a href="#Jquery选择器" class="headerlink" title="Jquery选择器"></a>Jquery选择器</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器***"></a>基础选择器***</h4><table><thead><tr><th>选择器</th><th>名称</th><th>举例</th></tr></thead><tbody><tr><td>id 选择器</td><td>#id</td><td>$(“#testDiv”)选择 id 为 testDiv 的元素</td></tr><tr><td>元素名称选择器</td><td>element</td><td>$(“div”)选择所有 div 元素</td></tr><tr><td>类选择器</td><td>.class</td><td>$(“.blue”)选择所有 class=blue 的元素</td></tr><tr><td>选择所有元素</td><td>*</td><td>$(“*”)选择页面所有元素</td></tr><tr><td>组合选择器</td><td>selector1,selector2,selectorN</td><td>$(“#testDiv,span,.blue”)同时选中这几个选择器匹配的元素</td></tr></tbody></table><h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><table><thead><tr><th>选择器</th><th>名称</th><th>举例</th></tr></thead><tbody><tr><td>后代选择器</td><td>ancestor descendant</td><td>$(“#parent div”)选择 id 为 parent 的元素的所有 div 元素</td></tr><tr><td>子代选择器</td><td>parent &gt; child</td><td>$(“#parent&gt;div”)选择 id 为 parent 的直接 div 子元素</td></tr><tr><td>相邻选择器</td><td>prev + next</td><td>$(“.blue + img”)选择 css 类为 blue 的下一个 img 元素</td></tr><tr><td>同辈选择器</td><td>prev ~ sibling</td><td>$(“.blue ~ img”)选择 css 类为 blue 的之后的 img 元素</td></tr></tbody></table><h4 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h4><p>:input     查找所有的 input元素：$(“:input”)；+<br>注意：会匹配所有的 input、textarea、select 和 button 元素。</p><table><thead><tr><th>选择器</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>文本框选择器</td><td>:text</td><td>查找所有文本框：$(“:text”)</td></tr><tr><td>密码框选择器</td><td>:password</td><td>查找所有密码框：$(“:password”)</td></tr><tr><td>单选按钮选择器</td><td>:radio</td><td>查找所有单选按钮：$(“:radio”)</td></tr><tr><td>复选框选择器</td><td>:checkbox</td><td>查找所有复选框：$(“:checkbox”)</td></tr><tr><td>提交按钮选择器</td><td>:submit</td><td>查找所有提交按钮：$(“:submit”)</td></tr><tr><td>图像域选择器</td><td>:image</td><td>查找所有图像域：$(“:image”)</td></tr><tr><td>重置按钮选择器</td><td>:reset</td><td>查找所有重置按钮：$(“:reset”)</td></tr><tr><td>按钮选择器</td><td>:button</td><td>查找所有按钮：$(“:button”)</td></tr><tr><td>文件域选择器</td><td>:file</td><td>查找所有文件域：$(“:file”)</td></tr></tbody></table><h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:checked</td><td>获取所有被选中的元素</td></tr><tr><td>:eq(index)</td><td>匹配指定下标的元素，下标从0开始</td></tr><tr><td>:even</td><td>匹配所有的偶数下标的元素</td></tr><tr><td>:odd</td><td>匹配所有的奇数下标的元素</td></tr><tr><td>:gt(index)</td><td>匹配大于指定下标的元素</td></tr></tbody></table><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>$(“[属性名]”)</td><td>选择所有设置过指定属性名的元素</td></tr><tr><td>$(“[属性名=属性值]”)</td><td>选择所有设置过指定属性名等于指定属性值的元素</td></tr></tbody></table><h3 id="Jquery-Dom操作"><a href="#Jquery-Dom操作" class="headerlink" title="Jquery Dom操作"></a>Jquery Dom操作</h3><h4 id="操作元素的属性（attr和prop）"><a href="#操作元素的属性（attr和prop）" class="headerlink" title="操作元素的属性（attr和prop）"></a>操作元素的属性（attr和prop）</h4><p>attr()和prop()<br>1、固有属性：两种方法都可以获取到<br>2、自定义属性：attr()可以获取，prop()不可以<br>3、返回值是boolean的属性（checked、selected、disabled禁用）：<br>      如果设置过属性，prop返回true，attr返回属性值<br>      如果未设置值，prop返回false，attr返回undefinded<br>总结：<br>    如果属性的返回值是boolean类型，则使用prop();否则使用attr()</p><ul><li><p>获取属性</p><ul><li><p>attr(属性名称): 获取指定的属性值,操作 checkbox 时选中返回checked，没有选中返回 undefined。</p><p>例如:attr(‘checked’) , attr(‘name’)</p></li><li><p>prop(属性名称): 获取具有 true 和 false 两个属性的属性值<br>prop(‘checked’)</p></li></ul></li><li><p>设置属性</p><table><thead><tr><th>方法</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>attr(属性名称，属性值)</td><td>设置指定的属性值，操作 checkbox时选中返回 checked，没有选中返回 undefined。</td><td>attr(‘name’,’zs’) attr(‘checked’,’checked’)</td></tr><tr><td>prop(属性名称，属性值)</td><td>设置具有 true 和 false 两个属性的属性值</td><td>prop(‘checked’,’true’)</td></tr></tbody></table></li></ul><h4 id="操作元素的样式"><a href="#操作元素的样式" class="headerlink" title="操作元素的样式"></a>操作元素的样式</h4><table><thead><tr><th>方法</th><th>说明</th><th>特点</th></tr></thead><tbody><tr><td>attr(“class”)</td><td>获取 class 属性的值，即样式名称</td><td>原来的样式会被直接替换掉</td></tr><tr><td>attr(“class”,”样式名”)</td><td>修改 class 属性的值，修改样式</td><td></td></tr><tr><td>addClass(“样式名”)</td><td>添加样式名称</td><td>添加样式，会在原来的基础追加样式（如果出现相同的样式，以设置样式的顺序为准，后面的为准）</td></tr><tr><td>css()</td><td>添加具体的样式</td><td>添加具体样式，追加样式，相当于写在style属性里面的样式（行内样式优先级高，如果出现相同样式，以新设置的为准）</td></tr><tr><td>removeClass(class)</td><td>移除样式名称</td><td></td></tr></tbody></table><p>增加元素的具体样式，格式：<br>1）css({‘样式名’:’样式值’,’样式名 2’:’样式值 2’})<br>例：css({“background-color”:”red”,”color”:”#fff”})<br>2）css(“样式名”,”样式值”)<br>例：css(‘color’,’white’)</p><h4 id="操作元素的内容"><a href="#操作元素的内容" class="headerlink" title="操作元素的内容***"></a>操作元素的内容***</h4><ul><li><p>表单元素：<br>取值和赋值：val()    ——》   原生js与之对应的：value<br>文本框text、密码框password、隐藏域hidden、单选框radio、<br>多选框checkbox、下拉框select、文件域file、文本域textarea​                </p></li><li><p>非表单元素：<br>获取和设置内容（包含html标签）：html()   ——》 innerHTML<br>获取和设置文本（不包含html标签）：text()    ——》 innerText<br>div、span、p、a、h1~h6</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>html()</td><td>获取元素的 html 内容</td></tr><tr><td>html(“html 内容”)</td><td>设定元素的 html 内容</td></tr><tr><td>text()</td><td>获取元素的文本内容，不包含 html</td></tr><tr><td>text(“text 内容”)</td><td>设置元素的文本内容，不包含 html</td></tr><tr><td>val()</td><td>获取元素 value 值</td></tr><tr><td>val(‘值’)</td><td>设定元素的 value 值</td></tr></tbody></table></li></ul><h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素***"></a>创建元素***</h4><p>–&gt;$(“元素内容”)</p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素***"></a>添加元素***</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>prepend(content)</td><td>在被选元素内部的开头插入元素或内容，被追加的 content 参数，可以是字符、HTML 元素标记。</td></tr><tr><td>$(content).prependTo(selector)</td><td>把 content 元素或内容加入 selector 元素开头</td></tr><tr><td>append(content)</td><td>在被选元素内部的结尾插入元素或内容，被追加的 content 参数，可以是字符、HTML 元素标记。</td></tr><tr><td>$(content).appendTo(selector)</td><td>把 content 元素或内容插入 selector 元素内，默认是在尾部</td></tr><tr><td>before()</td><td>在元素前插入指定的元素或内容:$(selector).before(content)</td></tr><tr><td>after()</td><td>在元素后插入指定的元素或内容:$(selector).after(content)</td></tr></tbody></table><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素***"></a>删除元素***</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>remove()</td><td>删除所选元素或指定的子元素，包括整个标签和内容一起删。</td></tr><tr><td>empty()</td><td>清空所选元素的内容</td></tr></tbody></table><h4 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h4><ul><li>each()<ul><li>$(selector).each(function(index,element)) :遍历元素</li><li>参数 function 为遍历时的回调函数，</li><li>index 为遍历元素的序列号，从 0 开始。</li><li>element 是当前的元素，此时是 dom 元素。</li></ul></li></ul><h3 id="Jquery事件"><a href="#Jquery事件" class="headerlink" title="Jquery事件"></a>Jquery事件</h3><h4 id="ready加载事件"><a href="#ready加载事件" class="headerlink" title="ready加载事件***"></a>ready加载事件***</h4><p>ready()类似于 onLoad()事件</p><p>​                ready()可以写多个，按顺序执行<br>​                $(document).ready(function(){})等价于$(function(){})</p><p>ready事件与onload事件的区别：</p><p>​                    ready事件会在文档的dom结构加载完毕后执行<br>​                    onload事件会在文档的dom结构及资源加载完毕后执行</p><h4 id="元素绑定事件"><a href="#元素绑定事件" class="headerlink" title="元素绑定事件***"></a>元素绑定事件***</h4><p><strong>bind()绑定元素事件</strong></p><p>​                为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。<br>​                $(selector).bind( eventType [, eventData], handler(eventObject))<br>​<br>​                eventType ：<br>​            是一个字符串类型的事件类型，就是你所需要绑定的事件。这类类以包括如下：<br>​                    blur, focus, focusin, focusout, load, resize, scroll, unload, clickdblclick,mousedown, mouseup, mousemove, mouseover, mouseout, mouseentermouseleave,change, select, submit, keydown, keypress, keyup, error<br>​                [, eventData]：<br>​                传递的参数，格式：{名:值,名 2:值 2}<br>​                handler(eventObject)：<br>​                该事件触发执行的函数</p><h3 id="Jquery-Ajax"><a href="#Jquery-Ajax" class="headerlink" title="Jquery-Ajax***"></a>Jquery-Ajax***</h3><h4 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h4><p>jquery 调用 ajax 方法：<br>​        格式：$.ajax({});<br>​        参数：<br>​            type：请求方式 GET/POST<br>​            url：请求地址 url<br>​            async：是否异步，默认是 true 表示异步<br>​            data：发送到服务器的数据<br>​            dataType：预期服务器返回的数据类型<br>​            contentType：设置请求头<br>​            success：请求成功时调用此函数<br>​            error：请求失败时调用此函数</p><h4 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h4><p>1.请求 json 文件，忽略返回值<br>​            $.get(‘../js/cuisine_area.json’);<br>2.请求 json 文件，传递参数，忽略返回值<br>​            $.get(‘../js/cuisine_area.json’,{name:”tom”,age:100});<br>3.请求 json 文件,拿到返回值,请求成功后可拿到返回值<br>​            $.get(‘../js/cuisine_area.json’,function(data){<br>​                console.log(data)<br>​            });</p><p>4.请求 json 文件,传递参数,拿到返回值<br>​            $.get(‘../js/cuisine_area.json’,{name:”tom”,age:100},function(data){<br>​                console.log(data)<br>​            });</p><h4 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h4><h4 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON()"></a>$.getJSON()</h4><p>表示请求返回的数据类型是 JSON 格式的 ajax 请求</p><ul><li>跨域问题：<br>Access to XMLHttpRequest at ‘<a href="http://iservice.itshsxt.com/restaurant/find&#39;" target="_blank" rel="noopener">http://iservice.itshsxt.com/restaurant/find&#39;</a> from origin ‘<a href="http://localhost:8080&#39;" target="_blank" rel="noopener">http://localhost:8080&#39;</a> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/07/wRoe2vyMsuGcxEK.png&quot; a
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>正则和ajax</title>
    <link href="https://detailmk.github.io/2019/08/05/%E6%AD%A3%E5%88%99%E5%92%8Cajax/"/>
    <id>https://detailmk.github.io/2019/08/05/正则和ajax/</id>
    <published>2019-08-05T00:19:11.000Z</published>
    <updated>2019-08-07T09:29:21.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://i.loli.net/2019/08/05/LSOtWyK82TsPY7n.png" alt="正则和ajax.png"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><strong>正则表达式</strong></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>​                1、显式定义： 一眼就看明白</p><p>​                    var 变量名 = new RegExp(“正则表达式模式”);</p><p>​                2、隐式定义: 常用，简单。没那么明显，大家可能一眼没有看出</p><p>​                    注意:开头和结尾都必须是斜杠“/”,且不需要使用双引号括起来的</p><p>​                    var 变量名 = /正则表达式模式/;</p><p>​                    </p><p>​                匹配数字：  [0-9] 或  \d</p><p>​                匹配字母：  [a-z] [A-Z]  或    [a-zA-Z]</p><p>​                以指定字符开头：    ^</p><p>​                    例如：^[0-9]表示以数字开头</p><p>​                以指定字符结尾：    $</p><p>​                    例如：[a-z]$表示以小写字母结尾</p><p>​                *        匹配前面的子表达式零次或多次</p><p>​                     例如：[a-zA-Z]*表示字母可以出现零次或多次</p><p>​                +        匹配前面的子表达式一次或多次</p><p>​                ?        匹配前面的子表达式零次或一次</p><p>​                {n}        匹配n次</p><p>​                {n,}    至少匹配n次</p><p>​                {n,m}    至少匹配n次，最多匹配m次</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h3><p>​        1、test</p><p>​            1）作用:是否匹配正则表达式模式。</p><p>​                返回：true/false，true：匹配，false：不匹配</p><p>​                格式：正则对象.test(要匹配的字符);</p><p>​        2、exec()</p><p>​            返回字符串数组</p><p>​            返回匹配到的第一个字符及下标，如果没有设置全局匹配，只会匹配一次；如果没有匹配到满足条件的字符，则返回null</p><p>​        3、match</p><p>​        （1）作用：可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><p>​             匹配字符串：</p><p>​            字符串1.match(字符串2);</p><p>​                 匹配正则：</p><p>​            字符串。match(正则对象);</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a><strong>修饰符</strong></h3><p>​            i : 执行对大小写不敏感的匹配。</p><p>​           g:  执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</p><p>​            用法</p><p>​            （1）new RegExp(“regexp”,”修饰符”)</p><p>​            （2）/regexp/修饰符</p><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><h3 id="ajax–get"><a href="#ajax–get" class="headerlink" title="ajax–get"></a><strong>ajax–get</strong></h3><p><strong>Ajax实现步骤(同步)</strong></p><p>​                1、创建核心对象 XMLHttpRequest</p><p>​                    var xhr = new XMLHttpRequest();</p><p>​                2、打开请求     open()</p><p>​                    xhr.open(参数1,参数2,参数3);</p><p>​                    参数1：请求类型（GET/POST）</p><p>​                    参数2：请求的地址</p><p>​                    参数3：是否异步  true表示异步，false表示同步</p><p>​                3、发送请求  send()</p><p>​                    xhr.send(参数);</p><p>​                    参数：</p><p>​                        如果是GET请求，参数直接设置在请求的路径之后，所以设置为null</p><p>​                        如果是POST请求，有参数则设置参数，无参数则设置为null</p><p>​                4、解析响应</p><p>​                    xhr.responseText  响应的结果</p><p><strong>Ajax实现步骤(异步)</strong></p><p>​                1、创建核心对象 XMLHttpRequest</p><p>​                    var xhr = new XMLHttpRequest();</p><p>​                2、打开请求     open()</p><p>​                    xhr.open(参数1,参数2,参数3);</p><p>​                    参数1：请求类型（GET/POST）</p><p>​                    参数2：请求的地址</p><p>​                    参数3：是否异步  true表示异步，false表示同步</p><p>​                3、发送请求  send()</p><p>​                    xhr.send(参数);</p><p>​                    参数：</p><p>​                        如果是GET请求，参数直接设置在请求的路径之后，所以设置为null</p><p>​                        如果是POST请求，有参数则设置参数，无参数则设置为null</p><p>​                4、解析响应</p><p>​                    xhr.responseText  响应的结果</p><h3 id="ajax–post"><a href="#ajax–post" class="headerlink" title="ajax–post"></a><strong>ajax–post</strong></h3><p><strong>Ajax实现步骤</strong></p><p>​    1. 创建核心对象 XMLHttpRequest</p><p>​                    var xhr = new XMLHttpRequest();</p><p>​    2. 打开请求     open()</p><p>​                    xhr.open(参数1,参数2,参数3);</p><p>​                    参数1：请求类型（GET/POST）</p><p>​                    参数2：请求的地址</p><p>​                    参数3：是否异步  true表示异步，false表示同步</p><p>​                    </p><p>​    如果是POST请求，向服务器发送 POST 请求由于解析机制的原因，需要进行特别的处理。</p><p>​    因为 POST 请求和 Web 表单提交是不同的，需要使用 XHR 来模仿表单提交。</p><p>​    xhr.setRequestHeader(‘Content-Type’,’application/x-www-form-urlencoded’);</p><p>​                    </p><p>​    3. 发送请求  send()</p><p>​        xhr.send(参数);</p><p>​                    参数：</p><p>​                        如果是GET请求，参数直接设置在请求的路径之后，所以设置为null</p><p>​                        如果是POST请求，有参数则设置参数，无参数则设置为null</p><p>​    4. 监听响应状态后解析响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = function() &#123;</span><br><span class="line"><span class="comment">// 判断是否已经完全响应</span></span><br><span class="line"><span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="comment">// 判断是否响应成功</span></span><br><span class="line"><span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">// 得到响应数据</span></span><br><span class="line">alert(xhr.responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>封装Ajax</strong></p><ol><li><p>建XMLHttpRequest对象</p></li><li><p>打开请求  open()</p></li></ol><p>​    xhr.open(参数1,参数2,参数3);</p><p>​    参数1：请求类型（GET/POST）</p><p>​    参数2：请求的地址</p><p>​    参数3：是否异步  true表示异步，false表示同步</p><p>​    注：如果需要传参给后台，需要根据不同的请求类型来设置</p><p>​        如果是Post请求，请求地址不变</p><p>​        如果是Get请求，需要通过”?”将传递的参数拼接到请求地址后面</p><ol start="3"><li>如果是Post请求，需要模拟表单提交</li></ol><p>​    xhr.setRequestHeader(‘Content-Type’,’application/x-www-form-urlencoded’);</p><ol start="4"><li>发送请求  send()</li></ol><p>​    xhr.send(参数);</p><p>​    参数：</p><p>​    如果是GET请求，参数直接设置在请求的路径之后，所以设置为null</p><p>​    如果是POST请求，有参数则设置参数，无参数则设置为null</p><ol start="5"><li>接收响应</li></ol><p>如果是同步请求请求</p><p>判断是否响应成功（status=200），得到响应结果</p><p>如果数异步请求，需要通过onreadystatechange事件，监听readyState的值变化</p><p>如果数据已经完全响应（readyState=4），则判断是否响应成功（status=200），得到响应结果</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h3><p>—–ajax简单实现(异步post)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>,<span class="string">"js/test.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'context-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(<span class="string">"name=mk&amp;pwd=12345"</span>);</span><br><span class="line">xhr.onreadystatechange=function()&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">document.write(xhr.responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>—–封装ajax</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"><span class="string">"method"</span>:<span class="string">"GET"</span>,</span><br><span class="line"><span class="string">"url"</span>:<span class="string">"js/text1.json"</span>,</span><br><span class="line"><span class="string">"async"</span>:<span class="keyword">true</span>,</span><br><span class="line">date:&#123;</span><br><span class="line"><span class="string">"uname"</span>:<span class="string">"mk1"</span>,</span><br><span class="line"><span class="string">"upwd"</span>:<span class="string">"82410"</span></span><br><span class="line">&#125;,</span><br><span class="line">success:function(res)&#123;</span><br><span class="line">alert(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ajax(obj);</span><br><span class="line"><span class="function">function <span class="title">ajax</span><span class="params">(obj)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">obj.date=formatURL(obj.date);</span><br><span class="line"><span class="comment">//如果是get方式,将用户登录信息拼接到地址</span></span><br><span class="line"><span class="keyword">if</span>((obj.method).toUpperCase()==<span class="string">"GET"</span>)&#123;</span><br><span class="line">obj.url += (obj.url).indexOf(<span class="string">"?"</span>) &gt; -<span class="number">1</span> ? <span class="string">"&amp;"</span>+obj.date : <span class="string">"?"</span>+obj.date;</span><br><span class="line"><span class="comment">//obj.url += (obj.url).indexOf("?") &gt; -1 ? "&amp;"+obj.data : "?"+obj.data;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打开请求</span></span><br><span class="line">xhr.open(obj.method, obj.url, obj.async);</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line"><span class="keyword">if</span>((obj.method).toUpperCase()==<span class="string">"POST"</span>)&#123;</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(obj.date);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>((obj.method).toUpperCase()==<span class="string">"GET"</span>)&#123;</span><br><span class="line">xhr.send(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解析请求</span></span><br><span class="line"><span class="keyword">if</span>(obj.async)&#123;</span><br><span class="line">xhr.onreadystatechange=function() &#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">function <span class="title">callback</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断是否响应成功（status=200），得到响应结果</span></span><br><span class="line"><span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">//console.log(xhr.responseText);</span></span><br><span class="line">obj.success(xhr.responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化url路径</span></span><br><span class="line"><span class="function">function <span class="title">formatURL</span><span class="params">(date)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i in date)&#123;</span><br><span class="line"><span class="keyword">var</span> key = i+<span class="string">"="</span>+date[i];</span><br><span class="line">arr.push(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> udate=arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line"><span class="keyword">return</span> udate;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>–测试结果</p><p><img src="https://i.loli.net/2019/08/05/RVkrZdcCelM4bqg.gif" alt="ajax.gif"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/05/LSOtWyK82TsPY7n.png&quot; a
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>jsDOM和表单</title>
    <link href="https://detailmk.github.io/2019/08/04/jsDOM%E5%92%8C%E8%A1%A8%E5%8D%95/"/>
    <id>https://detailmk.github.io/2019/08/04/jsDOM和表单/</id>
    <published>2019-08-04T12:49:03.000Z</published>
    <updated>2019-08-07T09:25:47.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、DOM-对象"><a href="#1、DOM-对象" class="headerlink" title="1、DOM 对象***"></a>1、DOM 对象***</h2><p>节点类型        HTML内容                 例如</p><p>文档节点         文档本身                 整个文档 document</p><p>元素节点         所有的 HTML 元素         <a>、<div>、<p></p><p>属性节点         HTML 元素内的属性         id、href、name、class</p><p>文本节点         元素内的文本             hello</p><p>注释节点         HTML 中的注释             &lt;!– – &gt;</p><p>获取节点</p><p>注意：操作 dom 必须等节点初始化完毕后，才能执行。处理方式两种:</p><p>（1）把 script 调用标签移到 html 末尾即可；</p><p>（2）使用 onload 事件来处理 JS，等待 html 加载完毕再加载 onload 事件里的 JS。</p><p>​    window.onload = function () { //预加载 html 后执行};</p><p>​            </p><p>getElementById(): 根据 id 获取 dom 对象，如果 id 重复，那么以第一个为准</p><p>getElementsByTagName(): 根据标签名获取 dom 对象数组</p><p>getElementsByClassName(): 根据样式名获取 dom 对象数组</p><p>getElementsByName(): 根据 name 属性值获取 dom 对象数组，常用于多选获取值</p><p>​        </p><p>设置属性</p><p>dom对象.属性名 = “属性值”;</p><p>注：如果属性里面还有属性，dom对象.属性名.属性名 = “属性值”;</p><p>一般场景，比如style属性：dom对象.style.color=”red”   设置字体颜色</p><h3 id="1、创建节点和插入节点"><a href="#1、创建节点和插入节点" class="headerlink" title="1、创建节点和插入节点***"></a>1、创建节点和插入节点***</h3><p>创建节点</p><p>​    createElement()         创建一个新的节点，需要传入节点的标签名称，返回创建的元素对象</p><p>​    createTextNode()         创建一个文本节点，可以传入文本内容</p><p>​    innerHTML                 也能达到创建节点的效果，直接添加到指定位置了</p><p>​                </p><p>插入节点</p><p>​    write()                 将任意的字符串插入到文档中</p><p>​    appendChild()             向元素中添加新的子节点，作为最后一个子节点</p><p>​    insertBefore()             向指定的已有的节点之前插入新的节点</p><p>​    newItem：要插入的节点</p><p>​    exsitingItem：参考节点 </p><p>​                需要参考父节点</p><p>​    注：如果使用appendChild()方法追加时，被追加的元素是已经存在的元素，则会被直接剪切到指定位置</p><h3 id="2、间接查找节点"><a href="#2、间接查找节点" class="headerlink" title="2、间接查找节点"></a>2、间接查找节点</h3><p><strong>获取父节点和子节点\</strong>***</p><p><strong>间接查找节点</strong></p><p>​                </p><p>childNodes       返回元素的一个子节点的数组获取的是 文本节点和元素节点</p><p>firstChild         返回元素的第一个子节点            </p><p>lastChild         返回元素的最后一个子节点        </p><p>nextSibling     返回元素的下一个兄弟节点        </p><p>parentNode         返回元素的父节点                </p><p>previousSibling 返回元素的上一个兄弟节点        </p><h3 id="3、替换节点"><a href="#3、替换节点" class="headerlink" title="3、替换节点"></a>3、替换节点</h3><p>替换节点</p><p>replaceChild(newNode,oldNode)         用新的节点替换旧的节点</p><p>oldNode.parentNode.replaceChild(newNode,oldNode)</p><p>首先通过旧节点定位到父节点，然后用新的节点替换旧节点            </p><p>替换时，原来的元素会被删除，所以替换只能执行一次</p><h3 id="4、克隆节点"><a href="#4、克隆节点" class="headerlink" title="4、克隆节点"></a>4、克隆节点</h3><p>cloneNode()     制节点</p><p>var 复制好的节点 = 被复制的节点.cloneNode([true/false]);</p><p>true：深度克隆，可以克隆结构和内容</p><p>false(默认值)：只克隆结构</p><h3 id="5、删除节点"><a href="#5、删除节点" class="headerlink" title="5、删除节点***"></a>5、删除节点***</h3><p>removeChild()      从元素中移除子节点</p><p>从父元素中删除节点，获取要删除对象的父元素，然后从父元素中删除该对象</p><h2 id="2、JS表单"><a href="#2、JS表单" class="headerlink" title="2、JS表单***"></a>2、JS表单***</h2><h3 id="1、获取表单"><a href="#1、获取表单" class="headerlink" title="1、获取表单"></a>1、获取表单</h3><p>获取表单</p><p>​    前两中常用</p><p>​    1、document.表单名称</p><p>​    2、document.getElementById(表单 id);</p><p>​    3、document.forms[表单名称]</p><p>​    4、document.forms[索引]; //从 0 开始</p><h3 id="2、获取input元素"><a href="#2、获取input元素" class="headerlink" title="2、获取input元素"></a>2、获取input元素</h3><p>获取 input 的元素</p><p>​    如 text password hidden textarea 等，前两种常用。</p><p>​    1)、通过 id 获取：document.getElementById(元素 id);</p><p>​    2)、通过 form.名称形式获取: myform.元素名称;  name 属性值</p><p>​    3)、通过 name 获取 :document.getElementsByName(元素名称)[索引] //从 0 开始</p><p>​    4)、通过 tagName 数组 :document.getElementsByTagName(‘input’)[索引] //从 0 开始</p><h3 id="3、获取单选和复选框"><a href="#3、获取单选和复选框" class="headerlink" title="3、获取单选和复选框"></a>3、获取单选和复选框</h3><p>获取 单选按钮</p><p>​    前提：将一组单选按钮设置相同的 name 属性值</p><p>​    (1)获取单选按钮组：</p><p>​            document.getElementsByName(“name 属性值”);</p><p>​    (2)遍历每个单选按钮，并查看单选按钮元素的 checked 属性</p><p>​        若属性值为 true 表示被选中，否则未被选中</p><p>​        选中状态设定： checked=’checked’ 或 checked=’true’ 或 checked</p><p>​        未选中状态设定： 没有 checked 属性 或 checked=’false’</p><p>获取下拉选项</p><p>​    （1）获取 select 对象：</p><p>​        var ufrom = document.getElementById(“ufrom”);</p><p>​    （2）获取选中项的索引：</p><p>​        var idx=ufrom.selectedIndex ;</p><p>​    （3）获取选中项 options 的 value 属性值：</p><p>​        var val = ufrom.options[idx].value;</p><p>​        注意：当通过 options 获取选中项的 value 属性值时，</p><p>​        若没有 value 属性，则取 option 标签的内容</p><p>​        若存在 value 属性，则取 value 属性的值</p><p>​    （4）获取选中项 options 的 text：</p><p>​        var txt = ufrom.options[idx].text;</p><p>​        选中状态设定：selected=’selected’、selected=true、selected</p><p>​        未选中状态设定：不设 selected 属性</p><h3 id="4、提交表单"><a href="#4、提交表单" class="headerlink" title="4、提交表单"></a>4、提交表单</h3><p>提交表单</p><p>​    （1）使用普通 button 按钮+onclick 事件+事件中编写代码: 获取表单.submit();</p><p>​    （2）使用 submit 按钮 + onclick=”return 函数()” +函数编写代码: 最后必须返回：return true|false;</p><p>​    （3）使用 submit 按钮/图片提交按钮 + 表单 onsubmit=”return 函数();” +函数编写代码: 最后必须返回：return true|false;</p></div></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、DOM-对象&quot;&gt;&lt;a href=&quot;#1、DOM-对象&quot; class=&quot;headerlink&quot; title=&quot;1、DOM 对象***&quot;&gt;&lt;/a&gt;1、DOM 对象***&lt;/h2&gt;&lt;p&gt;节点类型        HTML内容                 例如&lt;/p
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>js事件</title>
    <link href="https://detailmk.github.io/2019/08/02/js%E4%BA%8B%E4%BB%B6/"/>
    <id>https://detailmk.github.io/2019/08/02/js事件/</id>
    <published>2019-08-02T11:28:28.000Z</published>
    <updated>2019-08-07T09:26:34.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://i.loli.net/2019/08/04/4XZ35dLN6AgSJVl.png" alt="JS2.png"></p><h2 id="1、JS事件"><a href="#1、JS事件" class="headerlink" title="1、JS事件"></a>1、JS事件</h2><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><p>（掌握常用事件类型）</p><table><thead><tr><th>事件类型</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>点击事件</td></tr><tr><td>onload</td><td>加载事件</td></tr><tr><td>onblur</td><td>失焦事件</td></tr><tr><td>onfocus</td><td>聚焦事件</td></tr><tr><td>onchange</td><td>改变域事件</td></tr><tr><td>onmouseover</td><td>鼠标悬停事件</td></tr><tr><td>onmouseout</td><td>鼠标移开事件</td></tr><tr><td>onmousemove</td><td>鼠标移动事件</td></tr><tr><td>onkeyup</td><td>键盘松开事件</td></tr></tbody></table><h4 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h4><p>（掌握如何给元素绑定事件）</p><p>   事件源                  html中的元素/标签</p><p>   监听者                  window窗口</p><p>   事件名                  onclick、onblur等…</p><p>   事件处理程序       处理的函数</p><ul><li><p>DOM0 级事件处理程序</p><p>先必须取得一个要操作的对象的引用，每个元素都有自己的事件处理程序属性.以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。而且，只能为同一个元素的同一个事件设定一个处理程序（覆盖）,也可以通过删除 DOM0 级方法指定的事件处理程序，只要将属性值设为 null.</p></li><li><p>DOM2级事件</p><ul><li><p>两个方法：</p><p>addEventListener()  添加监听事件程序</p><p>removeEventListener()  移除监听事件程序</p></li><li><p>三个参数：</p></li></ul><p>​                事件名<br>​                处理函数</p><ul><li><p>true或false  </p><p>​    true：事件捕获阶段调用事件处理程序<br>​    false：事件冒泡阶段调用事件处理程序</p><p>注意：<br>1、可以同时为一个元素绑定同一事件多次<br>2、还可删除事件处理函数，在删除的时候，不能删除匿名处理函数。</p></li></ul></li></ul><h2 id="2、BOM对象"><a href="#2、BOM对象" class="headerlink" title="2、BOM对象"></a>2、BOM对象</h2><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><p>（setTimeout函数、setInterval函数）</p><ul><li>setTimeout<ul><li>var id = setTimeout(function,times)</li></ul></li></ul><p>​                        在指定的毫秒数后调用函数或计算表达式。返回唯一标识符<br>​                        参数一：要执行的函数<br>​                        参数二：延时几秒执行，单位毫秒</p><ul><li><p>clearTimeout(id)<br>  ​                        通过标识符来清除指定函数的执行</p></li><li><p>setInterval()</p><p>​        可按照指定的周期（以毫秒计）来调用函数或计算表达式，也可根据返回的标识用来结束。该方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。</p></li></ul><h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><p>（href属性、reload()）</p><p>location 对象是 window 对象之一，提供了与当前窗口中加载的文档有关的信息，还提供 了一些导航功能。也可通过 window.location 属性来访问。</p><p>location 对象的属性 href：设置或返回完整的 URL location 对象的方法<br>reload()：重新加载当前文档。<br>replace()：用新的文档替换当前文档。 </p><h2 id="3、DOM对象"><a href="#3、DOM对象" class="headerlink" title="3、DOM对象"></a>3、DOM对象</h2><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><table><thead><tr><th>节点类型</th><th>HTML内容</th><th>举例</th></tr></thead><tbody><tr><td>文档节点</td><td>文档本身</td><td>整个文档 document</td></tr><tr><td>元素节点</td><td>所有的 HTML 元素</td><td><a>、<div>、<p></p></div></a></td></tr><tr><td>属性节点</td><td>HTML 元素内的属性</td><td>id、href、name、class</td></tr><tr><td>文本节点</td><td>元素内的文本</td><td>hello</td></tr><tr><td>注释节点</td><td>HTML 中的注释</td><td>&lt;!– – &gt;</td></tr></tbody></table><h4 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h4><ul><li><p>注意：操作 dom 必须等节点初始化完毕后，才能执行。处理方式两种:</p><ul><li>把 script 调用标签移到 html 末尾即可；</li><li>使用 onload 事件来处理 JS，等待 html 加载完毕再加载 onload 事件里的 JS。</li></ul><p>​        window.onload = function () { //预加载 html 后执行};</p></li></ul><p>①  通过id属性值获取节点<br>②  通过name属性值获取节点<br>③  通过class属性值获取节点<br>④  通过元素名/标签名获取节点<br>⑤  操作dom对象的属性</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getElementById()</td><td>根据 id 获取 dom 对象，如果 id 重复，那么以第一个为准</td></tr><tr><td>getElementsByTagName()</td><td>根据标签名获取 dom 对象数组</td></tr><tr><td>getElementsByClassName()</td><td>根据样式名获取 dom 对象数组</td></tr><tr><td>getElementsByName()</td><td>根据 name 属性值获取 dom 对象数组，常用于多选获取值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/04/4XZ35dLN6AgSJVl.png&quot; a
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>初识js</title>
    <link href="https://detailmk.github.io/2019/07/31/%E5%88%9D%E8%AF%86js/"/>
    <id>https://detailmk.github.io/2019/07/31/初识js/</id>
    <published>2019-07-31T13:21:55.000Z</published>
    <updated>2019-08-07T09:27:21.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://i.loli.net/2019/08/04/Qrc3VZosbh5dxnw.png" alt="初识js.png"></p><h2 id="js使用方式"><a href="#js使用方式" class="headerlink" title="js使用方式"></a>js使用方式</h2><ol><li>行内</li><li>内部(推荐<strong></strong>后面)</li><li>外部(外部引用时标签内的js代码无效)</li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>声明</strong></p><ul><li><p>JavaScript 是一种弱类型语言，在声明变量时不需要指明数据类型，直接用 var 修饰符进行声明。<br>方式: 1. 先声明后赋值 2. 声明并赋值</p></li><li><p>注意点</p></li></ul><p>​        1. 若只声明而没有赋值，则该变量的值为 undefined。<br>​        2. 变量要有定义才能使用，若变量未声明就使用，JavaScript 会报错，告诉你变量未定义<br>​        3. 可以在同一条 var 命令中声明多个变量。<br>​        4. 若使用 var 重新声明一个已经存在的变量，是无效的。<br>​        5. 若使用 var 重新声明一个已经存在的变量且赋值，则会覆盖掉前面的值<br>​        6. JavaScript 是一种动态类型、弱类型语言，也就是说，变量的类型没有限制，可以赋予各种类型的值。<br>​        7. 声明变量时，可以不加var修饰符，此时变量为全局变量</p><ul><li>提升 定义:JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行,这造成的结果，就是所有的变量的声明语句,都会被提升到代码的头部.</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Undefined , Null , boolean , onumber , string , object</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>选择结构</li><li>循环结构</li><li>break和continue(和Java一样)</li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>parseInt()和 parseFloat()两个全局转换函数。<br>  ​            前者把值转换成整数，后者把值转换成浮点数。<br>  ​            只有对 String 类型调用这些方法，这两个函数才能正确运行；<br>  ​            对其他类型返回的都是 NaN(Not a Number)。    </li><li>toString()函数将内容转换为字符串形式<br>  String()是最简单的，因为它可把任何值转换成字符串。<br>  String()和toString()的区别，在于前者可以操作null和undefinded</li><li>Number()将数据转成数值型数据</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>创建<br>​    var arr=[值 1,值 2,值 3]; ***<br>​    var arr=new Array(值 1,值 2,值 3);<br>​    var array=new Array(size); </p></li><li><p>遍历<br>​    1. for(var i=0; i &lt; 数组.length; i++) {}***<br>​    2. for(var 下标名  in 数组) {}<br>​    3. 数组.forEach(function(元素，下标){});</p></li><li><p>操作方法(push最重要)</p><p>​                push 添加元素到最后<br>​                unshift 添加元素到最前<br>​                pop 删除最后一项<br>​                shift 删除第一项<br>​                reverse 数组翻转<br>​                join 数组转成字符串<br>​                indexOf 数组元素索引<br>​                slice 截取（切片）数组，原数组不发生变化<br>​                splice 剪接数组，原数组变化，可以实现前后删除效果<br>​                concat 数组合并</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li><p>函数的定义</p><p>是一段预先设置的功能代码块,函数也是<strong>对象</strong>。</p><p> 定义三种方式: 函数声明语句、函数定义表达式、Function 构造函数 </p><ul><li><p>function 函数名([参数列表]){} </p></li><li><p>var 变量名 = function ([参数列表]) {} </p></li><li><p>例如 var minus = new Function(‘a’,’b’,’return(a-b)’);</p></li></ul></li><li><p>函数的调用及参数</p><ul><li><p>调用方式</p><p>1、函数调用模式<strong>*<br>2、方法调用模式*</strong><br>3、间接调用模式<br>   ​            return 语句<br>   ​            作用：在没有返回值的方法中，用来结束方法。<br>   ​            有返回值的方法中，一个是用来结束方法，一个是将值带给调用者。</p></li></ul></li><li><p>函数的作用域<br>1、全局变量与局部变量同名问题（就近原则）<br>2、如果没使用var修饰符声明的变量是全局变量<br>3、函数中变量名的提升</p></li></ol><ul><li><p>闭包</p><ul><li>作用: 能够读取其他函数内部变量的函数。</li><li>构成<br>1、外部函数嵌套内部函数<br>2、内部函数使用外部函数的环境<br>3、外部函数返回内部函数</li></ul></li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>JS 创建自定义对象，主要通过三种方式：<ul><li>字面量形式创建对象、</li></ul></li></ul><p>​                    通过 new Object 对象创建 、<br>​                    通过 Object 对象的 create 方法创建对象</p><p>​                字面量形式创建</p><p>​                    var 对象名 = {};//创建一个空的对象<br>​                    var 对象名 = {键:值,键 2:值 2,…}</p><p>​             通过 new Object 对象创建<br>​                    var 对象名 = new Object();</p><p>​             通过 Object 对象的 create 方法创建对象</p><p>​                    var 对象名 = Object.create(null); // 创建空模板的对象<br>​                    var 对象名 = Object.create(对象); // 以指定对象为模板创建对象</p><p>​            序列化和反序列化</p><p>​                序列化对象，将对象转为字符串<br>​                反序列化，将一个 Json 字符串转换为对象。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>谁调用函数，this就指向谁</p><p>在函数中使用 this<br>在函数中使用 this 属于全局性调用，代表全局对象，通过 window 对象来访问。</p><p>在对象的方法中使用 this<br>在对象中的函数使用 this，代表当前的上级对象</p><h2 id="案例—计算器"><a href="#案例—计算器" class="headerlink" title="案例—计算器"></a>案例—计算器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>tool<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">       #a&#123;</span><br><span class="line">         border: solid 2px;</span><br><span class="line">         width: 300px;</span><br><span class="line">         height: 350px;</span><br><span class="line">         border-color: darkorchid;</span><br><span class="line">         text-align: center;</span><br><span class="line">           margin: auto;</span><br><span class="line">           margin-top: 30px;</span><br><span class="line">           margin-bottom: 30px;</span><br><span class="line">         border-radius: 10px;</span><br><span class="line">       &#125;</span><br><span class="line">       input[type=text]&#123;</span><br><span class="line">           width: 280px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           margin-top: 10px;</span><br><span class="line">           background-color: floralwhite;</span><br><span class="line">           font-size:25px;</span><br><span class="line">       &#125;</span><br><span class="line">       input[type=button]&#123;</span><br><span class="line">           width: 40px;</span><br><span class="line">           height: 40px;</span><br><span class="line">           margin-top: 10px;</span><br><span class="line">           margin-left: 10px;</span><br><span class="line">           margin-right: 10px;</span><br><span class="line">           font-size: 20px;</span><br><span class="line">           font-weight: 800;</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        function demo(btn)&#123;</span><br><span class="line">            //获取按钮的value值</span><br><span class="line">            var num = btn.value;</span><br><span class="line">          /*  var num = document.getElementById("btn").value;</span><br><span class="line">            alert(num);*/</span><br><span class="line">            switch (num)&#123;</span><br><span class="line">                case "=":</span><br><span class="line">                    document.getElementById("inp").value=eval(document.getElementById("inp").value);</span><br><span class="line">                    break;</span><br><span class="line">                case "c":</span><br><span class="line">                    document.getElementById("inp").value="";</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    document.getElementById("inp").value=document.getElementById("inp").value+num;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            //将获得的值传到输入框中</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"inp"</span> <span class="attr">value</span>=<span class="string">""</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"6"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"7"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"8"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"9"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"+"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"-"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"*"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"/"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"c"</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"="</span> <span class="attr">onclick</span>=<span class="string">"demo(this)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果</p><p><img src="https://i.loli.net/2019/08/04/tmnTgIxyN9MfBlJ.gif" alt="counttool.gif"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/04/Qrc3VZosbh5dxnw.png&quot; a
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="https://detailmk.github.io/2019/07/31/%E6%B3%A8%E8%A7%A3/"/>
    <id>https://detailmk.github.io/2019/07/31/注解/</id>
    <published>2019-07-31T00:21:11.000Z</published>
    <updated>2019-08-07T10:28:00.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://i.loli.net/2019/08/04/jBb9r2N1u7woRXp.png" alt="注解.png"></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>定义: 描述源代码的元数据(描述数据的数据)</p></li><li><p>作用: 通过注解来区分类(标识类的信息)</p></li><li><p>分类:</p><ul><li>系统自带注解***<ol><li>@Override: 子类重写了父类的方法</li><li>@Deprecated: 方法已经过时</li><li>@SuppresWarnings: 关闭一些警告信息(通知java编译器忽略一些特定的警告信息)</li></ol></li></ul><p>测试系统自带的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mk m1=<span class="keyword">new</span> Mk();</span><br><span class="line">m1.ball();</span><br><span class="line">System.out.println(m1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mk</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ball</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ball"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Mk[nice,good,detail]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义类型注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> mknb &#123;</span><br><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">num</span><span class="params">()</span><span class="keyword">default</span> 24</span>;</span><br><span class="line"><span class="comment">//引用数据类型</span></span><br><span class="line"><span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//枚举类型</span></span><br><span class="line"><span class="function">Team <span class="title">t</span><span class="params">()</span><span class="keyword">default</span> Team.Lakers</span>;</span><br><span class="line"><span class="comment">//数组类型</span></span><br><span class="line"><span class="keyword">double</span>[] arr()<span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@mknb</span>(type = <span class="string">"class"</span>,arr=&#123;<span class="number">1.2</span>,<span class="number">2.3</span>&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mk24</span></span>&#123;</span><br><span class="line"><span class="meta">@mknb</span>(type = <span class="string">"field"</span>)</span><br><span class="line"><span class="keyword">private</span> String hobby;</span><br><span class="line"><span class="meta">@mknb</span>(type=<span class="string">"method"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ball</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> Team&#123;</span><br><span class="line">Lakers,Rocket,Thunder</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射获取注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">Class c1 = Class.forName(<span class="string">"com.mk.anno.Fill"</span>);</span><br><span class="line"><span class="comment">//getAnnotations()获取注解</span></span><br><span class="line">Annotation[] an = c1.getAnnotations();</span><br><span class="line"><span class="keyword">for</span>(Annotation at:an)&#123;</span><br><span class="line">System.out.println(at);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//试试指定的注解可不可以获取到</span></span><br><span class="line">Lakers la=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(c1.isAnnotationPresent(Lakers.class))&#123;</span><br><span class="line">la=(Lakers) c1.getAnnotation(Lakers.class);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"获取注解:"</span>+la);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@interface</span> Lakers&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@Lakers</span></span><br><span class="line"><span class="meta">@Lakers</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fill</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">champ</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"win----"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:</p><ol><li>获取注解方式通过反射调用getAnnotations()</li><li>一个类不能有两个相同的注解</li><li>获取的注解只能是系统自带注解,自定义注解获取不到</li></ol></li><li><p>以上产生疑问(需要解决核心):</p><ul><li>为什么有的注解可以加在不同元素上面</li><li>怎样使一个类可以添加两个相同的注解</li><li>为什么一个类中有的注解可以获取,有的无法获取</li></ul></li><li><p>解决这三个问题引入元注解的概念</p><p>​        元注解:修饰注解的注解</p><ol><li><p>为什么一个类中有的注解可以获取,有的无法获取</p><p>deal:元注解@Retention来修饰自定义注解获取,主要靠(元注解的保留策略)RetentionPolicy-&gt;SOURCE去获取</p><blockquote><p>@Retention:<br>描述的注解在什么范围内有效。</p><blockquote><p>RetentionPolicy.SOURCE——-只在源码显示，编译时会丢失<br>RetentionPolicy.CLASS——–编译时会记录到class中，运行时忽略<br>RetentionPolicy.RUNTIME——运行时存在，可以通过反射读取    </p></blockquote></blockquote><p>测试获取自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">Class c2 = Class.forName(<span class="string">"com.mk.anno.My"</span>);</span><br><span class="line">Annotation[] at = c2.getAnnotations();</span><br><span class="line">System.out.println(<span class="string">"获取的注解:"</span>);</span><br><span class="line"><span class="keyword">for</span>(Annotation a:at)&#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> Team1&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Team</span>1</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="meta">@Team</span>1</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">My</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><pre><code>测试结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取的注解:</span><br><span class="line">@com.mk.anno.Team1()</span><br><span class="line">@java.lang.Deprecated()</span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li><p>为什么有的注解可以加在不同元素上面</p><p>deal: 和注解的元注解@Target的约束有关,元注解的属性决定注解添加位置</p><blockquote><p>@Target:<br>注解的作用域，用于说明注解的使用范围(如方法，接口，对象…)</p><blockquote><p>ElemenetType.CONSTRUCTOR——–构造器声明<br>ElemenetType.FIELD ——————域声明（包括 enum 实例）<br>ElemenetType.LOCAL_VARIABLE—– 局部变量声明<br>ElemenetType.METHOD ————–方法声明<br>ElemenetType.PACKAGE ————- 包声明 </p></blockquote></blockquote><p>测试约束注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.CONSTRUCTOR)<span class="comment">//该元注解约束注解只能作用于构造器</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> Team1&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Team</span>1<span class="comment">//报错</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="meta">@Team</span>1</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">My</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>怎样使一个类可以添加两个相同的注解</p><p>deal: 通过元注解@Repeatable实现注解在同一个类的反复使用</p><blockquote><p>@Repeatable<br>用于声明标记的注解为可重复类型注解，可以在同一个地方多次使用</p></blockquote><p>测试@Repeatable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> Teams&#123;<span class="comment">//*****</span></span><br><span class="line">Team1[] value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repeatable</span>(Teams.class)    <span class="comment">//*****</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD,ElementType.CONSTRUCTOR&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@interface</span> Team1&#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span><span class="keyword">default</span>""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Team</span>1(<span class="string">"lakers"</span>)</span><br><span class="line"><span class="meta">@Team</span>1(<span class="string">"Rocket"</span>)</span><br><span class="line"><span class="meta">@Team</span>1(<span class="string">"Thunter"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span></span>&#123;</span><br><span class="line"><span class="meta">@Team</span>1</span><br><span class="line">String name;</span><br><span class="line"><span class="meta">@Team</span>1</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">My</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Team</span>1</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ball</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>了解其他3个元注解:&gt; @Inherited &gt; &gt; 是一个标记注解，没有成员，表示允许子类继承该注解，也就是说如果一个使用了@Inherited修饰的注解被用于一个class时，则这个注解将被该class的子类继承拥有 &gt; &gt; 使用了@Inherited修饰的注解只能被子类所继承，并不可以从它所实现的接口继承 &gt; &gt; 子类继承父类的注解时，并不能从它所重载的方法继承注解&gt; @Documented&gt;&gt; &gt; 是一个标记注解，没有成员。用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。&gt; @Navite&gt;&gt; &gt; 声明属性是可以被native代码所引用的</code></pre><ul><li><p>注解案例–模拟hibernate(将javabean在系统启动时转成数据库的表)</p><ul><li>流程</li></ul><ol><li>创建javabean</li><li>创建注解(表,字段,主键)</li><li>给javabean添加注解</li><li>通过反射获取类的对象</li><li>通过对象获取属性并且遍历</li><li>用获取到的属性去获取数据库对应的字段的注解.遍历后用字符串拼接sql语句</li><li>(可以加jdbc去处理拼接好的sql语句)</li></ol><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mk.pro.hibernate.Column;</span><br><span class="line"><span class="keyword">import</span> com.mk.pro.hibernate.ColumnType;</span><br><span class="line"><span class="keyword">import</span> com.mk.pro.hibernate.Primarykey;</span><br><span class="line"><span class="keyword">import</span> com.mk.pro.hibernate.Table;</span><br><span class="line"><span class="meta">@Table</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Primarykey</span>(<span class="string">"id"</span>)</span><br><span class="line"><span class="meta">@Column</span>(value=<span class="string">"id"</span>,type=ColumnType.VARCHAR2,length=<span class="number">40</span>)</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="meta">@Column</span>(value=<span class="string">"name"</span>,type=ColumnType.VARCHAR2,length=<span class="number">20</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line"><span class="meta">@Column</span>(value=<span class="string">"power"</span>,type=ColumnType.NUMBER,length=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> power;</span><br><span class="line"><span class="meta">@Column</span>(value=<span class="string">"createtime"</span>,type=ColumnType.DATE)</span><br><span class="line"><span class="keyword">private</span> Date createtime;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> power;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPower</span><span class="params">(<span class="keyword">int</span> power)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.power = power;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getCreatetime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createtime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatetime</span><span class="params">(Date createtime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.createtime = createtime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">result = prime * result + ((createtime == <span class="keyword">null</span>) ? <span class="number">0</span> : createtime.hashCode());</span><br><span class="line">result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</span><br><span class="line">result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">result = prime * result + power;</span><br><span class="line">result = prime * result + ((pwd == <span class="keyword">null</span>) ? <span class="number">0</span> : pwd.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">User other = (User) obj;</span><br><span class="line"><span class="keyword">if</span> (createtime == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.createtime != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!createtime.equals(other.createtime))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (power != other.power)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (pwd == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.pwd != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pwd.equals(other.pwd))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", pwd="</span> + pwd + <span class="string">", power="</span> + power + <span class="string">", createtime="</span> + createtime</span><br><span class="line">+ <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Table,Column,Primarykey注解+枚举定义字段类型</p><p>测试类–工具: 包名扫描工具,传入javabean输出sql语句,jdbc工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//模拟hibernate转成数据库中表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">List&lt;Class&lt;?&gt;&gt; clss=PackageScannerUtil.getClassList(<span class="string">"com.mk.pro.pojo"</span>,<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;clss.size();i++)&#123;</span><br><span class="line">classtoTable(clss.get(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装方法--&gt;javabean转换成数据库的表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">classtoTable</span><span class="params">(Class cl)</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line"><span class="comment">//创建字符串存储sql语句</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">StringBuffer sb3 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(<span class="string">"create table "</span>);</span><br><span class="line"><span class="comment">//反射获取类的对象</span></span><br><span class="line"><span class="comment">//Class cl = Class.forName(c);</span></span><br><span class="line"><span class="comment">//判断类上是否有注解</span></span><br><span class="line"><span class="keyword">if</span>(cl.isAnnotationPresent(Table.class))&#123;</span><br><span class="line"><span class="comment">//获取表的注解</span></span><br><span class="line">Table ta = (Table) cl.getAnnotation(Table.class);</span><br><span class="line"><span class="comment">//获取表的名字</span></span><br><span class="line">String tname = ta.value();</span><br><span class="line">sb.append(tname+<span class="string">"("</span>);</span><br><span class="line"><span class="comment">//遍历对象的属性</span></span><br><span class="line">Field[] fie = cl.getDeclaredFields(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fie.length;i++)&#123;</span><br><span class="line">Field f1=fie[i];</span><br><span class="line">Annotation[] at = f1.getAnnotations();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;at.length;j++)&#123;</span><br><span class="line">Annotation a = at[j];</span><br><span class="line"><span class="comment">//判断是否是Column的注解</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Column&amp;&amp;j&lt;at.length)&#123;</span><br><span class="line">sb2.append(((Column)a).value()).append(<span class="string">" "</span>).append(((Column)a).type());</span><br><span class="line"><span class="keyword">if</span>(((Column)a).length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sb2.append(<span class="string">"("</span>).append(((Column)a).length()).append(<span class="string">"),"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是pk的注解</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Primarykey)&#123;</span><br><span class="line">sb3.append(<span class="string">"alter table"</span>+<span class="string">" "</span>+tname+<span class="string">" add constraint PK_"</span>+tname+<span class="string">" primary key("</span>+f1.getName()+<span class="string">");"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sb = sb.append(sb2+<span class="string">");"</span>).append(sb3);</span><br><span class="line">System.out.println(sb);</span><br><span class="line"><span class="comment">//可以通过jdbc连接来执行sql语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/04/jBb9r2N1u7woRXp.png&quot; a
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://detailmk.github.io/2019/07/26/HTML/"/>
    <id>https://detailmk.github.io/2019/07/26/HTML/</id>
    <published>2019-07-26T13:51:48.000Z</published>
    <updated>2019-08-07T09:25:44.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-html-超文本标记语言"><a href="#1-html-超文本标记语言" class="headerlink" title="1.html 超文本标记语言"></a>1.html 超文本标记语言</h2><p>​            2.<!DOCTYPE html> html文档版本声明</p><p>​            3.<meta charset="UTF-8"> 设置解析页面的编码格式</p><p>​                编码:右下角文件的格式</p><p>​                解码:默认gbk  <meta charset="UTF-8"></p><p>​                保证统一才不乱码</p><p>​            4.属性:帮助更完善的展示标签内容</p><p>​                添加在开始标签上</p><p>​                属性的前面存在空格</p><p>​                属性名= ‘属性值’</p><p>​                前后的引号要保持一致,’’,””都可以</p><p>​            5.标签:</p><p>​                单标签|自闭和标签</p><p>​                双标签|闭合标签</p><h2 id="标签作用-属性-特点"><a href="#标签作用-属性-特点" class="headerlink" title="标签作用,属性,特点"></a>标签作用,属性,特点</h2><p>​        分类:  能否和其他标签在一行显示</p><p>​            块元素:自身独占一行</p><p>​                可以设置宽高</p><p>​            行内元素:宽度由内容撑起</p><p>​                不能设置宽度</p><p>​        \1. a 超链接标签</p><p>​            属性:</p><p>​                href:连接地址 必填属性</p><p>​                    绝对地址:网络上的网址</p><p>​                    相对地址:相同项目中的页面</p><p>​                    # 回到页面的顶部但是不刷新</p><p>​                    不填地址:每次点击每次刷新</p><p>​                target:打开方式</p><p>​                    _self:自身页面打开</p><p>​                    _blank:新页面打开</p><p>​                title:当鼠标悬停在内容上显示的提示字</p><p>​        2.锚点</p><p>​            特点:</p><p>​                下划线</p><p>​                访问前字体为蓝色</p><p>​                访问后字体颜色为紫色</p><p>​                行内元素</p><h2 id="块元素-嵌套行内元素-文本-块元素"><a href="#块元素-嵌套行内元素-文本-块元素" class="headerlink" title="块元素:嵌套行内元素,文本,块元素"></a>块元素:嵌套行内元素,文本,块元素</h2><p>​        行内元素:嵌套行内元素,文本</p><p>​        img 图像标签</p><p>​            src 图片地址  必填属性</p><p>​                绝对地址</p><p>​                相对地址</p><p>​            alt 如果图片无法正常显示时显示的提示字</p><p>​            title 当鼠标悬停在内容上时显示的提示字</p><p>​            width 宽度</p><p>​            height 高度</p><p>​            border 变框</p><p>​            align 对其方式</p><p>​                left 图片对其到左边</p><p>​                right 图片对其到这一行的右边</p><p>​                top  同行元素顶部对其</p><p>​                bottom同行元素低部对其</p><p>​                center同行元素居中对其</p><p>​         span 方便控制样式</p><p>​         div  块</p><p>​              布局容器使用</p><p>​              块元素</p><p>​         p    段落标签</p><p>​                只能嵌套行内元素和文本,不能嵌套其他块元素</p><p>​         h1~6 标题标签</p><p>​            根据权重不同,字体大小依次减小</p><p>​            加粗</p><p>​            align : 对齐方式</p><p>​                left</p><p>​                right</p><p>​                center</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表:"></a>列表:</h2><p>​            列表标签的第一层子元素只能为列表项li标签</p><p>​            type 属性修改列表项标记</p><p>​            列表可以嵌套</p><p>​            无序列表</p><p>​                ul  列表标签</p><p>​                li 定义列表项</p><p>​                type属性</p><p>​                    circle 空心圆圈</p><p>​                    square 实心方块</p><p>​                style=”list-style: none” 去除列表项标记</p><p>​            有序列表</p><p>​                ol  列表标签</p><p>​                li 定义列表项</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p> 尺寸:px单位</p><p>​        颜色:</p><p>​            颜色的英文单词</p><p>​            rgb(,,)</p><p>​            #十六进制</p><p>​        表格标签</p><p>​            常用于展示数据..</p><p>​        table 标签</p><p>​        tr    行</p><p>​        th    表格头单元格  居中+加粗</p><p>​        td    表格体单元格</p><p>​        属性:</p><p>​            border 边框</p><p>​            bordercolor 边框颜色</p><p>​            bgcolor 背景颜色</p><p>​            width 宽度</p><p>​            height 高度</p><p>​            双线边单线</p><p>​            rowspan 跨行</p><p>​            colspan 跨列</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单 ***"></a>表单 ***</h2><p>​            收集用户信息</p><p>​        form 表单标签</p><p>​            action 表单数据发送的位置</p><p>​            name   表单的名字</p><p>​            method 请求方式</p><p>​                post  安全 没有限制  请求实体中</p><p>​                get   不安全 地址栏中  大小有限制</p><p>​            enctype: multipart/form-data 文件上传</p><p>​        表单元素:</p><p>​            input   type属性的值,决定表单元素的作用</p><p>​                text 文本框</p><p>​                password  密码框  加密</p><p>​                radio 单选框</p><p>​                    一组的单选框只能选择一个,name属性相同</p><p>​                checkbox 多选框</p><p>​                file 上传文件</p><p>​                submit 提交</p><p>​                button 按钮</p><p>​                reset 重置</p><p>​            select 下拉框</p><p>​                options 下拉列表选项</p><p>​            button 标签</p><p>​                type属性值 更改作用</p><p>​                    submit 提交  默认</p><p>​                    button 按钮</p><p>​                    reset 重置</p><p>​        有提交数据能力的表单元素必须添加name</p><p>​        name: 后台区分前台表单元素的位置</p><p>​        value: 当前这个表单元素的默认值</p><p>​        id :  前台区分元素的唯一  js</p><p>​        class: css的</p><p>​        multiple 多选</p><p>​        placeholder 提示字</p><p>​        readonly 只读   不能改能提交</p><p>​        disabled 禁用   不能修改不能提交</p><p>​        required 必填选项</p><p>​        autofocus 自动聚焦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-html-超文本标记语言&quot;&gt;&lt;a href=&quot;#1-html-超文本标记语言&quot; class=&quot;headerlink&quot; title=&quot;1.html 超文本标记语言&quot;&gt;&lt;/a&gt;1.html 超文本标记语言&lt;/h2&gt;&lt;p&gt;​            2.&lt;!DOCTY
      
    
    </summary>
    
      <category term="前端" scheme="https://detailmk.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaweb" scheme="https://detailmk.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>oracleBase+JDBC</title>
    <link href="https://detailmk.github.io/2019/07/25/oracleBase/"/>
    <id>https://detailmk.github.io/2019/07/25/oracleBase/</id>
    <published>2019-07-25T02:44:26.000Z</published>
    <updated>2019-08-07T09:27:08.254Z</updated>
    
    <content type="html"><![CDATA[<p>序列(创建,作用)</p><p>作用:方便给主键字段赋值的带有指定规律和步长的工具</p><p>语法:create sequence 序列名  start with 开始数值  increment by 增长数</p><p>​         序列名.currval:当前值</p><p>​         序列名.nextval:下一个值</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>定义:一个单位的逻辑单元进行的组操作,要么全部提交执行,要么全部回退</li><li>作用:保证数据的安全,有效</li><li>特性(ACID4种)<ol><li>原子性: 更新数据信息,要么全部更新,要么全部回滚</li><li>一致性: 当数据修改完成时,相应的表中的数据也完成更新</li><li>隔离性: 一个事务只能在另一个事务处理完数据后才能开启访问</li><li>持久性:事务对数据修改是持久有效的,即使系统出现问题,也不会丢失</li></ol></li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>插入—insert into 表(字段) select 字段 from 表 where 过滤</p><p>​            insert into 表(字段) values(值);</p><p>​            insert into 表名  select 字段 from 表 where 过滤</p><p>​            insert into 表名  values(值 )</p><p>修改—update 表名 set 字段名=值   where 条件</p><p>删除—delete 表名 where 条件</p><p>表的删除和截取(区别)</p><ol><li>delete可以删除表的全部数据,也可以删除部分数据. truncate只能能截断所有数据</li><li>delete操作设计事务,truncate不涉及事务</li><li>关于外键关联的主表的删除,如果使用delete删可以用级联删除,如果用truncate无法删除存在外键关联的主表</li></ol><h2 id="连接数据库jdbc"><a href="#连接数据库jdbc" class="headerlink" title="连接数据库jdbc"></a>连接数据库jdbc</h2><p>步骤:</p><ol><li>选择数据库</li><li>连接数据库</li><li>创建sql语句</li><li>创建处理块(静态处理块,预处理块(防止sql注入))</li><li>发送sql</li><li>获取sql结果</li></ol><p>[] 举个栗子–JDBC查询部门号和部门名打印控制台</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class JdbcD &#123;</span><br><span class="line">   public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line"> //选择数据库</span><br><span class="line"> Class.forName("oracle.jdbc.driver.OracleDriver");</span><br><span class="line"> //连接数据库</span><br><span class="line"> Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","SCOTT","TIGER");</span><br><span class="line"> //编写sql语句</span><br><span class="line"> String str="<span class="keyword">select</span> deptno,dname <span class="keyword">from</span> dept<span class="string">";</span></span><br><span class="line"><span class="string"> //创建处理块</span></span><br><span class="line"><span class="string"> Statement stat=conn.createStatement();</span></span><br><span class="line"><span class="string"> //发送结果</span></span><br><span class="line"><span class="string"> ResultSet rs = stat.executeQuery(str);</span></span><br><span class="line"><span class="string"> //获取sql结果</span></span><br><span class="line"><span class="string"> while(rs.next())&#123;</span></span><br><span class="line"><span class="string"> int i = rs.getInt("</span>deptno<span class="string">");</span></span><br><span class="line"><span class="string"> String name=rs.getString("</span>dname<span class="string">");</span></span><br><span class="line"><span class="string"> System.out.println("</span><span class="keyword">no</span>:<span class="string">"+"</span><span class="comment">--&gt;"+i+"  name:"+"--&gt;"+name);</span></span><br><span class="line"> &#125;</span><br><span class="line"> rs.close();</span><br><span class="line"> stat.close();</span><br><span class="line"> conn.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">no:--&gt;10  name:--&gt;ACCOUNTING</span><br><span class="line">no:--&gt;20  name:--&gt;RESEARCH</span><br><span class="line">no:--&gt;30  name:--&gt;SALES</span><br><span class="line">no:--&gt;40  name:--&gt;OPERATIONS</span><br></pre></td></tr></table></figure><p>*进一步优化代码,通过反射创建类,使得代码更加灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建Properties类</span></span><br><span class="line">Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//加载资源流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">p.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">"db.properties"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(p.getProperty(<span class="string">"driver"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="comment">//创建sql语句</span></span><br><span class="line"><span class="comment">//创建静态处理块</span></span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line"><span class="comment">//获取sql执行结果</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement st = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">conn=DriverManager.getConnection(p.getProperty(<span class="string">"url"</span>)</span><br><span class="line">,p.getProperty(<span class="string">"name"</span>)</span><br><span class="line">,p.getProperty(<span class="string">"pwd"</span>));</span><br><span class="line"><span class="comment">//创建sql语句</span></span><br><span class="line">String str=<span class="string">"select empno,ename from emp"</span>;</span><br><span class="line"><span class="comment">//创建静态处理块</span></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line">rs=st.executeQuery(str);</span><br><span class="line"><span class="comment">//获取sql执行结果</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">System.out.println(id+<span class="string">"--&gt;"</span>+name);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7369--&gt;SMITH</span><br><span class="line">7499--&gt;ALLEN</span><br><span class="line">7521--&gt;WARD</span><br><span class="line">7566--&gt;JONES</span><br><span class="line">7654--&gt;MARTIN</span><br></pre></td></tr></table></figure><h2 id="JDBC封装"><a href="#JDBC封装" class="headerlink" title="JDBC封装"></a>JDBC封装</h2><p>方法:加载,连接,关闭</p><ul><li><p>jdbc工具</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class DButil &#123;</span><br><span class="line">private static Properties p = new Properties();</span><br><span class="line">static&#123;</span><br><span class="line">//加载资源流</span><br><span class="line">try &#123;</span><br><span class="line">p.load(Thread.currentThread().getContextClassLoader().getResourceAsStream("db.properties"));</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(p.getProperty("driver"));</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//连接数据库</span><br><span class="line">public static Connection connect()&#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">try &#123;</span><br><span class="line">conn=DriverManager.getConnection(p.getProperty("url")</span><br><span class="line">,p.getProperty("name")</span><br><span class="line">,p.getProperty("pwd"));</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">return conn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//关闭数据库</span><br><span class="line">public static void closeRe(Connection conn,Statement st,ResultSet rs)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(rs!=null)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">if(st!=null)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">if(conn!=null)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="JDBC操作-更新-查询"><a href="#JDBC操作-更新-查询" class="headerlink" title="JDBC操作(更新,查询)"></a>JDBC操作(更新,查询)</h2><h2 id="jdbc操作-更新-查询-封装工具类-拓展"><a href="#jdbc操作-更新-查询-封装工具类-拓展" class="headerlink" title="jdbc操作(更新,查询)封装工具类(拓展)"></a>jdbc操作(更新,查询)封装工具类(拓展)</h2><p>数据库的字段类型和java中获取类型</p><p>字段通过类的公共访问方式去获得</p><h2 id="jdbc登录-注册-处理用户信息"><a href="#jdbc登录-注册-处理用户信息" class="headerlink" title="jdbc登录,注册,处理用户信息"></a>jdbc登录,注册,处理用户信息</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;序列(创建,作用)&lt;/p&gt;
&lt;p&gt;作用:方便给主键字段赋值的带有指定规律和步长的工具&lt;/p&gt;
&lt;p&gt;语法:create sequence 序列名  start with 开始数值  increment by 增长数&lt;/p&gt;
&lt;p&gt;​         序列名.currval:
      
    
    </summary>
    
      <category term="数据库" scheme="https://detailmk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="https://detailmk.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>查询深化</title>
    <link href="https://detailmk.github.io/2019/07/23/%E6%9F%A5%E8%AF%A2%E6%B7%B1%E5%8C%96/"/>
    <id>https://detailmk.github.io/2019/07/23/查询深化/</id>
    <published>2019-07-23T02:32:31.000Z</published>
    <updated>2019-08-07T09:29:16.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表连接–99语法"><a href="#表连接–99语法" class="headerlink" title="表连接–99语法***"></a>表连接–99语法***</h2><ul><li><p>笛卡尔积</p><p>—–语法:select 查询字段 from 表1 cross join 表2;</p><p>查询员工表和部门表所有信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">cross</span> <span class="keyword">join</span> dept</span><br></pre></td></tr></table></figure></li><li><p>等值连接</p><p>—–语法:select 查询字段 from 表1 natural join 表2(自动匹配主外键关系的同名字段)</p><p>​        注意 : 同名字段不能有限定条件</p><p>查询员工信息和对应的部门名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dname,ename,deptno <span class="keyword">from</span> emp <span class="keyword">natural</span> <span class="keyword">join</span> dept</span><br></pre></td></tr></table></figure><p>—–语法:select 查询字段 from 表1 join 表2 using (等值连接的字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dname,ename,deptno <span class="keyword">from</span> emp <span class="keyword">join</span> dept <span class="keyword">using</span> (deptno);</span><br></pre></td></tr></table></figure><p>(inner join和join是相同的)</p><p>—–语法:select 查询字段 from 表1 join 表2 on 条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dname,ename,emp.deptno <span class="keyword">from</span> emp <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno=dept.deptno;</span><br></pre></td></tr></table></figure></li><li><p>不等值连接</p><p>—–语法:select 查询字段 from 表1 join 表2 on 条件(不等值)</p><p>查询员工姓名和对应的薪资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,grade <span class="keyword">from</span> emp <span class="keyword">join</span> salgrade <span class="keyword">on</span> sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal</span><br></pre></td></tr></table></figure></li><li><p>内连接</p><p>在同一张表进行查询</p><p>查询员工以及对应的上级信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e1.ename,e2.mgr,e2.ename <span class="keyword">from</span> emp e1 <span class="keyword">join</span> emp e2 <span class="keyword">on</span> e1.mgr=e2.empno</span><br></pre></td></tr></table></figure></li><li><p>外连接(判断哪个是主表,决定用左外连接还是右外连接)</p><ul><li><p>左外连接</p><p>查询部门名和部门人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dname,<span class="keyword">count</span>(empno) <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.deptno=e.deptno <span class="keyword">group</span> <span class="keyword">by</span> e.deptno,dname</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>右外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dname,<span class="keyword">count</span>(empno) <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> d.deptno=e.deptno <span class="keyword">group</span> <span class="keyword">by</span> e.deptno,dname</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>全连接(full join)</p><p>查询员工信息和部门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp <span class="keyword">full</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno=dept.deptno</span><br></pre></td></tr></table></figure></li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>存储已经查询好的的结果集</p><p>形式:将查询语句封装</p><p>作用:1. 在相同结果集查询不同内容  2. 简化查询语句 3.提高执行效率</p><p>创建视图步骤:给当前用户授权(1. 用完回收—revoke dba from 用户名)—grant dba to 用户名</p><ol start="2"><li>创建视图语法—create or replace view vw_视图名 as 查询语句(只读)_</li><li>在需要的地方使用视图(例如 select 查询字段 from vw_视图名)</li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>特点:数据库一个对象,oracle自动为添加主键的字段增加索引,对于数据库本身没影响,只体现在执行DML语言时.</p><p>优点: 适合查询有索引的字段效率高</p><p>缺点:不适合对有索引的字段进行删除,插入的操作速度慢</p><p>语法—–创建:create index index _ 表名_索引名 on 表名(字段名);</p><p>​              删除: drop index 索引名;</p><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><ol><li><p>删除</p><p>drop table 表名;</p><p>删除表:默认先删除从表,再删除主表</p><pre><code>drop table 表名 cascade constraints; 删除主表,级联删除约束</code></pre></li><li><p>创建</p><p>create table 表名(</p><p>​        字段名 字段数据类型 约束,</p><p>​        字段名2 字段数据类型2 约束2,</p><p>)</p><ul><li><p>字段数据类型:    varchar2(3)默认指定(数字-&gt;字节数)    varchar2(3 char) 3个字符 number date</p></li><li><p>约束: </p><ul><li><p>主键约束–(非空唯一)primary key</p></li><li><p>非空约束–not null</p></li><li><p>检查约束–check(条件)</p></li><li><p>唯一–unique</p></li><li><p>外键关联–字段名 字段数据类型references 表名(字段2) on delete cascade//删除后设置字段2等于null</p><ol><li><p>字段后追加约束–字段后添加指定约束的名字,指定添加的字段,指定约束</p><p>sid number(5) constraints pk_sid primary key</p></li><li><p>表结构后追加约束–&gt;</p><p>constraints ck_age check(age between 0 and 150),<br>constraints ck_gender check(gender in (‘male’,’female’))</p></li><li><p>追加约束</p><p>alter table student add constraints unique_sqq unique(sqq);</p><p>删除约束</p><p>alter table student drop constraints unique_sqq;</p></li></ol></li></ul></li></ul><p>注意事项:先创建主表,后创建从表</p><p>注释语法–comment on table 表名 is ‘解释’;</p><p>​                  comment on column 表名.字段名 is ‘解释’;</p></li><li><p>插入</p><p>表格插入数据-&gt;insert into 表名(字段名) values(值);</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表连接–99语法&quot;&gt;&lt;a href=&quot;#表连接–99语法&quot; class=&quot;headerlink&quot; title=&quot;表连接–99语法***&quot;&gt;&lt;/a&gt;表连接–99语法***&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;笛卡尔积&lt;/p&gt;
&lt;p&gt;—–语法:select 查询字段 fr
      
    
    </summary>
    
      <category term="数据库" scheme="https://detailmk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="https://detailmk.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>select查询</title>
    <link href="https://detailmk.github.io/2019/07/22/%E6%9F%A5%E8%AF%A2/"/>
    <id>https://detailmk.github.io/2019/07/22/查询/</id>
    <published>2019-07-22T09:22:55.000Z</published>
    <updated>2019-08-07T09:29:06.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>DDL:数据定义语言(create：创建；drop：删除；alter：修改；rename：重命名;truncate：截断 )</p><p>DML:数据管理语言(insert：插入；delete：删除；update：更新；select：查询) </p><p>DCL:数据控制语言(grant：授权；revoke：回收权利；commit:提交事务；rollback：回滚事务)</p><h4 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h4><ol><li>每一列都是不可分割的基本数据项</li><li>主键依赖(确定唯一)</li><li>属性不依赖于其它非主属性。(建立主外键关联,拆分表) </li></ol><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><ul><li>注释–</li><li>select 字段名1,字段名2…..from 表名</li><li>查询做题思路:<ol><li>查询的数据</li><li>查询的来源</li><li>查询的条件</li></ol></li></ul><p>distinct作用查询对<strong>非字段</strong>的数据去重</p><p>给字段取名 select 字段 (as) 别名,……..</p><p>注意事项: 1. 表名起别名时不能加as</p><p>​                2.别名原封不动的内容加””<br>​                3.字符串’’</p><p>​                4.字符串拼接使用||</p><ul><li><p>伪列:不存在的列 例如 表达式和字符串</p></li><li><p>虚表(dual):在oracle中不存在的表(没有数据,也没有字段)</p><ul><li>作用:可以不用distinct就可以去重</li></ul></li><li><p>nvl(参数1,参数2) 处理null使用   如果参数1为null,最终结果参数2,如果参数1不为null,最终的结果就是参数1</p></li></ul><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="语法及其使用"><a href="#语法及其使用" class="headerlink" title="语法及其使用"></a>语法及其使用</h4><ul><li><p>形式: select *|表达式|字符串|伪列|字段1 别名1,字段2 as 别名2… from 表名 别名|结果集 where 行过滤条件;    </p></li><li><p>执行流程: from-&gt;where-&gt;select 查询结果集</p></li><li><p>查询思路:    1.数据 2. 来源 3.条件</p></li><li><p>any|some(任意一个)          all(所有)</p></li><li><p>or或      and并且      not取反</p></li><li><p>集合: </p><ol><li>Union,并集(去重)          Union All,全集(不去重)</li><li>Instersect,交集(找出重复)</li><li>Minus,差集(减去重复)</li></ol></li><li><p>模糊匹配 like %任意字符 _一个任意字符</p></li><li><p>escape:指定转义字符(‘单个字符’)</p><ul><li>例如: select * from emp where ename like ‘%B%%’ escape(‘B’);</li></ul></li><li><p>排序</p><ul><li>select *|表达式|字符串|伪列|字段1 别名1,字段2 as 别名2… from 表名 别名|结果集 where 行过滤条件 order by  排序字段 (desc 降序 ; asc      升序)</li><li>执行流程 from-&gt;where-&gt;select 查询结果集-&gt;排序</li></ul></li></ul><p>[oo] 执行增删改的操作-&gt;默认开启事务(commit 提交 ; rollback 回滚)</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>[] 举个栗子:</p><ul><li><p>查询工资比SMITH高的同一部门的员工信息</p><ul><li>查询数据:员工信息</li><li>查询来源:员工表</li><li>查询条件: 工资&gt;史密斯的工资and部门号等于史密斯的部门号</li></ul></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line">  <span class="keyword">from</span> emp</span><br><span class="line"> <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename = <span class="string">'SMITH'</span>)</span><br><span class="line">   <span class="keyword">and</span> deptno = (<span class="keyword">select</span> deptno <span class="keyword">from</span> emp <span class="keyword">where</span> ename = <span class="string">'SMITH'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>exists: 存在并保留;条件为 true, 存在记录,则返回结果,后续不再继续 ,与字段无关,与记录有关</p><p>[] 举个栗子:</p><ul><li><p>与有奖金的员工统一部门的所有员工的员工信息  </p><ul><li>查询数据:员工信息</li><li>查询来源:员工表</li><li>查询条件:部门号=奖金is not null</li></ul></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line">  <span class="keyword">from</span> emp e</span><br><span class="line"> <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> emp e2 <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">   <span class="keyword">and</span> e.deptno = e2.deptno);</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>单行函数: 一条记录返回一个结果</li><li>多行函数: 组函数 聚合函数|多条记录返回一个结果</li></ul><ol><li><p>日期函数</p><ul><li>sysdate/current_date 以date类型返回当前日期</li><li>add_mouths(d,x) 返回加上x月后的日期d的值</li><li>LAST_DAY(d)   返回的所在月份的最后一天</li><li>months_between(date1,date2)  返回date1和date2之间月的数目  </li><li>next_day(sysdate,’星期一’)  下周星期一 </li></ul></li><li><p>转换函数***</p><ul><li><p>to_date(c,m)    字符串以指定格式转换为日期 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2017-3-21 18:12:12'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="built_in">time</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></li><li><p>to_char(d,m)    日期以指定格式转换为字符串 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy 年 mm 月 dd 日'</span>)  <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>其他函数(保证类型兼容)</p><ul><li>nvl —- nvl(string1,string2)  如果string1为null,则结果为string2的值 </li><li>decode———decode  decode(condition,case1,express1,case2 , express2,….casen , expressn, expressionm) </li><li>case when 情况 then 执行体 else end </li></ul></li><li><p>组函数;(count() sum() max() min() avg())</p><ul><li>作用:对确定的结果集使用函数返回结果</li><li>注意事项:<ol><li>select后组函数不能和非组函数或分组字段一起使用</li><li>where不能使用组函数</li></ol></li></ul></li></ol><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul><li>语法select 数据 from 数据源 where 行过滤条件 group by 分组字段 having 组过滤信息 order by 排序字段;</li><li>执行顺序: from -&gt;where-&gt;group by-&gt;having-&gt;select-&gt;order by</li><li>注意:如果有分组,select后只能跟分组字段和组函数</li></ul><p>[] 举个栗子:</p><ul><li><p>查询出每门课程分数都&gt;80分的学生名字</p><ul><li><p>查询数据:学生姓名</p></li><li><p>查询来源:学生表</p></li><li><p>查询条件:count(科目)=3 and 每门科目分数&gt;80</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span></span><br><span class="line">  <span class="keyword">from</span> tb_student</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">min</span>(score) &gt; <span class="number">80</span> <span class="keyword">and</span> <span class="keyword">count</span>(<span class="number">1</span>) = (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> course)</span><br><span class="line">          <span class="keyword">from</span> tb_student);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>行转列</p><table><thead><tr><th>id</th><th>name</th><th>course</th><th>score</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table></li><li><p>转成</p><table><thead><tr><th>姓名</th><th>语文</th><th>数学</th><th>外语</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li><p>思路: 姓名这一列 用去重distinct</p><p>​         语文,数学,外语这三列 按姓名分组取各自分数</p></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">name</span> <span class="string">"姓名"</span>,</span><br><span class="line">                <span class="keyword">min</span>(<span class="keyword">decode</span>(course, <span class="string">'语文'</span>, score)) <span class="string">"语文"</span>,</span><br><span class="line">                <span class="keyword">min</span>(<span class="keyword">decode</span>(course, <span class="string">'数学'</span>, score)) <span class="string">"数学"</span>,</span><br><span class="line">             nvl(<span class="keyword">min</span>(<span class="keyword">decode</span>(course, <span class="string">'英语'</span>, score)), <span class="number">0</span>) <span class="string">"英语"</span></span><br><span class="line">  <span class="keyword">from</span> tb_student</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><h3 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h3><ul><li><p>rowid和rownum</p><ul><li><p>rowid:表中每条记录的地址</p><p>​            特点:数据插入表中就记录,后续不改变</p><p>​            作用:当遇到<strong>没有主键</strong>或者没有<strong>唯一的字段</strong>的表中存在多条重复                     数据的时候,去重时可以使用rowid(实现重复记录的删除)</p></li><li><p>rownum:查询结果集中数据的编号</p><p>​                特点:rownum依赖于结果集,确定结果集才能用确定的rownum判断</p><p>​                作用:主要应用于分页查询</p></li></ul></li><li><p>表连接(92语法)</p><ul><li>使用情况:获取数据需要去来自不同表去查询</li></ul></li></ul><ol><li><p>笛卡尔积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename, dname, e.deptno from emp e, dept d;</span><br></pre></td></tr></table></figure><p>取得数据个数 =员工表数据行数*部门表数据行数</p></li><li><p>等值连接</p><ul><li><p>使用方式:用两张表中相同字段进行连接( 取条件列相同的值)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno=dept.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.ename=dept.dname;//不同字段数据无法查询</span><br></pre></td></tr></table></figure></li></ul></li><li><p>非等值连接</p><ul><li><p>和等值连接的区别:通过获取另一张表的数据区间进行条件判断和当前表整合获取.</p></li><li><p>举个栗子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询 30部门员工的 每一个的员工的员工信息,薪资等级,部门信息</span></span><br><span class="line"><span class="comment">--查询信息:员工信息,薪资等级,部门信息</span></span><br><span class="line"><span class="comment">--查询来源:员工表,薪资等级表,部门表</span></span><br><span class="line"><span class="comment">--查询条件:员工的薪资在哪个等级区间and员工表的部门号等于部门表的部门号</span></span><br><span class="line"><span class="keyword">select</span> deptno,ename, grade, sal</span><br><span class="line">  <span class="keyword">from</span> salgrade s, emp e,dept d</span><br><span class="line"> <span class="keyword">where</span> d.deptno=<span class="number">30</span> <span class="keyword">and</span></span><br><span class="line"> d.deptno=e.deptno <span class="keyword">and</span></span><br><span class="line"> sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自连接</p><ul><li><p>特点:在同一张表查询,特殊的等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 找出 存在上级的员工姓名 及上级名称</span></span><br><span class="line"><span class="comment">-- 查询数据：员工姓名,经理名称</span></span><br><span class="line"><span class="comment">-- 查询来源：员工表</span></span><br><span class="line"><span class="comment">-- 查询条件: 存在上级的员工</span></span><br><span class="line"><span class="keyword">select</span> e.ename, m.ename <span class="keyword">from</span> emp e, emp m <span class="keyword">where</span> e.mgr=m.empno;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="5"><li><p>外连接</p><ul><li><p>外链接</p><ul><li><p>显示:作为主表的表中的数据全部显示</p></li><li><p>使用:在连接条件的位置,在主表对面的表的连接条件后添加(+)<br>emp e1,emp e2 主表的位置确定,主表在左边叫做左连接,主表在右边,叫做右连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询员工信息和员工上级信息以及没有领导上级的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e1,emp e2 <span class="keyword">where</span> e1.mgr=e2.empno(+); <span class="comment">--左连接</span></span><br><span class="line"><span class="comment">----查询员工信息和员工上级信息以及没有上级员工的信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e2,emp e1 <span class="keyword">where</span> e1.mgr=e2.empno(+); <span class="comment">--右连接</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h2&gt;&lt;p&gt;DDL:数据定义语言(create：创建；drop：删除；alter：修改；rename：重命名;truncate：截断 )&lt;/p&gt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://detailmk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="https://detailmk.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>JAVASE复习</title>
    <link href="https://detailmk.github.io/2019/07/19/JAVASE%E5%A4%8D%E4%B9%A0/"/>
    <id>https://detailmk.github.io/2019/07/19/JAVASE复习/</id>
    <published>2019-07-19T11:04:38.000Z</published>
    <updated>2019-08-07T09:25:59.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>​    定义,使用</p><p>​    return,参数,调用</p><p>​    方法重载</p><p>​    递归</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>​    封装</p><p>​    继承</p><p>​    多态</p><p>​    </p><p>​    构造器</p><ul><li><p>this和super</p><p>​    This（）：当前类的实例,一个类，如果继承了父类，那么通过this既可以访问当前类的属性和方法，也可以访问父类的属性和方法，但是当子类重写了父类的方法之后，super.方法名,访问的是父类的方法，this.方法名访问的是子类的方法</p><p>​    super父类实例,在构造方法中，super()必须要写在构造的第一句</p></li><li><p>权限修饰符</p><p> Public:任何位置都可访问</p><p> Private：当前类内部</p><p> Protected: 不同包的子类、当前包内都可用</p><p> Default、friendly/不写时:同一包内</p></li></ul><ul><li><p>static</p><ol><li><p>静态方法中是不能调用非静态的属性或者方法,</p></li><li><p>非静态的方法中是可以调用静态的成员和方法的</p></li></ol></li></ul><p>​    block</p><ul><li><p>重写和重载</p><p>重写override:1 发生在子类中</p><p>​                     2 方法名、参数列表、返回值类型必须相同</p><p>​                     3 访问修饰符大于等于父类的</p><p>重载overload：1 发生在同一个类中</p><p>​                           2 方法名必须相同 ，参数列表必须不同</p><p>​                           3 与访问修饰符、返回值类型无关</p><p>重载的作用：实现方法名的复用</p></li><li><p>final</p><p>Final修饰的属性是常量</p><p>Final修饰的方法不可以重写</p><p>Final修饰的类不可以继承</p></li><li><p>接口和抽象类之间的区别</p><p>1) 抽象类只能被单继承，接口可以被多实现</p><p>2) 接口只有定义,抽象类可以有定义和实现</p></li></ul><p>​    </p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>一些常见的异常</p><p>runtime exception:：NullPointerException、ArrayIndexOutOfBoundsException、 ClassCastException</p><ul><li><p>运行时异常:java JVM抛出的异常，代码中不用处理。是在代码运行过程中产生的</p></li><li><p>非运行时异常：就是编译的时候产生的异常</p></li></ul><p>内部类:</p><p>​    匿名内部类</p><p>​    Lambda</p><p>设计模式:单例模式,静态代理</p><ul><li>throws与throw区别</li></ul><p>throws 捕获并向外抛出异常 throw抛出异常 </p><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><p>​    String ***</p><ul><li><p>String,StringBuilder,StringBuffer区别?</p><p>String:String由final关键字修饰，所以长度是不可变</p><p>StringBuffer:可变可修改的 线程安全</p><p>StringBuilder 性能高 执行速度快</p></li><li><p>String常用方法</p><p><img src="https://i.loli.net/2019/08/04/ocfNv3DKCI7SlBH.jpg" alt="捕获.JPG"></p><p><img src="//detailmk.github.io/2019/07/19/JAVASE复习/JAVASE%E5%A4%8D%E4%B9%A0%5C%E6%8D%95%E8%8E%B7.JPG" alt></p></li></ul><p>​        对象问题</p><p>​    基本数据类型的包装类型:</p><ul><li>int 和 Integer之间的区别?<ol><li>Int是基本数据类型，不是对象，占一个内存空间，没有方法。与其同类的有long,char,doble</li><li>Integer是封装类，具有方法及属性。与其同类的有Long,Double.Float</li></ol></li></ul><p>​        有了基本数据类型为什么要有包装类型?</p><p>​        为什么要有包装类型还要有基本数据类型?</p><p>​        自动拆装箱</p><p>​        Integer对象比较问题</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>节点流</p><h3 id="字节流-InputStream-OutputStream"><a href="#字节流-InputStream-OutputStream" class="headerlink" title="字节流***  InputStream OutputStream()"></a>字节流***  InputStream OutputStream()</h3><p>字符流</p><p>功能流(节点流)</p><p>转换流</p><p>基本数据类型流</p><p>对象流</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList  ***"></a>ArrayList  ***</h3><p>底层实现结构: 数组结构实现</p><ul><li><p>优点: 通过索引遍历,随机获取效率高</p></li><li><p>缺点: 增加,删除效率低(遇到数组的拷贝问题)</p></li><li><p>扩容:  int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</p><p>​        使用copyOf方法进行动态扩容,每次扩容原容量的1.5倍</p><p>​        默认容量为10–&gt;add</p></li></ul><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap  ***"></a>HashMap  ***</h3><p>底层实现:哈希表(数组+链表+红黑树)</p><p>特点:查询,增加,修改效率高   </p><p>扩容:默认初始容量是 16，加载因子是 0.75。,当数据个数达到初始容量*加载因子个数的时候就扩容 ,扩容原容量的2倍</p><ul><li><p>数组和容器的区别?</p><p>数组:存储多个数据的容器</p><p>1.数据类型要求一致</p><p>2.有序有索引</p><p>3.定长</p><p>容器: 存储0~多个数据</p><p>存储任意类型的数据,容器的大小可以随着内容的数量进行增减</p></li><li><p>Collection和Collections的区别</p><p>​    Collection是容器的超级接口</p><p>​    Collections是操作容器的工具类(sort(),reverse(),shuffle()随机排序,fill(list,obj)对象填充)</p></li><li><p>Set和List的区别</p><p>​    Set 中的数据没有顺序，不可重复</p><p>​    List 中的数据有顺序，可重复。 </p></li><li><p>ArrayList,LinkedList,Vector之间的区别</p></li></ul><ol><li>ArrayList<br>底层实现结构: 数组结构实现<br>优点: 通过索引遍历,随机获取效率高<br>缺点: 增加,删除效率低(遇到数组的拷贝问题)<br>扩容:  int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);使用copyOf方法进行动态扩容,每次扩容原容量的1.5倍<br>默认容量为10–&gt;add</li><li>Vector<br>与ArrayList底层实现和特点相同<br>不同: 1)线程安全的,ArrayList线程不安全   2)扩容是原容量的2倍</li><li>LinkedList<br>底层实现结构: 双向链表实现<br>优点:插入数据,删除数据效率高<br>缺点:做查询效率低<br>如果大量的做增删可以使用LinkedList,大量做查询可以使用ArrayList</li></ol><ul><li>Map遍历</li></ul><ol><li>获取所有的key,拿到一个set集合   遍历set结合  1)foreach 2)迭代器<br>Set<string> sets=map1.keySet();<br>for(String s:sets){<br>System.out.println(s+”–&gt;”+map1.get(s));<br>}</string></li><li>获取所有的values   1)foreach 2)迭代器<br>   Collection<integer> cols=map1.values();<br>   Iterator<integer> it=cols.iterator();<br>   while(it.hasNext()){<br>   System.out.println(it.next());<br>   }</integer></integer></li><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()<br>Map.Entry&lt;K,V&gt;<br>K getKey() 返回与此项对应的键。<br>V getValue() 返回与此项对应的值。<br>Set&lt;Map.Entry&lt;String,Integer&gt;&gt; set=map1.entrySet();<br>for(Map.Entry&lt;String,Integer&gt; entry:set){<br>System.out.println(entry.getKey()+”–&gt;”+entry.getValue());<br>}</li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>定义:多任务同时进行</p><p>优点:提升效率 完善功能</p><p>缺点:开发复杂,可能出现不安全</p><h3 id="创建方式-3种"><a href="#创建方式-3种" class="headerlink" title="创建方式 3种"></a>创建方式 3种</h3><ol><li>继承Thread 重写run()方法</li><li>实现Runnable接口 重写run()方法(好处:避免单继承的局限性,实现资源共享)</li><li>实现Callable接口 重写call()方法(与2不同:使用麻烦|抛出异常,具有返回值)</li></ol><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><ol><li><p>新生(NEW) new Thread()创建一个线程</p></li><li><p>就绪(RUNNABLE) start() 处于就绪状态的线程在就绪队列中等待cpu的调度</p><p>​                    yield()–&gt;礼让线程 让出cpu的资源 扩大对方执行的可能性</p><p>​                    notify()–&gt;唤醒对方正在处于等待池中的线程 ,没有对象的资源,就算是被唤醒也无法执行,必须要获取到对象的锁才能有资格执行</p><pre><code>notifyAll()--&gt;唤醒全部</code></pre></li><li><p>运行  CPU为未执行的线程分配时间片,线程开始执行</p></li><li><p>阻塞(BLOCKED) 阻止线程的正常执行</p><p>​                            sleep()–&gt;线程睡眠,使线程处于阻塞状态,让出cpu的资源如果出现对象锁的情况,sleep()抱着对象资源睡,不释放对象资源</p><p>​                            join()–&gt;插队线程</p><p>​                            wait()–&gt;线程处于等待状态,释放对象的锁(对象的资源)</p><p>​                            IO操作</p></li><li><p>终止(TERMINATED) 线程结束</p></li></ol><h3 id="线程安全-同步"><a href="#线程安全-同步" class="headerlink" title="线程安全:同步"></a>线程安全:同步</h3><p>synchronized 同步锁</p><ul><li><p>同步方法:</p><pre><code>成员方法和静态方法使用简单,但是锁的范围一般可能较大,程序执行效率低</code></pre></li><li><p>同步块</p><pre><code>锁类的class:相当于锁了类的所有对象的整个信息this:锁当前对象,锁了这个对象的所有资源遇到锁变量的情况时的处理方式,将变量成为某个类的成员属性,之后具有这个属性的对象的地址就行.(资源:一般锁不变的内容--对象地址)锁的范围太大效率低,锁的范围太小可能锁不住</code></pre><p><strong>锁一定要锁不变的内容</strong></p></li></ul><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><p>定义:线程之间相互发出信号</p><p>方法:wait() notify() notifyAll()</p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>ip:定义网络上的节点–区分节点</p><p>端口:区分软件</p><p>url:统一资源定位符</p><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP ***"></a>TCP ***</h4><ul><li>客户端</li></ul><ol><li>创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器</li><li>调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流</li><li>输入流可以读取服务端输出流写出的数据</li><li>输出流可以写出数据到服务端的输入流</li></ol><ul><li>服务端</li></ul><ol><li>创建ServerSocket (指定接收的端口号)</li><li>调用ServerSocket 的 accept()方法接收客户端的请求(阻塞式监听)</li><li>调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流</li><li>输入流可以读取客户端输出流写出的数据</li><li>输出流可以写出数据到客户端的输入流</li></ol><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li>发送端</li></ul><ol><li>选择流把数据读到程序</li><li>定义发送端DatagramSocket(发送端的端口号)</li><li>把数据打包DatagramPacket(数据,new InetSocketAddress(“主机名”,接收端的端口号))</li><li>调用DatagramSocket的send()方法发送</li><li>关闭</li></ol><ul><li>接收端</li></ul><ol><li><p>定义接收端DatagramSocket</p></li><li><p>准备合适的数据类型的容器打包接收数据</p></li><li><p>调用DatagramSocket的receive()方法接收数据</p></li><li><p>处理接收的数据</p></li><li><p>选择流写出,刷出</p></li><li><p>关闭</p></li><li><p>定义接收端</p></li></ol><p>TCP和UDP的区别:</p><ol><li>TCP面向连接,虽然安全,但消耗资源,通过流传输,传输数据大小无限制 </li><li>UDP面向无连接,编辑完了就发送,发送的信息如果未被接收就很不安全,通过字节数组传输,发送数据大小有限制</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;​    定义,使用&lt;/p&gt;
&lt;p&gt;​    return,参数,调用&lt;/p&gt;
&lt;p&gt;​    方法重载&lt;/p&gt;
&lt;p&gt;​    递归&lt;/p
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://detailmk.github.io/2019/07/19/%E5%8F%8D%E5%B0%84/"/>
    <id>https://detailmk.github.io/2019/07/19/反射/</id>
    <published>2019-07-19T07:24:10.000Z</published>
    <updated>2019-08-07T09:27:33.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义*"></a>定义*</h3><p>反射是程序处于<strong>运行</strong>状态时的行为,可以<strong>动态</strong>获取的信息以及调用对象的方法的功能</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点*"></a>特点*</h3><ul><li>反射技术可以使代码变得灵活简单</li><li>动态获取</li></ul><h3 id="获取类的class对象方式-3种"><a href="#获取类的class对象方式-3种" class="headerlink" title="获取类的class对象方式(3种)*"></a>获取类的class对象方式(3种)*</h3><ol><li>Class.forName(“包名.类名”)—-(常用)</li><li>类.class</li><li>对象.getClass()</li></ol><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能*"></a>实现功能*</h3><p>处于运行状态下</p><ol><li>判断一个对象属于哪个类</li><li>构造一个类的对象</li><li>判断一个类里的成员变量和方法</li><li>调用任一对象的方法</li><li>生成动态代理</li></ol><h3 id="反射操作"><a href="#反射操作" class="headerlink" title="反射操作"></a>反射操作</h3><h4 id="反射操作构造器"><a href="#反射操作构造器" class="headerlink" title="反射操作构造器"></a>反射操作构造器</h4><p>查阅java.lang.reflect.Constructor API文档</p><h4 id="反射操作方法"><a href="#反射操作方法" class="headerlink" title="反射操作方法"></a>反射操作方法</h4><p>查阅java.lang.reflect.Method API文档</p><h4 id="反射操作字段"><a href="#反射操作字段" class="headerlink" title="反射操作字段"></a>反射操作字段</h4><p>java.lang.reflect.Field</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h1&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义*&quot;&gt;&lt;/a&gt;定义*&lt;/h3&gt;&lt;p&gt;反
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>多线程和网络编程</title>
    <link href="https://detailmk.github.io/2019/07/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://detailmk.github.io/2019/07/18/多线程和网络编程/</id>
    <published>2019-07-18T03:12:53.000Z</published>
    <updated>2019-08-07T09:27:56.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h4 id="线程通信-生产者消费者模式"><a href="#线程通信-生产者消费者模式" class="headerlink" title="线程通信(生产者消费者模式)"></a>线程通信(生产者消费者模式)</h4><p>定义:线程之间相互发出信号</p><p>方法:wait() notify() notifyAll()</p><p>案例:厨师做菜给顾客吃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFood</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Restrant r = <span class="keyword">new</span> Restrant();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Cook(r)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Custom(r)).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restrant</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"吃菜中-----"</span>);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"做菜中------"</span>);</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">Restrant res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Custom</span><span class="params">(Restrant res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">res.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cook</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">Restrant res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cook</span><span class="params">(Restrant res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">res.make();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">做菜中------</span><br><span class="line">吃菜中-----</span><br></pre></td></tr></table></figure></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>太频繁得使用锁,导致对象资源被锁住无法获取</p><h4 id="其他锁-了解"><a href="#其他锁-了解" class="headerlink" title="其他锁(了解)"></a>其他锁(了解)</h4><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h4 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h4><p>ip:定义网络的节点</p><p>端口:区分软件</p><p>URL:统一资源定位符</p><h4 id="TCP和UDP的区别-特点-安全性-传输方式及数据"><a href="#TCP和UDP的区别-特点-安全性-传输方式及数据" class="headerlink" title="TCP和UDP的区别(特点,安全性,传输方式及数据)"></a>TCP和UDP的区别(特点,安全性,传输方式及数据)</h4><p>协议:UDP(短信)和TCP(电话)</p><p>TCP特点:面向连接,虽然安全,但消耗资源,通过流传输,传输数据大小无限制</p><p>UDP特点:面向无连接,编辑完了就发送,发送的信息如果未被接收就很不安全,通过字节数组传输,发送数据大小有限制</p><h4 id="基于udp的Socket编程"><a href="#基于udp的Socket编程" class="headerlink" title="基于udp的Socket编程"></a>基于udp的Socket编程</h4><ul><li>1.发送Send<ul><li>创建DatagramSocket, 随机端口号</li><li>创建DatagramPacket, 指定数据, 长度, 地址, 端口</li><li>使用DatagramSocket发送DatagramPacket</li><li>关闭DatagramSocket</li></ul></li><li>2.接收Receive<ul><li>创建DatagramSocket, 指定端口号</li><li>创建DatagramPacket, 指定数组, 长度</li><li>使用DatagramSocket接收DatagramPacket</li><li>关闭DatagramSocket</li><li>从DatagramPacket中获取数据</li></ul></li><li>3.接收方获取ip和端口号<ul><li>String ip = packet.getAddress().getHostAddress();</li><li>int port = packet.getPort();</li></ul></li></ul><ul><li>发送端流程</li></ul><ol><li><p>定义发送端     DatagramSocket(端口号) 指定发送端的端口号</p></li><li><p>准备数据</p></li><li><p>对数据打包</p><p> DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port) </p><p>构造数据报包，用来将长度为 length 偏移量为 offset 的包发送到指定主机上的指定端口号。</p></li><li><p>发送void send(DatagramPacket p) </p></li><li><p>关闭   void close()  关闭此数据报套接字。 </p></li></ol><ul><li>接收端基本流程</li></ul><ol><li><p>定义接收端    DatagramSocket(int port) </p></li><li><p>准备字节数组</p></li><li><p>准备包裹用来接收数据  DatagramPacket(byte[] buf, int length) </p></li><li><p>接收</p></li></ol><p>​    5. 从包裹中获取数据</p><pre><code>byte[] getData()  返回数据缓冲区。 </code></pre><p>​          int getLength()  返回将要发送或接收到的数据的长度。 </p><p>​    6. 关闭</p><h4 id="基于tcp的Socket编程"><a href="#基于tcp的Socket编程" class="headerlink" title="基于tcp的Socket编程"></a>基于tcp的Socket编程</h4><ul><li>1.客户端<ul><li>创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器</li><li>调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流</li><li>输入流可以读取服务端输出流写出的数据</li><li>输出流可以写出数据到服务端的输入流</li></ul></li><li>2.服务端<ul><li>创建ServerSocket(需要指定端口号)</li><li>调用ServerSocket的accept()方法接收一个客户端请求，阻塞式监听</li><li>调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流</li><li>输入流可以读取客户端输出流写出的数据</li><li>输出流可以写出数据到客户端的输入流</li></ul></li></ul><ul><li>Socket 此类实现客户端套接字– 客户端 </li></ul><ol><li><p>定义客户端   Socket(String host, int port)   创建一个流套接字并将其连接到指定主机上的指定端口号。</p></li><li><p>IO操作  </p></li></ol><p>​         输出流OutputStream getOutputStream()   返回此套接字的  输出流。 </p><ol start="3"><li><p>刷出</p></li><li><p>关闭</p></li></ol><ul><li>ServerSocket  此类实现服务器套接字–TCP服务端</li></ul><ol><li><p>定义服务端    ServerSocket(int port)    创建绑定到特定端口的服务器套接字。</p></li><li><p>阻塞式监听  一个客户端连接成功,就是一个socket</p></li><li><p>io操作</p></li><li><p>关闭</p></li></ol><ul><li>TCP实现文件上传客户端 </li></ul><ol><li><p>定义客户端   Socket(String host, int port)   创建一个流套接字并将其连接到指定主机上的指定端口号。</p></li><li><p>IO操作 先从文件中读入数据–&gt;写出数据 </p><p>new FileInputStream(“”);<br>输出流OutputStream getOutputStream()  返回此套接字的输出流。 </p></li><li><p>刷出</p></li><li><p>关闭</p></li></ol><ul><li>TCP实现文件上传服务端</li></ul><ol><li><p>定义服务端    ServerSocket(int port)    创建绑定到特定端口的服务器套接字。</p></li><li><p>阻塞式监听  一个客户端连接成功,就是一个socket</p></li><li><p>io操作 :从客户端读入数据 —&gt;文件输出流 写出文件中</p></li><li><p>刷出</p></li><li><p>关闭</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h2&gt;&lt;h4 id=&quot;线程通信-生产者消费者模式&quot;&gt;&lt;a href=&quot;#线程通信-生产者消费者模式&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://detailmk.github.io/2019/07/17/%E9%9B%86%E5%90%88/"/>
    <id>https://detailmk.github.io/2019/07/17/集合/</id>
    <published>2019-07-17T10:25:58.000Z</published>
    <updated>2019-08-07T10:28:43.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://i.loli.net/2019/08/04/hqMjWNJ5U1aTxbP.png" alt="集合.png"></p><h2 id="list遍历方式"><a href="#list遍历方式" class="headerlink" title="list遍历方式"></a>list遍历方式</h2><ol><li>普通for</li><li>增强for</li><li>迭代器</li><li>列表迭代器(和迭代器相比 :迭代器当遇到两个对象同时操作同一个容器时会出现异常,列表迭代器解决了这个问题)</li></ol><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>特点:有序可以重复</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>底层结构:数组</p><p>优点:适合查询</p><p>缺点:不适合插入和删除 线程不安全</p><p>扩容</p><ul><li>测试学生类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", id="</span> + id + <span class="string">", score="</span> + score + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Student other = (Student) obj;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestaL</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Vector&lt;String&gt; ve = <span class="keyword">new</span> Vector();</span><br><span class="line">Vector&lt;String&gt; ve1 = <span class="keyword">new</span> Vector(<span class="number">10</span>,<span class="number">15</span>);</span><br><span class="line">System.out.println(ve1.capacity());</span><br><span class="line">ve1.add(<span class="string">"efee"</span>);</span><br><span class="line">System.out.println(ve1);</span><br><span class="line"></span><br><span class="line">System.out.println(ve1.remove(<span class="string">"efee"</span>));</span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; ll = <span class="keyword">new</span> LinkedList();</span><br><span class="line">ll.add(<span class="string">"faefe"</span>);</span><br><span class="line">ll.addFirst(<span class="string">"fewae"</span>);</span><br><span class="line">ll.offer(<span class="string">"kkkk"</span>);</span><br><span class="line">Iterator&lt;String&gt; it = ll.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*********************"</span>);</span><br><span class="line">ArrayList&lt;Student&gt; as = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student(<span class="string">"mk1"</span>, <span class="number">001</span>, <span class="number">95.5</span>);</span><br><span class="line">as.add(stu1);</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="string">"mk2"</span>, <span class="number">002</span>, <span class="number">99.5</span>);</span><br><span class="line">as.add(stu2);</span><br><span class="line">Student stu3 = <span class="keyword">new</span> Student(<span class="string">"mk3"</span>, <span class="number">003</span>, <span class="number">91.5</span>);</span><br><span class="line">as.add(stu3);</span><br><span class="line">Iterator&lt;Student&gt; is = as.iterator();</span><br><span class="line"><span class="keyword">while</span>(is.hasNext())&#123;</span><br><span class="line">System.out.println(is.next());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">System.out.println(as.indexOf(stu2));</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"mk2"</span>.equals(as.get(<span class="number">1</span>).getName()))&#123;</span><br><span class="line">System.out.println(<span class="string">"true"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"false"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"mk2"</span>.equals(stu2.getName()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">[efee]</span><br><span class="line">true</span><br><span class="line">fewae</span><br><span class="line">faefe</span><br><span class="line">kkkk</span><br><span class="line">*********************</span><br><span class="line">Student [name=mk1, id=1, score=95.5]</span><br><span class="line">Student [name=mk2, id=2, score=99.5]</span><br><span class="line">Student [name=mk3, id=3, score=91.5]</span><br><span class="line">--------------------------</span><br><span class="line">1</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure></li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>和ArrayList不同点是矢量<em>线程安全</em>,并且它的扩容大些(ArrayList1.5倍|Vector2倍)</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>单向链表 关注链表头</p><p>双向链表 关注链表头和链表尾</p><ul><li>自定义双向链表(抽空mind)</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>特点:无序,不可以重复</p><p>底层结构:数组+链表+红黑树</p><p>优点:方便处理数据</p><p>缺点:查询不合适</p><p>步骤:</p><ol start="2"><li><p>将元素通过算法放入对应的桶(数组)</p></li><li><p>相同桶里的用链表存储 如果一个桶里数据过多,不适合用链表存储</p><p>用树去存储.</p><p>问题:如果用Set存储相同对象相同内容或者相同内容的不同对象会出现什么情况</p><ul><li><p>实验</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HashSet&lt;Student&gt; ss = <span class="keyword">new</span> HashSet();</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student(<span class="string">"mk1"</span>, <span class="number">001</span>, <span class="number">63.5</span>);</span><br><span class="line">ss.add(stu1);</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="string">"mk1"</span>, <span class="number">001</span>, <span class="number">63.5</span>);</span><br><span class="line">ss.add(stu2);</span><br><span class="line">Student stu3 = <span class="keyword">new</span> Student(<span class="string">"mk3"</span>, <span class="number">003</span>, <span class="number">65.5</span>);</span><br><span class="line">ss.add(stu3);</span><br><span class="line">System.out.println(ss);</span><br><span class="line">ss.add(stu1);</span><br><span class="line">System.out.println(ss);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Student [name=mk3, id=3, score=65.5], Student [name=mk1, id=1, score=63.5], Student [name=mk1, id=1, score=63.5]]</span><br><span class="line">[Student [name=mk3, id=3, score=65.5], Student [name=mk1, id=1, score=63.5], Student [name=mk1, id=1, score=63.5]]</span><br></pre></td></tr></table></figure><ul><li>去重解决方式:重写hashcode方法</li></ul></li></ul></li></ul></li></ul></li></ol><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>   底层:红黑树(平衡二叉树)</p><p>   特点:默认升序排列</p><p>   需要用比较器来解决去重和排序问题</p><ul><li><p>测试TreeSet使用外部比较器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Student&gt; ts = new TreeSet(new Comparator&lt;Student&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Student o1, Student o2) &#123;</span><br><span class="line">return (int)(o1.getScore()-o2.getScore());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">ts.add(new Student(&quot;mk4&quot;, 004, 56.2));</span><br><span class="line">ts.add(new Student(&quot;mk5&quot;, 005, 66.2));</span><br><span class="line">ts.add(new Student(&quot;mk6&quot;, 006, 76.2));</span><br><span class="line">System.out.println(ts);</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Student [name=mk4, id=4, score=56.2], Student [name=mk5, id=5, score=66.2], Student [name=mk6, id=6, score=76.2]]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><ul><li><p>测试TreeMap</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TreeMap&lt;Student, Integer&gt; ts = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator&lt;Student&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>)o2.getScore()-(<span class="keyword">int</span>)o1.getScore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">ts.put(<span class="keyword">new</span> Student(<span class="string">"mk1"</span>, <span class="number">001</span>, <span class="number">88.5</span>), <span class="number">1</span>);</span><br><span class="line">ts.put(<span class="keyword">new</span> Student(<span class="string">"mk2"</span>, <span class="number">002</span>, <span class="number">83.5</span>), <span class="number">2</span>);</span><br><span class="line">ts.put(<span class="keyword">new</span> Student(<span class="string">"mk3"</span>, <span class="number">003</span>, <span class="number">87.5</span>), <span class="number">3</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;Student, Integer&gt;&gt; ss=ts.entrySet();</span><br><span class="line"><span class="comment">/*Iterator&lt;Entry&lt;Student, Integer&gt;&gt; it = ss.iterator();</span></span><br><span class="line"><span class="comment">while(it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">System.out.println(it.next());</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Student, Integer&gt; entry:ss)&#123;</span><br><span class="line">System.out.println(entry.getKey()+<span class="string">"---&gt;"</span>+entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student [name=mk1, id=1, score=88.5]---&gt;1</span><br><span class="line">Student [name=mk3, id=3, score=87.5]---&gt;3</span><br><span class="line">Student [name=mk2, id=2, score=83.5]---&gt;2</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/04/hqMjWNJ5U1aTxbP.png&quot; a
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://detailmk.github.io/2019/07/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://detailmk.github.io/2019/07/17/多线程/</id>
    <published>2019-07-17T03:12:53.000Z</published>
    <updated>2019-08-07T09:27:44.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://i.loli.net/2019/08/04/pHPUvImxzyr1AMu.png" alt="多线程.png"></p><p><img src="//detailmk.github.io/2019/07/17/多线程/%E5%A4%9A%E7%BA%BF%E7%A8%8B%5C%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>多任务同时执行</p><h2 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h2><ol><li>进程是资源分配的基本单位 线程是cpu调度和执行的基本单位</li><li>进程包含一个或者多个线程</li><li>每个进程有自己的内存空间</li><li>一类线程共享进程的内存空间的资源</li></ol><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><ol><li>继承Thread类 重写run方法</li><li>实现Runnable接口</li><li>实现Callable接口</li></ol><ul><li><p>简单测试多线程</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//new Thread(new TestThread()).start();</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> TestThread()).start();</span><br><span class="line">System.out.println(<span class="string">"右手上课----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"左手抠脚-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">左手抠脚-----</span><br><span class="line">右手上课----</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>龟兔赛跑案例</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rtrun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String win = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Rtrun rt=<span class="keyword">new</span> Rtrun();</span><br><span class="line"><span class="keyword">new</span> Thread(rt,<span class="string">"乌龟"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(rt,<span class="string">"兔子"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"兔子"</span>.equals(Thread.currentThread().getName())&amp;&amp;i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"已经跑了"</span>+i+<span class="string">"步"</span>);</span><br><span class="line"><span class="keyword">boolean</span> flag = setover(i);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setover</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(win!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">50</span>)&#123;</span><br><span class="line">win=Thread.currentThread().getName();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试类2</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Rtrun2&#123;</span><br><span class="line">static String win = null;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Runnable r =()-&gt;&#123;for(int i=0;i&lt;=50;i++)&#123;</span><br><span class="line">if(&quot;兔子&quot;.equals(Thread.currentThread().getName())&amp;&amp;i%10==0)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(1);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;已经跑了&quot;+i+&quot;步&quot;);</span><br><span class="line">boolean flag = setover(i);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;;</span><br><span class="line">new Thread(r,&quot;兔子&quot;).start();</span><br><span class="line">new Thread(r,&quot;乌龟&quot;).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean setover(int i) &#123;</span><br><span class="line">if(win!=null)&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;else if(i==50)&#123;</span><br><span class="line">win=Thread.currentThread().getName();</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现Callable接口–抢票案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testcall</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">Testcall tc = <span class="keyword">new</span> Testcall();</span><br><span class="line"><span class="comment">//创建执行服务</span></span><br><span class="line">ExecutorService ex = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//提交执行线程</span></span><br><span class="line">Future&lt;Integer&gt; r1 = ex.submit(tc);</span><br><span class="line">Future&lt;Integer&gt; r2 = ex.submit(tc);</span><br><span class="line">Future&lt;Integer&gt; r3 = ex.submit(tc);</span><br><span class="line"><span class="comment">//获得执行结果</span></span><br><span class="line">Integer i1 = r1.get();</span><br><span class="line">Integer i2 = r2.get();</span><br><span class="line">Integer i3 = r3.get();</span><br><span class="line"><span class="comment">//关闭服务</span></span><br><span class="line">ex.shutdown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"正在抢"</span>+num--+<span class="string">"票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1正在抢5票</span><br><span class="line">pool-1-thread-1正在抢4票</span><br><span class="line">pool-1-thread-2正在抢3票</span><br><span class="line">pool-1-thread-2正在抢2票</span><br><span class="line">pool-1-thread-3正在抢1票</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="线程状态-5种"><a href="#线程状态-5种" class="headerlink" title="线程状态(5种)"></a>线程状态(5种)</h2><p>join()方法的使用-小孩给我递球情景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*我让小孩捡球*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testfs</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Player()).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"球丢外面了------"</span>);</span><br><span class="line">Thread ts = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Child());</span><br><span class="line">ts.start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ts.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"接到球---"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小孩犹豫中---"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i+<span class="string">"秒过去了-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"小孩传出去----"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">球丢外面了------</span><br><span class="line">小孩犹豫中---</span><br><span class="line">0秒过去了-----</span><br><span class="line">1秒过去了-----</span><br><span class="line">2秒过去了-----</span><br><span class="line">3秒过去了-----</span><br><span class="line">小孩传出去----</span><br><span class="line">接到球---</span><br></pre></td></tr></table></figure></li></ul><p>getState()–获取线程状态</p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><h4 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h4><p>线程不安全的时候(多个线程处理同一个资源)</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>加同步锁(synchronized)</p><p>可以在方法|变量|类上加锁</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>同步锁一定锁<strong>不变</strong>的内容,下面出现想锁住变量情况时,可以通过将变量放入类中通过锁对象</p><ul><li><p>懒汉式下的同步锁–双重检查来把锁的范围缩小提高效率</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLazy</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;System.out.println(Lazy.getSingle());&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;System.out.println(Lazy.getSingle());&#125;).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lazy</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> TestLazy single= <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Lazy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestLazy <span class="title">getSingle</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(single==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"*****************"</span>);</span><br><span class="line">System.out.println(<span class="string">"*****************"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (Lazy.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(single==<span class="keyword">null</span>)&#123;</span><br><span class="line">single = <span class="keyword">new</span> TestLazy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> single;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****************</span><br><span class="line">*****************</span><br><span class="line">*****************</span><br><span class="line">多线程.TestLazy@2c3fa0fe</span><br><span class="line">多线程.TestLazy@2c3fa0fe</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>通过同步锁锁住票数对象来操作买票流程</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuy</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TestBuy tb = <span class="keyword">new</span> TestBuy();</span><br><span class="line"><span class="keyword">new</span> Thread(tb,<span class="string">"mk1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(tb,<span class="string">"mk2"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(tb,<span class="string">"mk3"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (t) &#123;</span><br><span class="line"><span class="keyword">if</span>(t.num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"正在购第"</span>+t.num--+<span class="string">"票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mk1正在购第5票</span><br><span class="line">mk1正在购第4票</span><br><span class="line">mk1正在购第3票</span><br><span class="line">mk3正在购第2票</span><br><span class="line">mk3正在购第1票</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过this锁成员变量</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuy2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TestBuy2 tb = <span class="keyword">new</span> TestBuy2();</span><br><span class="line"><span class="keyword">new</span> Thread(tb,<span class="string">"mk1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(tb,<span class="string">"mk2"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(tb,<span class="string">"mk3"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"正在购第"</span>+ticket--+<span class="string">"票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>流和容器</title>
    <link href="https://detailmk.github.io/2019/07/14/%E6%B5%81%E5%92%8C%E5%AE%B9%E5%99%A8/"/>
    <id>https://detailmk.github.io/2019/07/14/流和容器/</id>
    <published>2019-07-14T12:11:46.000Z</published>
    <updated>2019-08-07T10:28:20.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><ul><li><p>字节流</p><ul><li>字节输入流InputStream<ul><li>缓冲输入流BufferedInputStream</li></ul></li><li>字节输出流OutputStream<ul><li>缓冲输出流BufferedOutputStream</li></ul></li></ul></li><li><p>字符流</p><ul><li>字符输入流Reader</li><li>字符输出流Writer</li></ul></li><li><p>字节字符转换流</p><ul><li>InputStreamReader</li><li>OutputStreamWriter</li></ul></li><li><p>其他功能流(节点流)</p><ul><li><p>数据流</p></li><li><p>对象流</p><ul><li><p>对象输入流ObjectInputStream</p></li><li><p>对象输出流ObjectOutputStream</p><ul><li><p>对象序列化</p><ul><li>方式(创建类,继承Serializable接口)</li></ul></li></ul></li></ul></li></ul></li></ul><ul><li>测试字符拷贝</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyChar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">// 1.建立联系</span></span><br><span class="line">Reader re = <span class="keyword">null</span>;</span><br><span class="line">FileWriter wr = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">re = <span class="keyword">new</span> FileReader(<span class="string">"D:/aa.txt"</span>);</span><br><span class="line">wr = <span class="keyword">new</span> FileWriter(<span class="string">"E:/aa.txt"</span>);</span><br><span class="line"><span class="comment">// 2.准备文件 循环读入 写入完成拷贝</span></span><br><span class="line"><span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((len = re.read(ch)) != -<span class="number">1</span>) &#123;</span><br><span class="line">str = <span class="keyword">new</span> String(ch, <span class="number">0</span>, len);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将读入文件的字符转为字符数组写入拷贝目的文件</span></span><br><span class="line"><span class="keyword">char</span>[] ch2 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">ch2 = str.toCharArray();</span><br><span class="line">wr.write(ch2, <span class="number">0</span>, ch2.length);</span><br><span class="line">wr.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (wr != <span class="keyword">null</span>) &#123;</span><br><span class="line">wr.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (re != <span class="keyword">null</span>) &#123;</span><br><span class="line">re.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试对象流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeRead</span><span class="params">(String st)</span> <span class="keyword">throws</span> FileNotFoundException, IOException, InterruptedException, ClassNotFoundException</span>&#123;</span><br><span class="line">ObjectOutputStream os =<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> BufferedOutputStream( <span class="keyword">new</span> FileOutputStream(<span class="string">"D:/aa.txt "</span>)));</span><br><span class="line">Stu s1 = <span class="keyword">new</span> Stu(<span class="string">"mk"</span>,<span class="number">18</span>,<span class="number">150</span>);</span><br><span class="line">String[] s2 = &#123;<span class="string">"high"</span>,<span class="string">"fast"</span>,<span class="string">"strong"</span>&#125;;</span><br><span class="line">os.writeObject(s1);</span><br><span class="line">os.writeObject(s2);</span><br><span class="line">os.flush();</span><br><span class="line">os.close();</span><br><span class="line">ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:/aa.txt"</span>)));</span><br><span class="line">Stu st1 = (Stu)(is.readObject());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> score;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Stu [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", score="</span> + score + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试字节转字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImageFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:/aa.txt"</span>))));</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:/bb.txt"</span>))));</span><br><span class="line">String m = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>((m=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">bw.write(m);</span><br><span class="line">bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h4 id="处理场景"><a href="#处理场景" class="headerlink" title="处理场景"></a>处理场景</h4><ol><li>存储数据数量不固定</li><li>同时处理有一对一关系(比如键值对)的数据</li><li>需要对数据进行处理</li><li>数据重复</li></ol><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>元素有序可以重复</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>增加add(index,element)</li><li>删除remove(index)</li><li>修改set(index,date)</li><li>查询get(index)  |indexof(Object)</li></ul><h4 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h4><ol><li><p>循环(for,增强for)</p></li><li><p>迭代器(Iterator)</p><h4 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h4><p>Iterator接口用统一的方式对容器里元素进行遍历</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>hasNext()查看容器里是否还有下一个元素</li><li>next()返回容器中下一个元素</li></ul></li></ol><ul><li>模拟签到(使用list)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSign</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、准备一个空白本子</span></span><br><span class="line">Collection&lt;String&gt; co = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//2、开始签到 3、签到结束(如果签到人是" "则返回null到list)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">System.out.print(<span class="string">"签到人: "</span>);</span><br><span class="line">String name = sc.nextLine();</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">""</span>))&#123;</span><br><span class="line">co.add(<span class="keyword">null</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">co.add(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4、获取一共有多少人签到了</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;co.size();i++)&#123;</span><br><span class="line">num = co.size();</span><br><span class="line"><span class="keyword">if</span>(co.contains(<span class="keyword">null</span>))&#123;</span><br><span class="line">num = co.size()-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"一共有 "</span>+num+<span class="string">"人"</span>);</span><br><span class="line"><span class="comment">//5、获取到所有的名单</span></span><br><span class="line">Iterator&lt;String&gt; it = co.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">System.out.println(it.next());;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6、查看班长在不在名单上</span></span><br><span class="line">System.out.println(<span class="string">"班长起立---"</span>);</span><br><span class="line"><span class="keyword">if</span>(co.contains(<span class="string">"mk1"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"班长已到"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"班长不在"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试效果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">签到人: mk1</span><br><span class="line">签到人: nmk2</span><br><span class="line">签到人: el</span><br><span class="line">签到人: </span><br><span class="line">签到人: mom</span><br><span class="line">签到人: om</span><br><span class="line">一共有 5人</span><br><span class="line">mk1</span><br><span class="line">nmk2</span><br><span class="line">el</span><br><span class="line">null</span><br><span class="line">mom</span><br><span class="line">om</span><br><span class="line">班长起立---</span><br><span class="line">班长已到</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;字节流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字节输入流InputStream&lt;ul&gt;
&lt;li&gt;缓冲输入流BufferedInputStrea
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>常用类和IO流</title>
    <link href="https://detailmk.github.io/2019/07/12/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8CIO%E6%B5%81/"/>
    <id>https://detailmk.github.io/2019/07/12/常用类和IO流/</id>
    <published>2019-07-12T02:45:15.000Z</published>
    <updated>2019-08-07T09:28:36.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数学类"><a href="#数学类" class="headerlink" title="数学类"></a>数学类</h2><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个事物可能出现的</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul><li>学生类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试学生学习状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEume</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stu s1 = <span class="keyword">new</span> Stu(<span class="string">"mk1"</span>, <span class="number">33</span>,State.lose);</span><br><span class="line">Stu s2 = <span class="keyword">new</span> Stu(<span class="string">"mk2"</span>,<span class="number">95</span>,State.pass);</span><br><span class="line"><span class="keyword">switch</span>(s1.state)&#123;</span><br><span class="line"><span class="keyword">case</span> lose:</span><br><span class="line">System.out.println(<span class="string">"留级"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> pass:</span><br><span class="line">System.out.println(<span class="string">"继续下一阶段"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(s2.state)&#123;</span><br><span class="line"><span class="keyword">case</span> lose:</span><br><span class="line">System.out.println(<span class="string">"留级"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> pass:</span><br><span class="line">System.out.println(<span class="string">"继续下一阶段"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> State&#123;</span><br><span class="line">pass,</span><br><span class="line">lose;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">State state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">(String name, <span class="keyword">int</span> score,State state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">留级</span><br><span class="line">继续下一阶段</span><br></pre></td></tr></table></figure><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><h3 id="测试案例-模拟cmd里dir命令"><a href="#测试案例-模拟cmd里dir命令" class="headerlink" title="测试案例-模拟cmd里dir命令"></a>测试案例-模拟cmd里dir命令</h3><p>基本思路:目录下文件名存入数组遍历出来,再用FIle类型的对象接收打印出文件的最后修改日期.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"Dell/user/mengkai--&gt; "</span>);</span><br><span class="line">s = sc.nextLine();</span><br><span class="line"><span class="keyword">if</span>(s.equals(<span class="string">"dir"</span>))&#123;</span><br><span class="line">File files = <span class="keyword">new</span> File(<span class="string">"D:\\"</span>);</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">File[] fi = files.listFiles();</span><br><span class="line"><span class="keyword">int</span> count1 = <span class="number">0</span>;<span class="comment">//计数器 统计目录</span></span><br><span class="line"><span class="keyword">int</span> count2 = <span class="number">0</span>;<span class="comment">//计数器 统计文件</span></span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fi.length;i++)&#123;</span><br><span class="line">String l=fi[i].toString(); <span class="comment">//获取路径转换成字符串</span></span><br><span class="line">File f2 = <span class="keyword">new</span> File(l);    <span class="comment">//创建File类型变量接收遍历的文件</span></span><br><span class="line"><span class="keyword">boolean</span> d = f2.isDirectory();</span><br><span class="line"><span class="keyword">if</span>(d==<span class="keyword">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>).format(<span class="keyword">new</span> Date(f2.lastModified()))+<span class="string">"   "</span>+<span class="string">"&lt;dir&gt;"</span>+<span class="string">"   "</span>+fi[i]);</span><br><span class="line"><span class="comment">//统计文件数</span></span><br><span class="line">count1++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>).format(<span class="keyword">new</span> Date(f2.lastModified()))+<span class="string">"   "</span>+<span class="string">"     "</span>+<span class="string">"   "</span>+fi[i]);</span><br><span class="line">count2++;</span><br><span class="line">total += f2.getTotalSpace();<span class="comment">//累加文件内存大小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"文件数为: "</span>+count2+<span class="string">"      "</span>+total+<span class="string">"字节"</span>);</span><br><span class="line">System.out.println(<span class="string">"目录数为: "</span>+count1+<span class="string">"      "</span>+files.getFreeSpace()+<span class="string">"可用字节"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"命令行错误,重新输入"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Dell/user/mengkai--&gt; dir</span><br><span class="line">2018年09月14日 14:45:40   &lt;dir&gt;   D:\$RECYCLE.BIN</span><br><span class="line">2019年04月17日 10:38:37   &lt;dir&gt;   D:\.m2</span><br><span class="line">2019年07月10日 16:32:49           D:\11.png</span><br><span class="line">2019年05月02日 09:55:33   &lt;dir&gt;   D:\60.0.3255.70</span><br><span class="line">2019年05月02日 09:55:48   &lt;dir&gt;   D:\60.0.3255.70_0</span><br><span class="line">2019年07月12日 15:20:37           D:\aa.txt</span><br><span class="line">2019年04月22日 18:50:50   &lt;dir&gt;   D:\Assets</span><br><span class="line">2019年06月30日 13:23:08   &lt;dir&gt;   D:\BaiduNetdiskDownload</span><br><span class="line">2019年07月10日 18:55:08   &lt;dir&gt;   D:\CloudMusic</span><br><span class="line">2018年09月15日 12:59:07   &lt;dir&gt;   D:\DriverGenius</span><br><span class="line">2019年05月02日 09:55:48           D:\installation_status.json</span><br><span class="line">2019年04月27日 09:37:13           D:\installer_prefs.json</span><br><span class="line">2019年04月27日 09:37:13           D:\installer_prefs.json.backup</span><br><span class="line">2019年06月28日 20:53:11   &lt;dir&gt;   D:\Java</span><br><span class="line">2019年04月21日 20:26:05           D:\launcher.exe</span><br><span class="line">2019年01月28日 21:51:04           D:\launcher.visualelementsmanifest.xml</span><br><span class="line">2019年05月16日 11:54:55   &lt;dir&gt;   D:\Netease</span><br><span class="line">2019年04月22日 18:50:44           D:\pref_default_overrides</span><br><span class="line">2019年04月27日 21:56:55   &lt;dir&gt;   D:\Program Files</span><br><span class="line">2019年07月11日 22:07:40   &lt;dir&gt;   D:\Program Files (x86)</span><br><span class="line">2019年01月07日 12:33:04   &lt;dir&gt;   D:\qqm</span><br><span class="line">2019年01月28日 21:51:04           D:\Resources.pri</span><br><span class="line"></span><br><span class="line">2019年07月01日 11:08:13   &lt;dir&gt;   D:\下载</span><br><span class="line">2019年04月09日 09:19:24   &lt;dir&gt;   D:\公文系统代码</span><br><span class="line">2019年01月07日 12:33:14   &lt;dir&gt;   D:\新建文件夹</span><br><span class="line">文件数为: 11      3850945646592字节</span><br><span class="line">目录数为: 26      161855741952可用字节</span><br><span class="line">Dell/user/mengkai--&gt;</span><br></pre></td></tr></table></figure><h3 id="测试案例-拷贝文件"><a href="#测试案例-拷贝文件" class="headerlink" title="测试案例-拷贝文件"></a>测试案例-拷贝文件</h3><ul><li>图片类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Picture</span> </span>&#123;</span><br><span class="line">InputStream is;</span><br><span class="line">OutputStream os;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String file1, String file2)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.os = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.is = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.os = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] mm = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>((len=is.read(mm))!=-<span class="number">1</span>)&#123;</span><br><span class="line">os.write(mm, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Picture pic =<span class="keyword">new</span> Picture();</span><br><span class="line">pic.copy(<span class="string">"D:/11.png"</span>, <span class="string">"E:/22.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试案例-通过递归进行移动文件夹"><a href="#测试案例-通过递归进行移动文件夹" class="headerlink" title="测试案例-通过递归进行移动文件夹"></a>测试案例-通过递归进行移动文件夹</h3><p>基本思路:拷贝完源文件之后把源文件删除</p><ul><li>移动文件工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 封装移动目录工具类</span></span><br><span class="line"><span class="comment"> * 静态工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moveutil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveDir</span><span class="params">(String start,String end)</span></span>&#123;</span><br><span class="line">moveDir(<span class="keyword">new</span> File(start),<span class="keyword">new</span> File(end));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveDir</span><span class="params">(File start,File end)</span></span>&#123;</span><br><span class="line"><span class="comment">//建立联系 创建流</span></span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line">OutputStream os = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = <span class="keyword">new</span> FileInputStream(start);</span><br><span class="line">os = <span class="keyword">new</span> FileOutputStream(end);</span><br><span class="line"><span class="comment">//读入写出 用数组装</span></span><br><span class="line"><span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> leng = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((leng=is.read(by))!=-<span class="number">1</span>)&#123;</span><br><span class="line">os.write(by, <span class="number">0</span>, leng);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//刷出</span></span><br><span class="line">os.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类-具体实现移动目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本需求 :将源目录拷贝到目的目录,完成这一操作删除源目录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoveDir1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">moveDir(<span class="string">"D:/aa"</span>,<span class="string">"E:/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件可以拷贝到文件所在路径下,但文件名后面加"-副本"字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveDir</span><span class="params">(String start, String end)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = start.lastIndexOf(<span class="string">"/"</span>);</span><br><span class="line">String str = start.substring(<span class="number">0</span>, i);</span><br><span class="line"><span class="keyword">if</span> (str.equals(end) || (str + <span class="string">"/"</span>).equals(end)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"目录不能移动到目录所在路径下"</span>);</span><br><span class="line">&#125;</span><br><span class="line">moveDir(<span class="keyword">new</span> File(start), <span class="keyword">new</span> File(end));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//目的目录不能移动到源目录的子目录中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveDir</span><span class="params">(File start,File end)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(end.getAbsolutePath().contains(start.getAbsolutePath()))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"目标目录不能移动子目录"</span>);</span><br><span class="line">&#125;</span><br><span class="line">moveDirpo(start,<span class="keyword">new</span> File(end,start.getName()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移动目录具体操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveDirpo</span><span class="params">(File start, File end)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(start.isFile())&#123;</span><br><span class="line">File f=end.getParentFile();</span><br><span class="line"><span class="keyword">if</span>(!f.exists())&#123;</span><br><span class="line">f.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">Moveutil.moveDir(start, end);</span><br><span class="line"><span class="comment">//删除源目录的子目录</span></span><br><span class="line">start.delete();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(start.isDirectory())&#123;</span><br><span class="line">end.mkdirs();</span><br><span class="line">File[] files = start.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File goo:files)&#123;</span><br><span class="line">moveDirpo(goo, <span class="keyword">new</span> File(end,goo.getName()));</span><br><span class="line"><span class="comment">//删除源目录的子目录</span></span><br><span class="line">goo.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除源文件的父目录</span></span><br><span class="line">start.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数学类&quot;&gt;&lt;a href=&quot;#数学类&quot; class=&quot;headerlink&quot; title=&quot;数学类&quot;&gt;&lt;/a&gt;数学类&lt;/h2&gt;&lt;h2 id=&quot;日期类&quot;&gt;&lt;a href=&quot;#日期类&quot; class=&quot;headerlink&quot; title=&quot;日期类&quot;&gt;&lt;/a&gt;日期类&lt;/h
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>常用类和异常</title>
    <link href="https://detailmk.github.io/2019/07/11/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%BC%82%E5%B8%B8-1/"/>
    <id>https://detailmk.github.io/2019/07/11/常用类和异常-1/</id>
    <published>2019-07-11T00:59:30.000Z</published>
    <updated>2019-08-07T09:28:47.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Arrays工具类的使用"><a href="#Arrays工具类的使用" class="headerlink" title="Arrays工具类的使用"></a>Arrays工具类的使用</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="center">方法名</th><th>功能</th></tr></thead><tbody><tr><td align="center">sort()</td><td>对数组排序|Object类型（实现了Comparable接口）|提供了比较器Comparator也可以适用于泛型</td></tr><tr><td align="center">binarySearch()</td><td>通过二分查找法对已排序的数组进行查找</td></tr><tr><td align="center">copyOf()</td><td>数组拷贝</td></tr><tr><td align="center">copyOfRange()</td><td>数组拷贝，指定一定的范围</td></tr><tr><td align="center">equals()</td><td>判断两个数组的每一个对应的元素是否相等</td></tr><tr><td align="center">deepEquals()</td><td>针对一个数组中的元素还是数组的情况</td></tr><tr><td align="center">fill()</td><td>给数组赋值。填充数组之用</td></tr><tr><td align="center">toString()</td><td>打印数组里元素值</td></tr><tr><td align="center">deepToString</td><td>针对多维数组情况</td></tr></tbody></table><h3 id="java自定义类型进行比较"><a href="#java自定义类型进行比较" class="headerlink" title="java自定义类型进行比较"></a>java自定义类型进行比较</h3><ol><li><p>内部比较器</p></li><li><p>外部比较器</p></li></ol><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>案例:将学生成绩分别用内部和外部比较器进行升序,降序排列</p><ul><li>学生类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*根据学生成绩进行升序或者降序排列*/</span></span><br><span class="line"><span class="keyword">package</span> com.mk.obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.score =  score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"[name="</span> + name + <span class="string">", id="</span> + id + <span class="string">", score="</span> + score + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.score-o.score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student[] ss = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">"mk1"</span>, <span class="number">110</span>, <span class="number">96</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"mk2"</span>, <span class="number">111</span>, <span class="number">97</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">"mk3"</span>, <span class="number">112</span>, <span class="number">85</span>);</span><br><span class="line">ss[<span class="number">0</span>] = s1;</span><br><span class="line">ss[<span class="number">1</span>] = s2;</span><br><span class="line">ss[<span class="number">2</span>] = s3;</span><br><span class="line">System.out.println(Arrays.toString(ss));</span><br><span class="line">System.out.println(s1.compareTo(s2));</span><br><span class="line">Arrays.sort(ss);</span><br><span class="line">System.out.println(Arrays.toString(ss));<span class="comment">//升序</span></span><br><span class="line"><span class="comment">/*Arrays.sort(ss,new ComStu());</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(ss));//降序</span></span><br><span class="line"><span class="comment">*/</span>Arrays.sort(ss,(o1,o2)-&gt;o2.getScore()-o1.getScore());</span><br><span class="line">System.out.println(Arrays.toString(ss));<span class="comment">//降序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*class ComStu implements Comparator&lt;Student&gt;&#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public int compare(Student o1, Student o2) &#123;</span></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">return (int) (o2.getScore()-o1.getScore());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[name=mk1, id=110, score=96], [name=mk2, id=111, score=97], [name=mk3, id=112, score=85]]</span><br><span class="line">-1</span><br><span class="line">[[name=mk3, id=112, score=85], [name=mk1, id=110, score=96], [name=mk2, id=111, score=97]]</span><br><span class="line">[[name=mk2, id=111, score=97], [name=mk1, id=110, score=96], [name=mk3, id=112, score=85]]</span><br></pre></td></tr></table></figure><ul><li>测试结论</li></ul><p>内部比较器耦合度高不便于后期维护,使用外部比较器更好.</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><p>编译异常</p></li><li><p>运行异常</p></li></ul><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><ul><li>抛出</li><li>捕获</li></ul><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>如果在程序中出现与现实逻辑不和,比如年龄是负的,分数为负的等情况但在java程序中语法正确不会报错,但这样会出现编译出的程序不够人性化,所以采用自定义异常方式处理,下列程序处理录入学生分数出现不合理的状况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mk.obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stu s1 = <span class="keyword">new</span> Stu();</span><br><span class="line">s1.setName(<span class="string">"mk"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">s1.setScore(-<span class="number">9</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ScoreException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(score + <span class="string">"成绩不正常"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">(String name, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> <span class="keyword">throws</span> ScoreException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> (<span class="keyword">new</span> ScoreException(score));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Stu [name="</span> + name + <span class="string">", score="</span> + score + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.mk.obj.ScoreException: -9成绩不正常</span><br><span class="line">at com.mk.obj.Stu.setScore(Score.java:54)</span><br><span class="line">at com.mk.obj.Score.main(Score.java:8)</span><br></pre></td></tr></table></figure><h2 id="String工具类"><a href="#String工具类" class="headerlink" title="String工具类"></a>String工具类</h2><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>char charAt(int index)</td><td>返回指定索引位置的字符</td></tr><tr><td>String substring(int beginIndex)</td><td>返回指定起始位置至字符串末尾的字符串</td></tr><tr><td>String substring(int beginIndex, int endIndex)</td><td>返回指定起始位置（含）到结束位置（不含）之间的字符串</td></tr><tr><td>int indexOf(String str)</td><td>返回指定字符串的索引位置</td></tr><tr><td>int indexOf(String str, int fromIndex)</td><td>返回从指定索引位置fromIndex开始的str的索引位置,如果没有返回-1</td></tr><tr><td>String replace(CharSequence oldString, CharSequence newString)</td><td>用newString替换字符串中的oldString</td></tr><tr><td>String trim()</td><td>返回一个去除两头空格的新字符串</td></tr><tr><td>String[ ] split(String regex)</td><td>指定正则表达式分隔符，返回一个字符串数组</td></tr><tr><td>String[ ] split(String regex, int limit)</td><td>指定正则表达式分隔符regex和分隔份数limit，返回一个字符串数组</td></tr><tr><td>String toLowerCase()</td><td>转换为小写字母</td></tr><tr><td>String toUpperCase()</td><td>转换为大写字母</td></tr><tr><td>boolean startsWith(String prefix)</td><td>如果字符串以prefix开头返回true，否则返回false</td></tr><tr><td>boolean endsWith(String suffix)</td><td>如果字符串以suffix结尾返回true，否则返回false</td></tr><tr><td>boolean equals(Object other)</td><td>如果字符串与other相等返回true，否则返回false</td></tr><tr><td>boolean equalsIgnoreCase(String other)</td><td>如果字符串与other相等（忽略大小写）返回true，否则返回false</td></tr></tbody></table><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>将基本数据类型封装成对象可以在对象中定义更多的方法去操作</p><p>自动装箱：</p><p>把基本类型转换为包装类类型</p><p>自动拆箱：</p><p>把包装类类型转换为基本类型</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>byte →    Byte</p><p>short    →    Short</p><p>int    →    Integer</p><p>long  →    Long</p><p>float    →    Float</p><p>double    →    Double</p><p>char    →    Character</p><p>boolean →    Boolean</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Arrays工具类的使用&quot;&gt;&lt;a href=&quot;#Arrays工具类的使用&quot; class=&quot;headerlink&quot; title=&quot;Arrays工具类的使用&quot;&gt;&lt;/a&gt;Arrays工具类的使用&lt;/h2&gt;&lt;h3 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; cla
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>Java阶段一知识地图及难点分析</title>
    <link href="https://detailmk.github.io/2019/07/10/java%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%932/"/>
    <id>https://detailmk.github.io/2019/07/10/java阶段总结2/</id>
    <published>2019-07-10T03:00:23.000Z</published>
    <updated>2019-08-07T09:26:26.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//detailmk.github.io/2019/07/10/java阶段总结2/java%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%932%5Cjava%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93.png" alt></p><p><img src="https://i.loli.net/2019/08/04/Zw3OghJYG9lt1LB.png" alt="java阶段总结.png"></p><h4 id="类的顺序"><a href="#类的顺序" class="headerlink" title="类的顺序"></a>类的顺序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--父类的无参构造函数--"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--父类的静态代码块--"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"--父类的非静态代码块--"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入一个main程序后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--Main函数执行--"</span>);</span><br><span class="line">        Father father=<span class="keyword">new</span> Father();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类静态</span><br><span class="line">main</span><br><span class="line">父类非静态</span><br><span class="line">父类无参</span><br></pre></td></tr></table></figure><ul><li>结论<br>静态代码块在main函数之前执行，执行顺序为，静态代码块&gt;非静态代码块&gt;构造函数<br>静态代码块在Main函数执行之前执行。<h4 id="子父类"><a href="#子父类" class="headerlink" title="子父类"></a>子父类</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--子类的静态代码块--"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"--子类的非静态代码块--"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Son()&#123;</span><br><span class="line">        System.out.println(<span class="string">"--子类的无参构造函数--"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--子类的Main函数执行了--"</span>);</span><br><span class="line">        Father father=<span class="keyword">new</span> Father();</span><br><span class="line">        Son son=<span class="keyword">new</span> Son();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">父类静态</span><br><span class="line">子类静态-----&gt;静态先执行</span><br><span class="line">子类main</span><br><span class="line">父类非静态</span><br><span class="line">父类无参------&gt;new father()</span><br><span class="line">父类非静态</span><br><span class="line">父类无参</span><br><span class="line">子类非静态-----&gt;new Son()先执行父类代码块,静态只执行一次,重复调用父类,在调用子类</span><br><span class="line">子类无参</span><br></pre></td></tr></table></figure><ul><li><p>结论<br>1、new一个函数时先加载其父类，从非静态代码块开始进行加载。顺序：父类非静态代码块&gt;父类构造函数&gt;子类非静态代码块&gt;子类构造函数。<br>2、加载一个类时从静态代码块开始，从其父类开始加载。PS：静态变量的定义与静态代码块的执行与其在类中顺序有关，依照从上到下顺序。</p><h4 id="错题演示"><a href="#错题演示" class="headerlink" title="错题演示"></a>错题演示</h4><p>测试块执行顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试静态块 构造块执行顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"主方法"</span>);</span><br><span class="line">A a =<span class="keyword">new</span> A();</span><br><span class="line">B b =<span class="keyword">new</span> B();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是静态块A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"我是构造块A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是构造器A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是静态块B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"我是构造块B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是构造器B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主方法</span><br><span class="line">我是静态块A</span><br><span class="line">我是构造块A</span><br><span class="line">我是构造器A</span><br><span class="line">我是静态块B</span><br><span class="line">我是构造块B</span><br><span class="line">我是构造器B</span><br></pre></td></tr></table></figure></li><li><p>结论<br>在主类中加载主方法实例化其他类时先执行主方法后其他类的静态-&gt;非静态-&gt;构造方法</p></li><li><p>测试在继承状态下块的执行顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloB</span> <span class="keyword">extends</span> <span class="title">HelloA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HelloB</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"HelloB"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"im B class"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"static B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> HelloB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HelloA</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloA"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"im A class"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"static A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static A</span><br><span class="line">static B</span><br><span class="line">im A class</span><br><span class="line">HelloA</span><br><span class="line">im B class</span><br><span class="line">HelloB</span><br></pre></td></tr></table></figure></li></ul><h4 id="测试instanceof"><a href="#测试instanceof" class="headerlink" title="测试instanceof"></a>测试instanceof</h4><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInstanceof</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">A0 a = <span class="keyword">new</span> A1();</span><br><span class="line">A0 a1 = <span class="keyword">new</span> A3();</span><br><span class="line">System.out.println(a <span class="keyword">instanceof</span> Object);</span><br><span class="line">System.out.println(a <span class="keyword">instanceof</span> A0);</span><br><span class="line">System.out.println(a <span class="keyword">instanceof</span> A1);</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">System.out.println(a1 <span class="keyword">instanceof</span> Object);</span><br><span class="line">System.out.println(a1 <span class="keyword">instanceof</span> A0);</span><br><span class="line">System.out.println(a1 <span class="keyword">instanceof</span> A1);</span><br><span class="line">System.out.println(a1 <span class="keyword">instanceof</span> A2);</span><br><span class="line">System.out.println(a1 <span class="keyword">instanceof</span> A3);</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A0</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A1</span> <span class="keyword">extends</span> <span class="title">A0</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span> <span class="keyword">extends</span> <span class="title">A0</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A3</span> <span class="keyword">extends</span> <span class="title">A1</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">--------------------</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><ul><li>结论<br>对象实例instanceof对象对应的当前类或者他的父类<h4 id="多态中调用方法"><a href="#多态中调用方法" class="headerlink" title="多态中调用方法"></a>多态中调用方法</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolyPractice</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//多态  父类的引用指向子类对象</span></span><br><span class="line">A4 a=<span class="keyword">new</span> B1();  <span class="comment">//"B----test()   B----test(int)  A----test(double)</span></span><br><span class="line">a.test(<span class="number">1.0</span>);<span class="comment">// A--double</span></span><br><span class="line">a.test(<span class="number">1</span>);  <span class="comment">// B--int</span></span><br><span class="line">a.test(<span class="string">'1'</span>);<span class="comment">// B--int</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A----test()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A----test(int)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A----test(double)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有新增方法,对父类所有方法进行重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">A4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"C----test()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"C----test(double)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"C----test(int)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> <span class="keyword">extends</span> <span class="title">A4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"B----test()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"B----test(int)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增方法对父类引用不可见</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">char</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"B----test(char)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A----test(double)</span><br><span class="line">B----test(int)</span><br><span class="line">B----test(int)</span><br></pre></td></tr></table></figure><ul><li>结论<br>多态中,首先看父类,之后看子类有没有对父类方法进行重写,子类独有方法在父类引用中不可调用,除非实例化好的对象向下转型才能调用,若子类重写的方法参数列表不匹配,向上自动转型.<h4 id="静态成员变量和成员变量"><a href="#静态成员变量和成员变量" class="headerlink" title="静态成员变量和成员变量"></a>静态成员变量和成员变量</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest2</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StaticTest2 st2 = <span class="keyword">new</span> StaticTest2();</span><br><span class="line">System.out.println(st2.id);</span><br><span class="line">System.out.println(st2.age);</span><br><span class="line"></span><br><span class="line">st2.Change();</span><br><span class="line">System.out.println(st2.id);</span><br><span class="line">System.out.println(st2.id);</span><br><span class="line">System.out.println(st2.age);</span><br><span class="line">st2.Change();</span><br><span class="line">System.out.println(id);</span><br><span class="line">System.out.println(st2.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span><span class="params">()</span></span>&#123;</span><br><span class="line">StaticTest2 st2 = <span class="keyword">new</span> StaticTest2();</span><br><span class="line">st2.age++;</span><br><span class="line">st2.id++;</span><br><span class="line">System.out.println(<span class="string">"in change(): id= "</span>+id+<span class="string">" age="</span>+age);</span><br><span class="line">System.out.println(<span class="string">"in change(): id= "</span>+st2.id+<span class="string">" age="</span>+st2.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">in change(): id= 1 age=0</span><br><span class="line">in change(): id= 1 age=1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">in change(): id= 2 age=0</span><br><span class="line">in change(): id= 2 age=1</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><ul><li>结论<br>静态变量在类中可以对所有对象共享<h4 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h4>栈空间（stack），连续的存储空间，遵循后进先出的原则，用于存放局部变量。<br>堆空间（heap），不连续的空间，用于存放new出的对象，或者说是类的实例。<br>方法区（method），方法区在堆空间内，用于存放①类的代码信息；②静态变量和方法；③常量池（字符串常量等，具有共享机制）。</li></ul><h4 id="静态成员变量和块的综合应用"><a href="#静态成员变量和块的综合应用" class="headerlink" title="静态成员变量和块的综合应用"></a>静态成员变量和块的综合应用</h4><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest02</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">"非静态代码块a="</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">a = <span class="number">6</span>;</span><br><span class="line">System.out.println(<span class="string">"静态代码块a="</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockTest02</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(a);</span><br><span class="line">System.out.println(<span class="string">" , "</span>+a);</span><br><span class="line">System.out.println(<span class="string">" ,无参构造方法a= "</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockTest02</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">" , "</span>+n);</span><br><span class="line">System.out.println(<span class="string">" , "</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">" ,main"</span>);</span><br><span class="line">BlockTest02 bt2 = <span class="keyword">new</span> BlockTest02();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">静态代码块a=6</span><br><span class="line"> ,main</span><br><span class="line">非静态代码块a=10</span><br><span class="line"> , 6</span><br><span class="line"> , 10</span><br><span class="line"> , 10</span><br><span class="line"> ,无参构造方法a= 10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;//detailmk.github.io/2019/07/10/java阶段总结2/java%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%932%5Cjava%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93.
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>面向对象2</title>
    <link href="https://detailmk.github.io/2019/07/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/"/>
    <id>https://detailmk.github.io/2019/07/09/面向对象2/</id>
    <published>2019-07-09T02:30:08.000Z</published>
    <updated>2019-08-07T10:28:56.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="匿名内部类及Lambda表达式的应用"><a href="#匿名内部类及Lambda表达式的应用" class="headerlink" title="匿名内部类及Lambda表达式的应用"></a>匿名内部类及Lambda表达式的应用</h2><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>测试匿名内部类 直接使用接口,不用浪费内存去创建个实现类 但只能用一次</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sport s = <span class="keyword">new</span> Sport()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basketball</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"just do it......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"i can play......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">s.basketball();</span><br><span class="line">s.play();</span><br><span class="line">Learn l =()-&gt;&#123;System.out.println(<span class="string">"study......"</span>);&#125;;</span><br><span class="line">l.read();</span><br><span class="line">Learn1 l1= a -&gt; a;</span><br><span class="line">System.out.println(l1.read1(<span class="number">3</span>));</span><br><span class="line">Learn2 l2 = (a,b)-&gt;&#123;b=a+b;a*=a+b;<span class="keyword">return</span> a;&#125;;</span><br><span class="line">System.out.println(l2.read2(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sport</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basketball</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Learn</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Learn1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read1</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Learn2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试效果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">just do it......</span><br><span class="line">i can play......</span><br><span class="line">study......</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>第一次获取就进行创建对象(线程不安全,效率高)</p><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>类第一次加载就创建对象</p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><ul><li>类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Design</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Design des = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Design</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Design <span class="title">newdes</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(des == <span class="keyword">null</span>)&#123;</span><br><span class="line">des=<span class="keyword">new</span> Design();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Design <span class="title">newdess</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Design.newdes());</span><br><span class="line">System.out.println(Design.newdess());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mk.mode.Design@15db9742</span><br><span class="line">com.mk.mode.Design@15db9742</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>定义功能(接口)</p><p>定义实体类实现功能</p><p>通过工厂进行调用(体现类的多态)</p><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Gun g = factory(<span class="string">"Famas"</span>);</span><br><span class="line">g.emit();</span><br><span class="line">Gun g1 = factory(<span class="string">"Voctor"</span>);</span><br><span class="line">g1.emit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Gun <span class="title">factory</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">Gun g;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"Famas"</span>.equals(name))&#123;</span><br><span class="line">g = <span class="keyword">new</span> Famas();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">g = <span class="keyword">new</span> Voctor();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Gun</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">emit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Famas</span> <span class="keyword">implements</span> <span class="title">Gun</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Famas ok........."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Voctor</span> <span class="keyword">implements</span> <span class="title">Gun</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Voctor ok........"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Famas ok.........</span><br><span class="line">Voctor ok........</span><br></pre></td></tr></table></figure><h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><ul><li>定义功能(接口)</li><li>定义执行这个接口的至少两个具体对象,两人都可以执行,其中一人相当于代理帮忙继续执行.</li></ul><h4 id="Demo-房东找中介帮忙卖房"><a href="#Demo-房东找中介帮忙卖房" class="headerlink" title="Demo(房东找中介帮忙卖房)"></a>Demo(房东找中介帮忙卖房)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东卖房 中介代理</span></span><br><span class="line"><span class="keyword">package</span> com.mk.mode;</span><br><span class="line"><span class="comment">//主方法交易</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseTrade</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Landlord l1 = <span class="keyword">new</span> Landlord(<span class="string">"mk"</span>);</span><br><span class="line">Agent a1 = <span class="keyword">new</span> Agent(<span class="string">"MR.Wang"</span>, l1);</span><br><span class="line">a1.sell();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SellHouse</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Landlord</span> <span class="keyword">implements</span> <span class="title">SellHouse</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Landlord</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"卖房子中..........."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中介</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">SellHouse</span></span>&#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line">Landlord landlord;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(String name,Landlord landlord)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.landlord = landlord;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"发布卖房信息............."</span>);</span><br><span class="line">landlord.sell();</span><br><span class="line">System.out.println(<span class="string">"已卖出.................."</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">发布卖房信息.............</span><br><span class="line">卖房子中...........</span><br><span class="line">已卖出..................</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>存储多个同种类型的数据</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>[1] 数组是个容器,存储相同数据类型数据</p><p>[2] 数组长度是固定的,长度确定就不能改变</p><p>[3] 数组的数据是有顺序的,每个索引固定一个数据</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>数据类型[] 数组名=new 数据类型[]{值1,值2,指…};</p><p>数据类型[] 数组名={值1,值2,指…}; –推荐使用</p><h3 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] a3 = &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] a4 = &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] a5 = &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m:a1)&#123;</span><br><span class="line">System.out.print(<span class="string">" "</span>+m);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">String[] a2 = <span class="keyword">new</span> String[]&#123;<span class="string">"mk"</span>,<span class="string">"ef"</span>,<span class="string">"efefv"</span>,<span class="string">"grg"</span>,<span class="string">"rgr"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(String m:a2)&#123;</span><br><span class="line">System.out.print(<span class="string">" "</span>+m);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//获取最大值最小值</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a3.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a3[i]&gt;a3[i+<span class="number">1</span>]&amp;&amp;i+<span class="number">1</span>&lt;=a3.length-<span class="number">1</span>)&#123;</span><br><span class="line">max = a3[i];</span><br><span class="line">a3[i+<span class="number">1</span>] = a3[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"max: "</span>+max);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a4.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a4[i]&lt;a4[i+<span class="number">1</span>]&amp;&amp;i+<span class="number">1</span>&lt;=a4.length-<span class="number">1</span>)&#123;</span><br><span class="line">min = a4[i];</span><br><span class="line">a4[i+<span class="number">1</span>] = a4[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"min: "</span>+min);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a5.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">System.out.print(a5[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7 2 5 6 9</span><br><span class="line"> mk ef efefv grg rgr</span><br><span class="line">max: 9</span><br><span class="line">min: 3</span><br><span class="line">863469</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><p>数据类型 … 变量名</p><ul><li>测试可变参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pre</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> ...i)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = a+b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m:i)&#123;</span><br><span class="line">sum += m;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;匿名内部类及Lambda表达式的应用&quot;&gt;&lt;a href=&quot;#匿名内部类及Lambda表达式的应用&quot; class=&quot;headerlink&quot; title=&quot;匿名内部类及Lambda表达式的应用&quot;&gt;&lt;/a&gt;匿名内部类及Lambda表达式的应用&lt;/h2&gt;&lt;h4 id=&quot;特
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://detailmk.github.io/2019/07/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://detailmk.github.io/2019/07/08/面向对象/</id>
    <published>2019-07-08T02:01:11.000Z</published>
    <updated>2019-08-07T10:28:48.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个事物多种执行方式(人在不同环境展现不同一面)</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>父类引用指向子类对象</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li>存在继承关系</li><li>子类对父类方法的重写</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>成员属性</p><p>编译看父类,运行看父类</p></li><li><p>成员方法</p><p> 编译看父类,运行看子类</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><ul><li>人类 学生继承人类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhyDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">String name = <span class="string">"人类"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rest</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"休息"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">String name = <span class="string">"学生"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rest</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"抠脚"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPhy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person s = <span class="keyword">new</span> Stu();</span><br><span class="line">s.rest();</span><br><span class="line">System.out.println(<span class="string">"--&gt;"</span>+s.name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">抠脚</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h3><ol><li>判断是否在同一继承链,用instanceof判断,父类引用instanceof子类.</li><li>如果在同一继承链,就将父类类型转成子类类型,调用子类的独有方法.</li></ol><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>实例instanceof对应的类或者父类</p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>可以调用子类独有的父类没有的方法</p><ul><li><p>测试转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPhy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person s = <span class="keyword">new</span> Stu();</span><br><span class="line">s.rest();</span><br><span class="line">System.out.println(<span class="string">"--&gt;"</span>+s.name);</span><br><span class="line"><span class="keyword">if</span>(s <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">Stu s1 = (Stu)s;</span><br><span class="line">s1.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">抠脚</span><br><span class="line">--&gt;人类</span><br><span class="line">打球</span><br></pre></td></tr></table></figure><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><h4 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h4><p>当功能相同时,不同类具体执行方式不同(同样在一个公司,大家都要工作,但工作方式不同,有做保安的,有做前台的………..)</p><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><ul><li>公司类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guard</span> <span class="keyword">extends</span> <span class="title">Company</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"看门......."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前台类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeHead</span> <span class="keyword">extends</span> <span class="title">Company</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"咨询......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serectary</span> <span class="keyword">extends</span> <span class="title">BeforeHead</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"沟通......."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"整理文档........"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompany</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Company g = <span class="keyword">new</span> Guard();</span><br><span class="line">g.work();</span><br><span class="line">BeforeHead b = <span class="keyword">new</span> Serectary(); </span><br><span class="line">b.talk();</span><br><span class="line">b.finish();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">看门.......</span><br><span class="line">沟通.......</span><br><span class="line">整理文档........</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>类具有哪些功能,但不描述具体实现</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>定义接口,执行他就要用类去implements(实现)</p><p>里面抽象方法必须重写</p><p>接口的多继承,可以将功能整合在一起</p><p>注意:尽量使每个接口里的功能不同</p><h4 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h4><p>实现不同部件的不同执行方式</p><ul><li>usb3类(提供接口)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Usb3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Xboxone类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Xboxone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开机....."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useXbox</span><span class="params">(Usb3 u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u!=<span class="keyword">null</span>)&#123;</span><br><span class="line">u.start();</span><br><span class="line">u.end();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"usb设备无法使用"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关机....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>handle类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handle</span> <span class="keyword">implements</span> <span class="title">Usb3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"开始使用手柄......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"结束使用手柄......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BodyFeeling类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyFeeling</span> <span class="keyword">implements</span> <span class="title">Usb3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"开始使用体感......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"结束使用体感......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Xboxone x = <span class="keyword">new</span> Xboxone();</span><br><span class="line">Usb3 u1;</span><br><span class="line">u1 = <span class="keyword">new</span> Handle();</span><br><span class="line">Usb3 u2;</span><br><span class="line">u2 = <span class="keyword">new</span> BodyFeeling();</span><br><span class="line">x.open();</span><br><span class="line">x.useXbox(u1);</span><br><span class="line">x.useXbox(u2);</span><br><span class="line">x.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开机.....</span><br><span class="line">开始使用手柄......</span><br><span class="line">结束使用手柄......</span><br><span class="line">开始使用体感......</span><br><span class="line">结束使用体感......</span><br><span class="line">关机.....</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;一个事
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>封装 继承</title>
    <link href="https://detailmk.github.io/2019/07/07/%E5%B0%81%E8%A3%85-%E7%BB%A7%E6%89%BF/"/>
    <id>https://detailmk.github.io/2019/07/07/封装-继承/</id>
    <published>2019-07-07T03:12:53.000Z</published>
    <updated>2019-08-07T09:28:21.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>将类的一些信息私有封装在类中,不准外部来访问,但提供方法可以实现对私有信息进行操作和访问.</p><p>好比现实生活中玩游戏,我们不需要知道游戏里角色在内部怎么设计为什么会动,只要知道怎么按键怎么玩就行.</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>通过提供的方法访问就行</p><p>将类中的属性 方法细节封装起来方便修改和维护(如果哪天一个按键不好使直接反馈给开发者处理下就好)</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>管理Java文件</li><li>解决同名文件冲突</li></ul><h3 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h3><table><thead><tr><th align="left">访问修饰符</th><th align="center">本类</th><th align="center">同包</th><th align="center">子类</th><th align="center">其它</th></tr></thead><tbody><tr><td align="left">private</td><td align="center">T</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">default</td><td align="center">T</td><td align="center">T</td><td align="center"></td><td align="center"></td></tr><tr><td align="left">protected</td><td align="center">T</td><td align="center">T</td><td align="center">T</td><td align="center"></td></tr><tr><td align="left">public</td><td align="center">T</td><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr></tbody></table><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p> 子类一旦继承父类,就自动拥有父类的内容+子类的扩展</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>子类一旦继承父类,就能够使用父类中的内容<br>子类可以定义自己独有的内容,扩展父类的功能<br>java中类只能单继承,可以多实现</p><p>延续+扩展</p><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><h4 id="与重载的区别"><a href="#与重载的区别" class="headerlink" title="与重载的区别"></a>与重载的区别</h4><ul><li>1.不同的类</li><li>2.继承关系|实现</li><li>3.方法签名相同(方法名+参数列表)</li></ul><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>== :方法签名完全相同</p><p>&le; :返回值类型如果是基本数据类型必须相等,如果是引用数据类型,子类&lt;=父类</p><p>&ge;: 限修饰符  子类&gt;=父类</p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>指代父类对象</p><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li><p>super使用在构造器的首行,调用父类的某个构造器</p><ul><li>super(参数列表)</li><li>使用在首行</li><li>默认在子类构造器的首行会调用父类空构造,如果显示定义super(参数),不会再默认调用父类空构造了</li><li>需求:当创建父类对象时,需要使用父类中的其他构造器,通过super(参数)显示定义调用哪一个,否则默认调用空构造</li><li>注意:this和super不能同时存在与构造器的首行调用构造器,除了显示定义this(),隐式调用super(),仅仅调用父类空构造</li></ul></li></ul><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>区分父类和子类同名问题</p><p>如果存在子父类中成员同名问题,默认调用子类的,就近原则<br>如果不存在同名,默认调用父类,相当于省略了super.</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>this和super都不能使用在static内容中</li><li>创建对象:先父类后子类(默认创建的父类对象在子类的内存空间中,外部无权使用默认创建的在子类内存中的父类对象,如果需要使用父类对象,自己手动创建父类对象)</li></ul><h3 id="Object类中方法"><a href="#Object类中方法" class="headerlink" title="Object类中方法"></a>Object类中方法</h3><h4 id="equal"><a href="#equal" class="headerlink" title="equal()"></a>equal()</h4><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h2&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;将类的
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>类与对象2</title>
    <link href="https://detailmk.github.io/2019/07/05/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A12/"/>
    <id>https://detailmk.github.io/2019/07/05/类与对象2/</id>
    <published>2019-07-05T12:51:34.000Z</published>
    <updated>2019-08-07T10:28:28.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类与对象2"><a href="#类与对象2" class="headerlink" title="类与对象2"></a>类与对象2</h1><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>this指代当前对象</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>this可以调用当前类中的一切,this就像钥匙,可以开类这个房子任何的房间,并从里面拿东西处理.</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>调用成员变量,解决成员属性和局部属性名字冲突的问题</p><p>调用成员方法</p><p>调用重载的构造方法</p><ul><li>类House</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**房间类 属性 房子名 房间名 物品</span></span><br><span class="line"><span class="comment">方法 进入房间 拿物品</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">String houseName;</span><br><span class="line">String roomName;</span><br><span class="line">String things;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">House</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我进入房子了...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">House</span><span class="params">(String houseName)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line"><span class="keyword">this</span>.houseName = houseName;</span><br><span class="line">System.out.println(<span class="string">"进入**"</span>+houseName+<span class="string">"**房子中....."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterh</span><span class="params">(String roomName)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我进入--"</span>+roomName+<span class="string">"--房间中....."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeThings</span><span class="params">(String things,String roomName)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.enterh(roomName);</span><br><span class="line">System.out.println(<span class="string">"我拿走--"</span>+roomName+<span class="string">"--房间里的++"</span>+things);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHouse</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">House house = <span class="keyword">new</span> House(<span class="string">"荣乐公寓"</span>);</span><br><span class="line">house.takeThings(<span class="string">"巧克力"</span>, <span class="string">"1单元201室"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我进入房子了....</span><br><span class="line">进入**荣乐公寓**房子中.....</span><br><span class="line">我进入--1单元201室--房间中.....</span><br><span class="line">我拿走--1单元201室--房间里的++巧克力</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>this在调用构造器时必须在首行调.</p></li><li><p>static修饰的内容禁止使用this.</p><p>(这种行为相当于在公共场所把公共垃圾桶拿回家)</p></li></ul></li></ul><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>静态内容</p><p>在类中所有对象都可以访问,就像公园,所有市民都可以进去散步.</p><h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3><p>static只修饰方法和属性 不存在修饰类和方法内的局部变量</p><p>静态成员跟着类加载,类被销毁,那么静态内容也就被回收</p><p>(学校破产了,桌椅被回收一样道理)</p><p>被调用方式和非静态成员被调用的区别:static修饰的内容,同类里的对象可以直接调用,类也可以调用;非静态成员需要实例化对象才能去调用.</p><h3 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li><p>类名.方法名([参数列表]);</p></li><li><p>类名.属性名;</p></li><li><p>对象.方法名字([参数列表]);</p></li><li><p>对象.属性名;</p></li></ul><ul><li>教室类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设置班级类 属性  静态变量 座椅数</span></span><br><span class="line"><span class="comment"> * 方法:设置桌椅数 获取桌椅数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classdo</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> desknum=<span class="number">40</span>;</span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDesknum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> desknum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDesknum</span><span class="params">(<span class="keyword">int</span> desknum)</span> </span>&#123;</span><br><span class="line">Classdo.desknum = desknum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试教室桌椅类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Classdo cd1 = <span class="keyword">new</span> Classdo();</span><br><span class="line">cd1.setDesknum(<span class="number">45</span>);</span><br><span class="line">Classdo cd2 = <span class="keyword">new</span> Classdo();</span><br><span class="line">cd2.setDesknum(<span class="number">46</span>);</span><br><span class="line">System.out.println(<span class="string">"教室桌椅数比对--"</span>+cd1.getDesknum()+<span class="string">" vs "</span>+cd2.getDesknum());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">教室桌椅数比对--46 vs 46</span><br></pre></td></tr></table></figure><h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>{}形成代码块</p><p>方法内的代码块</p><p>类里面的构造代码块</p><p>static+构造代码块—–静态代码块</p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>1 不管产生多少实例化对象,静态代码块只执行一次</p><p>2 构造代码块跟随new()一起调用</p><p>3 普通代码块跟随方法执行</p><ul><li><p>人类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试静态代码块、实例化代码块和构造函数的执行顺序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//静态变量初始化</span></span><br><span class="line">String name;<span class="comment">//初始化为null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(num + <span class="string">":构造函数初始化"</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name; <span class="comment">//将name引用指向传入参数</span></span><br><span class="line">num++; <span class="comment">//构造函数执行结束num值+1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例初始化块</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(num + <span class="string">":实例初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(num + <span class="string">":静态初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">People people1 = <span class="keyword">new</span> People(<span class="string">"monkey"</span>);</span><br><span class="line">People people2 = <span class="keyword">new</span> People(<span class="string">"beer"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0:静态初始化块</span><br><span class="line">0:实例初始化块</span><br><span class="line">0:构造函数初始化</span><br><span class="line">1:实例初始化块</span><br><span class="line">1:构造函数初始化</span><br></pre></td></tr></table></figure><p>便于理解:</p><p>用new创建并初始化对象步骤：</p><ul><li>给对象的实例变量分配内存空间，默认初始化成员变量；</li><li>成员变量声明时的初始化；</li><li>初始化块初始化（又称为构造代码块或非静态代码块）；</li><li>构造方法初始化</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类与对象2&quot;&gt;&lt;a href=&quot;#类与对象2&quot; class=&quot;headerlink&quot; title=&quot;类与对象2&quot;&gt;&lt;/a&gt;类与对象2&lt;/h1&gt;&lt;h2 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>类与对象</title>
    <link href="https://detailmk.github.io/2019/07/04/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <id>https://detailmk.github.io/2019/07/04/类与对象/</id>
    <published>2019-07-04T10:25:58.000Z</published>
    <updated>2019-08-07T10:28:24.315Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/08/04/OSC7j3YRIr5Fw9D.png" alt="类与对象.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/04/OSC7j3YRIr5Fw9D.png&quot; alt=&quot;类与对象.png&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>Java初识</title>
    <link href="https://detailmk.github.io/2019/07/03/Java%E5%88%9D%E8%AF%86/"/>
    <id>https://detailmk.github.io/2019/07/03/Java初识/</id>
    <published>2019-07-03T03:43:10.000Z</published>
    <updated>2019-08-07T09:26:14.390Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//detailmk.github.io/2019/07/03/Java初识/Java%E5%88%9D%E8%AF%86%5CJava%E5%88%9D%E8%AF%86.png" alt></p><p><img src="https://i.loli.net/2019/08/04/pzDuvVetKfFG7ow.png" alt="Java初识.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;//detailmk.github.io/2019/07/03/Java初识/Java%E5%88%9D%E8%AF%86%5CJava%E5%88%9D%E8%AF%86.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.lol
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>学习规划</title>
    <link href="https://detailmk.github.io/2019/07/02/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    <id>https://detailmk.github.io/2019/07/02/学习规划/</id>
    <published>2019-07-02T15:39:24.000Z</published>
    <updated>2019-08-07T09:28:12.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java百日规划"><a href="#Java百日规划" class="headerlink" title="Java百日规划"></a>Java百日规划</h1><p>[TOC]</p><div style="page-break-after: always;"></div> ## 引言<blockquote><p>Talk is cheap. Show me the code.<br>空谈是不值钱的。给我看你的代码就好。</p></blockquote><blockquote><p>Those that can, do. Those that can’t, complain.<br>有能力的人一直在干活，没能力的人一直在抱怨。</p></blockquote><p><img src="https://i.loli.net/2019/08/04/S8ZGwbL4HoVcs5O.jpg" alt="mmexport1561816113505.jpg"></p><div style="page-break-after: always;"></div> ### 失败的经历<p>​         2018年国庆后,看到舍友陆陆续续找到工作拿到offer,我开始慌了,因为我从在这学校报名的第一天睡到现在啥都不会,除了莫名其妙地对离散数学感兴趣,也是学校里截止到那时考得分数自我感觉还好的一门课,然而对找工作并没有多大作用.后来听舍友建议复习软件测试,数据库和Linux这三门课草草写完简历准备找工作,四级没过425,无项目经验,无扎实的基础,计算机基础知识狗屁不通,学校又没有像样的学生履历.结果:</p><ul><li><p>软通动力笔试过 技术面挂</p></li><li><p>擎天科技初试,复试过,最后给我发给猪狗不如的流氓offer</p></li><li><p>鼎捷电话面直接挂</p></li><li><p>浙数文化笔试挂</p></li><li><p>思克奇面试挂</p></li><li><p>小视科技电话面挂</p></li><li><p>宝兰德初试挂</p></li><li><p>中兴技术面看我太菜最后不问了给我上计算机网络课</p></li><li><p>华宇宣讲会面完单子技术面填了”不录取”上交</p></li></ul><div align="center"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-222701__01__01.jpg" height="330" width="190"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-222706__01__01.jpg" height="330" width="190"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-222737__01.jpg" height="330" width="190"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-223012__01.jpg" height="330" width="190"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-222333__01__01__01.jpg" height="330" width="190"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-222347__01.jpg" height="330" width="190"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-222359__01__01.jpg" height="330" width="190"><img src="//detailmk.github.io/2019/07/02/学习规划/Screenshot_20190702-222655__01.jpg" height="330" width="190"></div>---------------------<p>希望去年失败的校招经历能带给我2019年好运.</p><div style="page-break-after: always;"></div> ### 学习规划<h4 id="年计划"><a href="#年计划" class="headerlink" title="年计划"></a>年计划</h4><ul><li><input disabled type="checkbox"> <p>Javase</p></li><li><input disabled type="checkbox"> <p>Javaweb</p></li><li><input disabled type="checkbox"> <p>J2EE</p></li><li><input disabled type="checkbox"> <p>SSM</p></li><li><input disabled type="checkbox"> <p>商城项目</p></li><li><input disabled type="checkbox"> <p>找工作</p><hr><h4 id="日计划"><a href="#日计划" class="headerlink" title="日计划"></a>日计划</h4><ul><li><input disabled type="checkbox"> <p>回顾前天知识点 梳理清脉络就行</p></li><li><input disabled type="checkbox"> <p>整理课上知识点 难点记录关注</p></li><li><input disabled type="checkbox"> <p>整理白天记录的笔记 xmind图联系起来</p></li><li><input disabled type="checkbox"> <p>整理昨天错题</p></li><li><input disabled type="checkbox"> <p>预习明天内容 pdf上的代码敲一遍 难点记录等待老师上课讲解</p></li></ul></li></ul><table><thead><tr><th>要求</th></tr></thead><tbody><tr><td>时刻保证思维导图更新(知识点及时联系)</td></tr><tr><td>一知识点—-&gt;一案例</td></tr><tr><td>拷贝课上案例,自己编,时刻拷问灵魂</td></tr><tr><td>如果代码敲出来,知道这个知识点是什么 ,有什么好处,和其它方式相 比突出优势是什么解决这些可以continue.</td></tr></tbody></table><p>​    </p><p><img src="https://i.loli.net/2019/08/04/zSqkZxBUrCcDgFT.png" alt="Java学习规划.png"></p><div style="page-break-after: always;"></div> ### 结句<p>无法补救过去,仍有明天.明天还未发生,不要相信任何预言,不放弃任何尝试,因为未来有无限可能.</p><blockquote><p>I am a slow walker, but I never walk backwards.</p><p>​                                                                —————Abraham Lincoln</p></blockquote><p><img src="https://i.loli.net/2019/08/04/ZqUYQTFcjIxyblV.jpg" alt="img-f4e6e92aad15ec0f0a328e6be993e7a7.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java百日规划&quot;&gt;&lt;a href=&quot;#Java百日规划&quot; class=&quot;headerlink&quot; title=&quot;Java百日规划&quot;&gt;&lt;/a&gt;Java百日规划&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;div style=&quot;page-break-after: always
      
    
    </summary>
    
      <category term="规划" scheme="https://detailmk.github.io/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="mind" scheme="https://detailmk.github.io/tags/mind/"/>
    
  </entry>
  
  <entry>
    <title>循环 方法</title>
    <link href="https://detailmk.github.io/2019/07/02/%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95/"/>
    <id>https://detailmk.github.io/2019/07/02/循环-方法/</id>
    <published>2019-07-02T15:05:54.000Z</published>
    <updated>2019-08-07T09:28:57.512Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/08/04/9wERoeI8uBfKlCN.png" alt="循环 方法.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/04/9wERoeI8uBfKlCN.png&quot; alt=&quot;循环 方法.png&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>运算符 循环</title>
    <link href="https://detailmk.github.io/2019/07/01/%E8%BF%90%E7%AE%97%E7%AC%A6-%E5%BE%AA%E7%8E%AF/"/>
    <id>https://detailmk.github.io/2019/07/01/运算符-循环/</id>
    <published>2019-07-01T14:36:03.000Z</published>
    <updated>2019-08-07T10:28:33.929Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/08/04/XPHIo5736Zfsqr8.png" alt="运算符 循环.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/04/XPHIo5736Zfsqr8.png&quot; alt=&quot;运算符 循环.png&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>注释 标识符 变量</title>
    <link href="https://detailmk.github.io/2019/06/30/%E6%B3%A8%E9%87%8A%20%E6%A0%87%E8%AF%86%E7%AC%A6%20%E5%8F%98%E9%87%8F/"/>
    <id>https://detailmk.github.io/2019/06/30/注释 标识符 变量/</id>
    <published>2019-06-30T15:22:15.000Z</published>
    <updated>2019-08-07T10:28:10.693Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注释:</strong></p><p>//单行注释</p><p>/<em>多行注释</em>/</p><p>/<em>*文档注释</em>/     </p><p>​        解释说明的文字</p><p>​    作用:</p><p>​        1.对你的代码进行解释说明</p><p>​        2.便于后期维护</p><p>​    注意:</p><p>​        注释的内容不会被编译</p><p>​        如果出现乱码的问题–&gt;修改文件的编码格式为gbk(ansi)</p><p>​    </p><p>​    分类:</p><p>​    单行注释:</p><p>​        作用域: 作用于当前行</p><p>​        嵌套: 可以嵌套单行注释,不可以嵌套多行注释和文档注释</p><p>​        颜色: 绿色</p><p>​        位置: 行的上面,或者行尾</p><p>​    多行注释:</p><p>​        作用域:多行内有效</p><p>​        嵌套:  可以嵌套单行注释,不可以嵌套多行注释和文档注释</p><p>​        颜色: 绿色</p><p>​        位置: 类的上面或者方法的上面</p><p>​    文档注释:</p><p>​        作用域:多行内有效</p><p>​        嵌套: 可以嵌套单行注释,不可以嵌套多行注释和文档注释</p><p>​        颜色: 蓝色</p><p>​        位置: 类的上面或者方法的上面</p><p>​        </p><p>​    文档注释可以存在于类的api文档中</p><p><strong>标识符:</strong></p><p>​    java中一切起名字的地方的名字都是标识符</p><p>​        </p><p>​    标识符的命名规则</p><p>​            1.只能由数字,字母,下划线,美元符号$任意组合而成,但是数字不能开头</p><p>​            2.标识符是严格区分大小写</p><p>​            3.关键字不能作为标识符使用</p><p>​            </p><p>​    关键字:再java中有一些具有自己的使用方式|使用途径|作用,这些词就是关键字  都是小写|工具中            都有特殊颜色</p><p>​    保留字:java中有一些词将来有可能有自己使用用途或特殊含义,这些词就是保留字 goto const</p><p>​            一般再说关键字时候也包含保留字</p><p>​            </p><p>​    </p><p>​    标识符的命名规范</p><p>​        1.见名知意</p><p>​        2.驼峰命名</p><p>​            包: 全部小写 shangxuetang</p><p>​                多级包:每个级别之间使用.进行分隔 shang.xue.tang</p><p>​            类|接口:  每个单词首字母大写 ShangXueTang</p><p>​            方法|变量: 第一个单词全部小写,第二个单词开始首字母大写 shangXueTang</p><p>​            常量: 全部大写  SHANGXUETANG</p><p><strong>变量</strong></p><p>变量:再程序执行过程中,其值可以发生改变的量</p><p>​          在内存中开辟一块空间,存储指定类型的数据</p><p>​          </p><p>​    java是一个强类型的语言 :声明变量的时候就要先确定类型  </p><p>​        语法:</p><p>​            1.声明的同时赋值</p><p>​              数据类型 变量名 = 赋值;</p><p>​              </p><p>​              常用的数据类型: int整数  double小数  String字符串”” boolean布尔类型  char字符型’’</p><p>​              </p><p>​            2.先声明 后赋值</p><p>​              数据类型 变量名;  –声明</p><p>​              变量名=赋值;      –赋值</p><p>​             </p><p>​            3.同时声明多个变量</p><p>​                =是java中唯一一个自右向左运算的符号</p><p>​                </p><p>​            变量关注的点:</p><p>​                1.数据类型 </p><p>​                2.变量名(标识符的规则|规范)</p><p>​                3.值</p><p>​                4.作用域 {}</p><p>​            </p><p>​            使用变量时需要注意的问题(1.输出 2.赋值 3.运算):</p><p>​                1.变量必须已声明</p><p>​                2.变量必须已赋值</p><p>​            </p><p>​            变量的分类:</p><p>​                成员变量|实例变量 :只声明不赋值存在默认值</p><p>​                    int-&gt;0  double-&gt;0.0  字符串-&gt;null char-&gt;’ ‘  boolean-&gt;false</p><p>​                    类中方法外|语句块外定义的变量</p><p>​                局部变量: 使用前必须声明并且赋值</p><p>​                    方法中语句块中定义的变量就是局部变量</p><p> <strong>常量:</strong></p><p>​        在程序运行过程中其值不能发生改变的量</p><p>​        </p><p>​    分类:</p><p>​        1.字面值常量 </p><p>​            整数常量:  1  123   -7  </p><p>​            小数常量: 0.34  -0.5  3.4</p><p>​            布尔常量: false  true</p><p>​            字符常量: ‘a’  ‘1’  ‘好’  ‘~’</p><p>​            字符串常量: “abc”  “哈哈”  “123”</p><p>​        2.自定义常量</p><p>​            被final修饰的变量为常量</p><p><strong>数据类型</strong></p><p>​        <strong>基本数据类型</strong>  四类八种</p><p>​        计算机中基本存储单位: 字节  1byte =8bit</p><p>​            </p><p>​    整型</p><p>​    表示形式                 表示名称                    范围                        大小</p><p>​     byte                字节型                [-128,127]            1字节    8bit</p><p>​    short                短整型                [-32768,32767] +-3万    2字节    16bit    </p><p>​        int                        整型                       +-21亿                4字节       32位    </p><p>​    long                       长整型                 非常大                8字节</p><p>​                  </p><p> 整数字面常量值默认是int类型的,如果给byte,short赋值,只要在其范围内的字面常量值都能成功赋值</p><p>给long赋值,需要在数据的后面添加l/L,推荐使用L</p><p>​            </p><p>​            浮点型</p><p>​                表示形式            表示名称            大小            精度</p><p>​                float                单精度            4个字节        小数点后7位左右</p><p>​                double            双精度            8个字节        小数点后15为左右</p><p>​                </p><p>​                小数类型会有精度不准确的问题,参与运算可能会失真  BigDecimal</p><p>​                小数的字面常量值默认是double类型的,如果给float赋值,数据后面添加f/F</p><p>​            </p><p>​            字符型</p><p>​                表示形式            表示名称            范围                大小</p><p>​                 char            字符型            [0,65535]            2个字节 </p><p>​                    字符型的表示形式:</p><p>​                                1. ‘’中给单个字符  ‘1’ ‘, ‘ ‘</p><p>​                                2. 0~65535  根据Unicode字符集进行确认  去 ascii</p><p>​            </p><p>​                    当字符型参与运算的时候,先转为10进制的数再去参与运算</p><p>​            布尔型</p><p>​                boolean  true|false   1位</p><p>​        引用数据类型: 类 接口 数组</p><p><strong>数值型的表示形式</strong>:  满几进一</p><p>​        整型:</p><p>​            二进制: 是0,1组成    0b开头表示二进制</p><p>​            八进制: 是0…7之间的数组成    以0开头的数表示八进制</p><p>​            十进制:  默认进制</p><p>​            十六进制: 由0<del>9,a</del>f(大小写都可以)之间组成  以ox开头表示十六进制</p><p>​            </p><p>​            其他进制转为十进制:从右往左计算;每一位数的值*进制数(次方从开始,以此加1) 结果就是十进制的值</p><p>​            十进制转为其他进制: 十进制的数一致除以要转的进制数 求余数,从下往上看</p><p>​        </p><p>​        浮点数:</p><p>​            1) 0.5-&gt;.5  z整数位数是0的时候,0可以省略</p><p>​            2) 科学计数法   e-&gt;10    1.23e2==&gt;1.23*10^2  (只能用来表示浮点数)</p><p>​                                     1.23e-2==&gt;1.23/10^2</p><p><strong>数据类型转换:</strong></p><p>​        1.boolean不参与类型转换</p><p>​        2.自动类型转换|提升</p><p>​            从小范围类型的数据-&gt;大范围类型的数据</p><p>​            </p><p>​            多个类型的值参与运算,最终结果的数据类型默认自动提升为最大的参与运算的数据的类型</p><p>​            多个数据的类型,如果只有byte,short,char任意组合,最终的结果会自动提升成为int</p><p>​            byte,short,char赋值,只要是在其范围内的常量值都可以成功赋值</p><p>​            </p><p>​        </p><p>​        3.强制类型转换 ,强制类型转换有可能会损失精度</p><p>​            小范围数据类型 变量名 = (小范围数据类型)大范围类型的数据;   </p><p>​             </p><p>​        </p><p>​        byte -&gt; short-&gt; int -&gt; long-&gt; float -&gt;double</p><p><strong>转义字符</strong></p><p>​        使用转义字符让一些具有特殊含义的字符表示其本身</p><p>​        转义字符从\开始  +要转义的字符</p><p>​        &#39;</p><p>​        &quot;</p><p>​        \</p><p>​        </p><p>​        \t 制表符 : 一个制表符代表8个空格 一个汉字占2个空格,一个字母占1个空格</p><p>​            如果制表符位置前面的内容满足制表符的整数倍,重开一个制表符位,如果不满,就不全一整个制表符位</p><p>​        \b 退格 光标回删一个</p><p>​        \n 换行 光标从这一行的行尾变为下一行的行首</p><p>​        \r 回到行首 </p><p><strong>运算符</strong></p><p>​        </p><p>​        算术运算符</p><p>​        赋值运算符</p><p>​        比较运算符</p><p>​        逻辑运算符</p><p>​        条件运算符</p><p>​        位运算符 了解</p><p>​        </p><p>​         操作数: 运算符左右两边的数就是操作数  </p><p>​         表达式: 运算符连接左右两边的操作数叫做表达式</p><p>​         语句: ;代表一个语句的结束</p><p>​         </p><p>​         一元运算符|单目运算符:操作数只有一个的运算符  ++ –</p><p>​         二元运算符|双目运算符:操作有两个  + - * /</p><p>​         三元运算符|三目运算符:条件运算符</p><p>​         </p><p>算数运算符:</p><p>​            + - * / % ++ –</p><p>​            +:</p><p>​                1) 正号(省略)</p><p>​                2)加法运算</p><p>​                3)字符串的连接符使用 : 当+左右两边只要有字符串的出现,那么就作为连接符使用,会把拼接为一整个字符串</p><p>​            <strong>++ –</strong></p><p>​            a++==&gt;a=a+1;</p><p>​            ++a==&gt;a=a+1;</p><p>​            操作自己:++/–只影响自己的值,不影响其他值</p><p>​                ++操作数的前面还是后面结果都是自身+1</p><p>​                –操作数的前面还是后面结果都是自身-1</p><p>​            </p><p>​            操作别人:1)参与运算  2)赋值  3)打印</p><p>​                ++–在操作数的前面,都是先自身+1|-1然后在参与运算</p><p>​                ++–在操作数的后面,都是先参与运算,再自身+1|-1</p><p>​        </p><p>​            一个变量在同一时刻只能指向一个值 </p><p><strong>赋值运算符</strong></p><p>​        基础赋值运算符  =</p><p>​            = 优先级最低</p><p>​            唯一一个自右向左运算符的符号</p><p>​        </p><p>​        扩展赋值运算符(基础赋值运算符+算数运算符)</p><p>​         += -= *= /= %=</p><p>​         a+=1 ==&gt;a=a+1;</p><p>​         </p><p>优点: </p><p>​        提高执行效率,否则编译器也会把数据优化成为扩展赋值运算符的形式,能够成倍提高效率</p><p>​        帮强制类型转换 </p><p>缺点: 不直观</p><p>​        </p><p>​         推荐使用扩展赋值运算符</p><p><strong>比较运算符|关系运算符</strong></p><p>​        &gt; &lt; &gt;= &lt;= </p><p>​            只能比较byte,short,int,long,float,double,char</p><p>​        </p><p>​        == !=</p><p>​            可以使用基本数据类型|引用数据类型</p><p>​            </p><p>​        结果都是boolean类型的结果</p><p><strong>逻辑运算符</strong></p><p>​        操作数是值为boolean类型的表达式</p><p>​        &amp; 与: 两边都为true结果才为true,一个为false结果为false</p><p>​        | 或: 一个为ture就是true,两个都为flase才是false</p><p>​        ! 非: 取反  !true–&gt;false</p><p>​        </p><p>​        ^ 亦或: 两个操作数相同为false,不同为true</p><p>​        </p><p>​        短路的作用:如果第一个操作数就已经能够决定最终的结果了,第二个表达式不再执行</p><p>​        &amp;&amp;</p><p>​        ||</p><p>​        </p><p>​        推荐使用短路     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注释:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;//单行注释&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;多行注释&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;*文档注释&lt;/em&gt;/     &lt;/p&gt;
&lt;p&gt;​        解释说明的文字&lt;/p&gt;
&lt;p&gt;​    作用:&lt;/p&gt;
&lt;p&gt;​  
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>配置环境</title>
    <link href="https://detailmk.github.io/2019/06/30/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://detailmk.github.io/2019/06/30/配置环境/</id>
    <published>2019-06-30T13:56:50.000Z</published>
    <updated>2019-08-07T10:28:39.407Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog</p><p>一.常见的dos命令</p><p>​    window+r |开始-&gt;运行-&gt;cmd\</p><p>​    快速编辑模式</p><p>​    1.dir 罗列出当前目录下的所有的子文件和子文件夹</p><p>​    2.盘符名字: 切换盘符(大小写都可以)</p><p>​    3.cd 改变目录</p><p>​    4.cd 路径 进入某个路径</p><p>​        相对路径  </p><p>​        绝对路径(盘符开始)</p><p>​    5.cd.. 回到上一层目录</p><p>​    6.cd\ 回到根目录</p><p>​    7.cls 清屏</p><p>​    8.exit 退出</p><p>​    9.tab 自动补全</p><p>​    10.方向上下键  查找历史命令</p><p>二.重要jdk版本 (补全新特性3个)</p><p>​    jdk1.2  J2SE J2ME J2EE</p><p>​    jdk5 改名+新特性</p><p>​    jdk7 新特性</p><p>1.对Java集合（Collections）的增强支持，可直接采用[]、{}的形式存入对象，采用[]的形式按照索引、键值来获取集合中的对象。如：</p><p>List<string>list=[“item1”,”item2”];//存</string></p><p>Stringitem=list[0];//直接取</p><p>​         Set<string>set={“item1”,”item2”,”item3”};//存</string></p><p>​         Map&lt;String,Integer&gt; map={“key1”:1,”key2”:2};//存</p><p>​         Intvalue=map[“key1”];//取</p><p>2.在Switch中可用String</p><p>3.数值可加下划线用作分隔符（编译时自动被忽略）</p><p>4.支持二进制数字，如：int binary= 0b1001_1001;</p><p>5.简化了可变参数方法的调用</p><p>6.调用泛型类的构造方法时，可以省去泛型参数，编译器会自动判断。</p><p>7.Boolean类型反转，空指针安全,参与位运算</p><p>8.char类型的equals方法: booleanCharacter.equalsIgnoreCase(char ch1, char ch2)</p><p>9.安全的加减乘除: Math.safeToInt(longv); Math.safeNegate(int v); Math.safeSubtract(long v1, int v2);Math.safeMultiply(int v1, int v2)……</p><p>10 .Map集合支持并发请求，注HashTable是线程安全的，Map是非线程安全的。但此处更新使得其也支持并发。另外，Map对象可这样定义：Map map = {name:”xxx”,age:18};</p><p>jdk8 新特性 </p><p>1.接口的默认方法：即接口中可以声明一个非抽象的方法做为默认的实现，但只能声明一个，且在方法的返回类型前要加上“default”关键字。</p><p>\2. Lambda 表达式：是对匿名比较器的简化，如：</p><p>​         Collections.sort(names,(String a, String b) -&gt; {</p><p>​                   returnb.compareTo(a);</p><p>});</p><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字。如：</p><p>​         Collections.sort(names,(String a, String b) -&gt; b.compareTo(a));</p><p>或：Collections.sort(names, (a, b) -&gt; b.compareTo(a));</p><p>\3. 函数式接口：是指仅仅只包含一个抽象方法的接口，要加@FunctionalInterface注解</p><p>\4. 使用 :: 关键字来传递方法或者构造函数引用</p><p>5.多重注解</p><p>6.还增加了很多与函数式接口类似的接口以及与Map相关的API等……    </p><p>三.三个重要的名词</p><p>​    jdk 开发工具包</p><p>​    jre 运行环境</p><p>​    jvm 虚拟机</p><p>​    jdk&gt;jre&gt;jvm</p><p>​    </p><p>四.Java语言的特点</p><p>​    简单高效、面向对象、平台无关性。</p><p>​    一次编译，到处运行</p><p>​    Java语言是跨平台的，请问是如何保证的呢?(理解)</p><p>​        针对不同的操作系统，靠不同的jvm来实现的。</p><p>五.安装jdk</p><p> 详见文档</p><p> 注意:</p><p>​    1.jdk和jre要安装在同一路径下</p><p>​    2.路径名字不要出现中文,中文符号,空格.</p><p> 测试jdk是否安装成功:</p><p>​    1.在任意路径下执行java命令</p><p>​    2.在任意路径下执行java -version</p><p>六.第一个java程序</p><p>​    组成-&gt;文件夹和搜索选项-&gt;查看-&gt;隐藏文件的后缀名-&gt;对勾取消</p><p>​    1.新建文件  以.java为结尾</p><p>​    2.编写代码</p><p>​    3.执行javac命令 把以.java为结尾的源文件编译成一份以.class为结尾的字节码文件</p><p>​    4.执行java命令,解释执行字节码文件</p><p>​    </p><p>七.配置环境变量</p><p>​    目的:为了在任意路径下执行javac命令</p><p>​    备份path中的内容</p><p>​    修改了环境变量要重写打开dos窗口</p><p>​    步骤:计算机-&gt;右键-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;path-&gt;把jdk的bin目录配置到path中(一般最前或者左右)</p><p>​         路径和路径之间使用英文状态下的;分隔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to my blog&lt;/p&gt;
&lt;p&gt;一.常见的dos命令&lt;/p&gt;
&lt;p&gt;​    window+r |开始-&amp;gt;运行-&amp;gt;cmd\&lt;/p&gt;
&lt;p&gt;​    快速编辑模式&lt;/p&gt;
&lt;p&gt;​    1.dir 罗列出当前目录下的所有的子文件和子文件夹&lt;/
      
    
    </summary>
    
      <category term="javaSE基础" scheme="https://detailmk.github.io/categories/javaSE%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javase" scheme="https://detailmk.github.io/tags/javase/"/>
    
  </entry>
  
</feed>
